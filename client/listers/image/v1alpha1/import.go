/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/image/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImportLister helps list Imports.
// All objects returned here must be treated as read-only.
type ImportLister interface {
	// List lists all Imports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Import, err error)
	// Imports returns an object that can list and get Imports.
	Imports(namespace string) ImportNamespaceLister
	ImportListerExpansion
}

// importLister implements the ImportLister interface.
type importLister struct {
	indexer cache.Indexer
}

// NewImportLister returns a new ImportLister.
func NewImportLister(indexer cache.Indexer) ImportLister {
	return &importLister{indexer: indexer}
}

// List lists all Imports in the indexer.
func (s *importLister) List(selector labels.Selector) (ret []*v1alpha1.Import, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Import))
	})
	return ret, err
}

// Imports returns an object that can list and get Imports.
func (s *importLister) Imports(namespace string) ImportNamespaceLister {
	return importNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImportNamespaceLister helps list and get Imports.
// All objects returned here must be treated as read-only.
type ImportNamespaceLister interface {
	// List lists all Imports in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Import, err error)
	// Get retrieves the Import from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Import, error)
	ImportNamespaceListerExpansion
}

// importNamespaceLister implements the ImportNamespaceLister
// interface.
type importNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Imports in the indexer for a given namespace.
func (s importNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Import, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Import))
	})
	return ret, err
}

// Get retrieves the Import from the indexer for a given namespace and name.
func (s importNamespaceLister) Get(name string) (*v1alpha1.Import, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("import"), name)
	}
	return obj.(*v1alpha1.Import), nil
}
