/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/image/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExportLister helps list Exports.
// All objects returned here must be treated as read-only.
type ExportLister interface {
	// List lists all Exports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Export, err error)
	// Exports returns an object that can list and get Exports.
	Exports(namespace string) ExportNamespaceLister
	ExportListerExpansion
}

// exportLister implements the ExportLister interface.
type exportLister struct {
	indexer cache.Indexer
}

// NewExportLister returns a new ExportLister.
func NewExportLister(indexer cache.Indexer) ExportLister {
	return &exportLister{indexer: indexer}
}

// List lists all Exports in the indexer.
func (s *exportLister) List(selector labels.Selector) (ret []*v1alpha1.Export, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Export))
	})
	return ret, err
}

// Exports returns an object that can list and get Exports.
func (s *exportLister) Exports(namespace string) ExportNamespaceLister {
	return exportNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExportNamespaceLister helps list and get Exports.
// All objects returned here must be treated as read-only.
type ExportNamespaceLister interface {
	// List lists all Exports in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Export, err error)
	// Get retrieves the Export from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Export, error)
	ExportNamespaceListerExpansion
}

// exportNamespaceLister implements the ExportNamespaceLister
// interface.
type exportNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Exports in the indexer for a given namespace.
func (s exportNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Export, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Export))
	})
	return ret, err
}

// Get retrieves the Export from the indexer for a given namespace and name.
func (s exportNamespaceLister) Get(name string) (*v1alpha1.Export, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("export"), name)
	}
	return obj.(*v1alpha1.Export), nil
}
