/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/direct/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MailReceiversLister helps list MailReceiverses.
// All objects returned here must be treated as read-only.
type MailReceiversLister interface {
	// List lists all MailReceiverses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MailReceivers, err error)
	// MailReceiverses returns an object that can list and get MailReceiverses.
	MailReceiverses(namespace string) MailReceiversNamespaceLister
	MailReceiversListerExpansion
}

// mailReceiversLister implements the MailReceiversLister interface.
type mailReceiversLister struct {
	indexer cache.Indexer
}

// NewMailReceiversLister returns a new MailReceiversLister.
func NewMailReceiversLister(indexer cache.Indexer) MailReceiversLister {
	return &mailReceiversLister{indexer: indexer}
}

// List lists all MailReceiverses in the indexer.
func (s *mailReceiversLister) List(selector labels.Selector) (ret []*v1alpha1.MailReceivers, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MailReceivers))
	})
	return ret, err
}

// MailReceiverses returns an object that can list and get MailReceiverses.
func (s *mailReceiversLister) MailReceiverses(namespace string) MailReceiversNamespaceLister {
	return mailReceiversNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MailReceiversNamespaceLister helps list and get MailReceiverses.
// All objects returned here must be treated as read-only.
type MailReceiversNamespaceLister interface {
	// List lists all MailReceiverses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MailReceivers, err error)
	// Get retrieves the MailReceivers from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MailReceivers, error)
	MailReceiversNamespaceListerExpansion
}

// mailReceiversNamespaceLister implements the MailReceiversNamespaceLister
// interface.
type mailReceiversNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MailReceiverses in the indexer for a given namespace.
func (s mailReceiversNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MailReceivers, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MailReceivers))
	})
	return ret, err
}

// Get retrieves the MailReceivers from the indexer for a given namespace and name.
func (s mailReceiversNamespaceLister) Get(name string) (*v1alpha1.MailReceivers, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mailreceivers"), name)
	}
	return obj.(*v1alpha1.MailReceivers), nil
}
