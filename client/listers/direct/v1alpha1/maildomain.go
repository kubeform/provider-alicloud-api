/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/direct/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MailDomainLister helps list MailDomains.
// All objects returned here must be treated as read-only.
type MailDomainLister interface {
	// List lists all MailDomains in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MailDomain, err error)
	// MailDomains returns an object that can list and get MailDomains.
	MailDomains(namespace string) MailDomainNamespaceLister
	MailDomainListerExpansion
}

// mailDomainLister implements the MailDomainLister interface.
type mailDomainLister struct {
	indexer cache.Indexer
}

// NewMailDomainLister returns a new MailDomainLister.
func NewMailDomainLister(indexer cache.Indexer) MailDomainLister {
	return &mailDomainLister{indexer: indexer}
}

// List lists all MailDomains in the indexer.
func (s *mailDomainLister) List(selector labels.Selector) (ret []*v1alpha1.MailDomain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MailDomain))
	})
	return ret, err
}

// MailDomains returns an object that can list and get MailDomains.
func (s *mailDomainLister) MailDomains(namespace string) MailDomainNamespaceLister {
	return mailDomainNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MailDomainNamespaceLister helps list and get MailDomains.
// All objects returned here must be treated as read-only.
type MailDomainNamespaceLister interface {
	// List lists all MailDomains in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MailDomain, err error)
	// Get retrieves the MailDomain from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MailDomain, error)
	MailDomainNamespaceListerExpansion
}

// mailDomainNamespaceLister implements the MailDomainNamespaceLister
// interface.
type mailDomainNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MailDomains in the indexer for a given namespace.
func (s mailDomainNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MailDomain, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MailDomain))
	})
	return ret, err
}

// Get retrieves the MailDomain from the indexer for a given namespace and name.
func (s mailDomainNamespaceLister) Get(name string) (*v1alpha1.MailDomain, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("maildomain"), name)
	}
	return obj.(*v1alpha1.MailDomain), nil
}
