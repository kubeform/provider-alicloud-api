/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/actiontrail/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ActiontrailLister helps list Actiontrails.
// All objects returned here must be treated as read-only.
type ActiontrailLister interface {
	// List lists all Actiontrails in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Actiontrail, err error)
	// Actiontrails returns an object that can list and get Actiontrails.
	Actiontrails(namespace string) ActiontrailNamespaceLister
	ActiontrailListerExpansion
}

// actiontrailLister implements the ActiontrailLister interface.
type actiontrailLister struct {
	indexer cache.Indexer
}

// NewActiontrailLister returns a new ActiontrailLister.
func NewActiontrailLister(indexer cache.Indexer) ActiontrailLister {
	return &actiontrailLister{indexer: indexer}
}

// List lists all Actiontrails in the indexer.
func (s *actiontrailLister) List(selector labels.Selector) (ret []*v1alpha1.Actiontrail, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Actiontrail))
	})
	return ret, err
}

// Actiontrails returns an object that can list and get Actiontrails.
func (s *actiontrailLister) Actiontrails(namespace string) ActiontrailNamespaceLister {
	return actiontrailNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ActiontrailNamespaceLister helps list and get Actiontrails.
// All objects returned here must be treated as read-only.
type ActiontrailNamespaceLister interface {
	// List lists all Actiontrails in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Actiontrail, err error)
	// Get retrieves the Actiontrail from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Actiontrail, error)
	ActiontrailNamespaceListerExpansion
}

// actiontrailNamespaceLister implements the ActiontrailNamespaceLister
// interface.
type actiontrailNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Actiontrails in the indexer for a given namespace.
func (s actiontrailNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Actiontrail, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Actiontrail))
	})
	return ret, err
}

// Get retrieves the Actiontrail from the indexer for a given namespace and name.
func (s actiontrailNamespaceLister) Get(name string) (*v1alpha1.Actiontrail, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("actiontrail"), name)
	}
	return obj.(*v1alpha1.Actiontrail), nil
}
