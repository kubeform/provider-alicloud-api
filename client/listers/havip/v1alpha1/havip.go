/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/havip/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HavipLister helps list Havips.
// All objects returned here must be treated as read-only.
type HavipLister interface {
	// List lists all Havips in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Havip, err error)
	// Havips returns an object that can list and get Havips.
	Havips(namespace string) HavipNamespaceLister
	HavipListerExpansion
}

// havipLister implements the HavipLister interface.
type havipLister struct {
	indexer cache.Indexer
}

// NewHavipLister returns a new HavipLister.
func NewHavipLister(indexer cache.Indexer) HavipLister {
	return &havipLister{indexer: indexer}
}

// List lists all Havips in the indexer.
func (s *havipLister) List(selector labels.Selector) (ret []*v1alpha1.Havip, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Havip))
	})
	return ret, err
}

// Havips returns an object that can list and get Havips.
func (s *havipLister) Havips(namespace string) HavipNamespaceLister {
	return havipNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HavipNamespaceLister helps list and get Havips.
// All objects returned here must be treated as read-only.
type HavipNamespaceLister interface {
	// List lists all Havips in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Havip, err error)
	// Get retrieves the Havip from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Havip, error)
	HavipNamespaceListerExpansion
}

// havipNamespaceLister implements the HavipNamespaceLister
// interface.
type havipNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Havips in the indexer for a given namespace.
func (s havipNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Havip, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Havip))
	})
	return ret, err
}

// Get retrieves the Havip from the indexer for a given namespace and name.
func (s havipNamespaceLister) Get(name string) (*v1alpha1.Havip, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("havip"), name)
	}
	return obj.(*v1alpha1.Havip), nil
}
