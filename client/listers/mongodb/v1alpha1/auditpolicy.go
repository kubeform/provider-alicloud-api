/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/mongodb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuditPolicyLister helps list AuditPolicies.
// All objects returned here must be treated as read-only.
type AuditPolicyLister interface {
	// List lists all AuditPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AuditPolicy, err error)
	// AuditPolicies returns an object that can list and get AuditPolicies.
	AuditPolicies(namespace string) AuditPolicyNamespaceLister
	AuditPolicyListerExpansion
}

// auditPolicyLister implements the AuditPolicyLister interface.
type auditPolicyLister struct {
	indexer cache.Indexer
}

// NewAuditPolicyLister returns a new AuditPolicyLister.
func NewAuditPolicyLister(indexer cache.Indexer) AuditPolicyLister {
	return &auditPolicyLister{indexer: indexer}
}

// List lists all AuditPolicies in the indexer.
func (s *auditPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.AuditPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuditPolicy))
	})
	return ret, err
}

// AuditPolicies returns an object that can list and get AuditPolicies.
func (s *auditPolicyLister) AuditPolicies(namespace string) AuditPolicyNamespaceLister {
	return auditPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuditPolicyNamespaceLister helps list and get AuditPolicies.
// All objects returned here must be treated as read-only.
type AuditPolicyNamespaceLister interface {
	// List lists all AuditPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AuditPolicy, err error)
	// Get retrieves the AuditPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AuditPolicy, error)
	AuditPolicyNamespaceListerExpansion
}

// auditPolicyNamespaceLister implements the AuditPolicyNamespaceLister
// interface.
type auditPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AuditPolicies in the indexer for a given namespace.
func (s auditPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AuditPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuditPolicy))
	})
	return ret, err
}

// Get retrieves the AuditPolicy from the indexer for a given namespace and name.
func (s auditPolicyNamespaceLister) Get(name string) (*v1alpha1.AuditPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("auditpolicy"), name)
	}
	return obj.(*v1alpha1.AuditPolicy), nil
}
