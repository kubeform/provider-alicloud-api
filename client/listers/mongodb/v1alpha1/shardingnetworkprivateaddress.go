/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/mongodb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShardingNetworkPrivateAddressLister helps list ShardingNetworkPrivateAddresses.
// All objects returned here must be treated as read-only.
type ShardingNetworkPrivateAddressLister interface {
	// List lists all ShardingNetworkPrivateAddresses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ShardingNetworkPrivateAddress, err error)
	// ShardingNetworkPrivateAddresses returns an object that can list and get ShardingNetworkPrivateAddresses.
	ShardingNetworkPrivateAddresses(namespace string) ShardingNetworkPrivateAddressNamespaceLister
	ShardingNetworkPrivateAddressListerExpansion
}

// shardingNetworkPrivateAddressLister implements the ShardingNetworkPrivateAddressLister interface.
type shardingNetworkPrivateAddressLister struct {
	indexer cache.Indexer
}

// NewShardingNetworkPrivateAddressLister returns a new ShardingNetworkPrivateAddressLister.
func NewShardingNetworkPrivateAddressLister(indexer cache.Indexer) ShardingNetworkPrivateAddressLister {
	return &shardingNetworkPrivateAddressLister{indexer: indexer}
}

// List lists all ShardingNetworkPrivateAddresses in the indexer.
func (s *shardingNetworkPrivateAddressLister) List(selector labels.Selector) (ret []*v1alpha1.ShardingNetworkPrivateAddress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ShardingNetworkPrivateAddress))
	})
	return ret, err
}

// ShardingNetworkPrivateAddresses returns an object that can list and get ShardingNetworkPrivateAddresses.
func (s *shardingNetworkPrivateAddressLister) ShardingNetworkPrivateAddresses(namespace string) ShardingNetworkPrivateAddressNamespaceLister {
	return shardingNetworkPrivateAddressNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ShardingNetworkPrivateAddressNamespaceLister helps list and get ShardingNetworkPrivateAddresses.
// All objects returned here must be treated as read-only.
type ShardingNetworkPrivateAddressNamespaceLister interface {
	// List lists all ShardingNetworkPrivateAddresses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ShardingNetworkPrivateAddress, err error)
	// Get retrieves the ShardingNetworkPrivateAddress from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ShardingNetworkPrivateAddress, error)
	ShardingNetworkPrivateAddressNamespaceListerExpansion
}

// shardingNetworkPrivateAddressNamespaceLister implements the ShardingNetworkPrivateAddressNamespaceLister
// interface.
type shardingNetworkPrivateAddressNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ShardingNetworkPrivateAddresses in the indexer for a given namespace.
func (s shardingNetworkPrivateAddressNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ShardingNetworkPrivateAddress, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ShardingNetworkPrivateAddress))
	})
	return ret, err
}

// Get retrieves the ShardingNetworkPrivateAddress from the indexer for a given namespace and name.
func (s shardingNetworkPrivateAddressNamespaceLister) Get(name string) (*v1alpha1.ShardingNetworkPrivateAddress, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("shardingnetworkprivateaddress"), name)
	}
	return obj.(*v1alpha1.ShardingNetworkPrivateAddress), nil
}
