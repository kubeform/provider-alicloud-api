/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/arms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DispatchRuleLister helps list DispatchRules.
// All objects returned here must be treated as read-only.
type DispatchRuleLister interface {
	// List lists all DispatchRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DispatchRule, err error)
	// DispatchRules returns an object that can list and get DispatchRules.
	DispatchRules(namespace string) DispatchRuleNamespaceLister
	DispatchRuleListerExpansion
}

// dispatchRuleLister implements the DispatchRuleLister interface.
type dispatchRuleLister struct {
	indexer cache.Indexer
}

// NewDispatchRuleLister returns a new DispatchRuleLister.
func NewDispatchRuleLister(indexer cache.Indexer) DispatchRuleLister {
	return &dispatchRuleLister{indexer: indexer}
}

// List lists all DispatchRules in the indexer.
func (s *dispatchRuleLister) List(selector labels.Selector) (ret []*v1alpha1.DispatchRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DispatchRule))
	})
	return ret, err
}

// DispatchRules returns an object that can list and get DispatchRules.
func (s *dispatchRuleLister) DispatchRules(namespace string) DispatchRuleNamespaceLister {
	return dispatchRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DispatchRuleNamespaceLister helps list and get DispatchRules.
// All objects returned here must be treated as read-only.
type DispatchRuleNamespaceLister interface {
	// List lists all DispatchRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DispatchRule, err error)
	// Get retrieves the DispatchRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DispatchRule, error)
	DispatchRuleNamespaceListerExpansion
}

// dispatchRuleNamespaceLister implements the DispatchRuleNamespaceLister
// interface.
type dispatchRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DispatchRules in the indexer for a given namespace.
func (s dispatchRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DispatchRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DispatchRule))
	})
	return ret, err
}

// Get retrieves the DispatchRule from the indexer for a given namespace and name.
func (s dispatchRuleNamespaceLister) Get(name string) (*v1alpha1.DispatchRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dispatchrule"), name)
	}
	return obj.(*v1alpha1.DispatchRule), nil
}
