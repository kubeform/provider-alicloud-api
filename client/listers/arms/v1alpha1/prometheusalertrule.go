/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/arms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrometheusAlertRuleLister helps list PrometheusAlertRules.
// All objects returned here must be treated as read-only.
type PrometheusAlertRuleLister interface {
	// List lists all PrometheusAlertRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrometheusAlertRule, err error)
	// PrometheusAlertRules returns an object that can list and get PrometheusAlertRules.
	PrometheusAlertRules(namespace string) PrometheusAlertRuleNamespaceLister
	PrometheusAlertRuleListerExpansion
}

// prometheusAlertRuleLister implements the PrometheusAlertRuleLister interface.
type prometheusAlertRuleLister struct {
	indexer cache.Indexer
}

// NewPrometheusAlertRuleLister returns a new PrometheusAlertRuleLister.
func NewPrometheusAlertRuleLister(indexer cache.Indexer) PrometheusAlertRuleLister {
	return &prometheusAlertRuleLister{indexer: indexer}
}

// List lists all PrometheusAlertRules in the indexer.
func (s *prometheusAlertRuleLister) List(selector labels.Selector) (ret []*v1alpha1.PrometheusAlertRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrometheusAlertRule))
	})
	return ret, err
}

// PrometheusAlertRules returns an object that can list and get PrometheusAlertRules.
func (s *prometheusAlertRuleLister) PrometheusAlertRules(namespace string) PrometheusAlertRuleNamespaceLister {
	return prometheusAlertRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrometheusAlertRuleNamespaceLister helps list and get PrometheusAlertRules.
// All objects returned here must be treated as read-only.
type PrometheusAlertRuleNamespaceLister interface {
	// List lists all PrometheusAlertRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrometheusAlertRule, err error)
	// Get retrieves the PrometheusAlertRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PrometheusAlertRule, error)
	PrometheusAlertRuleNamespaceListerExpansion
}

// prometheusAlertRuleNamespaceLister implements the PrometheusAlertRuleNamespaceLister
// interface.
type prometheusAlertRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrometheusAlertRules in the indexer for a given namespace.
func (s prometheusAlertRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrometheusAlertRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrometheusAlertRule))
	})
	return ret, err
}

// Get retrieves the PrometheusAlertRule from the indexer for a given namespace and name.
func (s prometheusAlertRuleNamespaceLister) Get(name string) (*v1alpha1.PrometheusAlertRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("prometheusalertrule"), name)
	}
	return obj.(*v1alpha1.PrometheusAlertRule), nil
}
