/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/dts/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SynchronizationInstanceLister helps list SynchronizationInstances.
// All objects returned here must be treated as read-only.
type SynchronizationInstanceLister interface {
	// List lists all SynchronizationInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SynchronizationInstance, err error)
	// SynchronizationInstances returns an object that can list and get SynchronizationInstances.
	SynchronizationInstances(namespace string) SynchronizationInstanceNamespaceLister
	SynchronizationInstanceListerExpansion
}

// synchronizationInstanceLister implements the SynchronizationInstanceLister interface.
type synchronizationInstanceLister struct {
	indexer cache.Indexer
}

// NewSynchronizationInstanceLister returns a new SynchronizationInstanceLister.
func NewSynchronizationInstanceLister(indexer cache.Indexer) SynchronizationInstanceLister {
	return &synchronizationInstanceLister{indexer: indexer}
}

// List lists all SynchronizationInstances in the indexer.
func (s *synchronizationInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.SynchronizationInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SynchronizationInstance))
	})
	return ret, err
}

// SynchronizationInstances returns an object that can list and get SynchronizationInstances.
func (s *synchronizationInstanceLister) SynchronizationInstances(namespace string) SynchronizationInstanceNamespaceLister {
	return synchronizationInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SynchronizationInstanceNamespaceLister helps list and get SynchronizationInstances.
// All objects returned here must be treated as read-only.
type SynchronizationInstanceNamespaceLister interface {
	// List lists all SynchronizationInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SynchronizationInstance, err error)
	// Get retrieves the SynchronizationInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SynchronizationInstance, error)
	SynchronizationInstanceNamespaceListerExpansion
}

// synchronizationInstanceNamespaceLister implements the SynchronizationInstanceNamespaceLister
// interface.
type synchronizationInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SynchronizationInstances in the indexer for a given namespace.
func (s synchronizationInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SynchronizationInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SynchronizationInstance))
	})
	return ret, err
}

// Get retrieves the SynchronizationInstance from the indexer for a given namespace and name.
func (s synchronizationInstanceNamespaceLister) Get(name string) (*v1alpha1.SynchronizationInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("synchronizationinstance"), name)
	}
	return obj.(*v1alpha1.SynchronizationInstance), nil
}
