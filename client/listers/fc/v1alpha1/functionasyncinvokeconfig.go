/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/fc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FunctionAsyncInvokeConfigLister helps list FunctionAsyncInvokeConfigs.
// All objects returned here must be treated as read-only.
type FunctionAsyncInvokeConfigLister interface {
	// List lists all FunctionAsyncInvokeConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FunctionAsyncInvokeConfig, err error)
	// FunctionAsyncInvokeConfigs returns an object that can list and get FunctionAsyncInvokeConfigs.
	FunctionAsyncInvokeConfigs(namespace string) FunctionAsyncInvokeConfigNamespaceLister
	FunctionAsyncInvokeConfigListerExpansion
}

// functionAsyncInvokeConfigLister implements the FunctionAsyncInvokeConfigLister interface.
type functionAsyncInvokeConfigLister struct {
	indexer cache.Indexer
}

// NewFunctionAsyncInvokeConfigLister returns a new FunctionAsyncInvokeConfigLister.
func NewFunctionAsyncInvokeConfigLister(indexer cache.Indexer) FunctionAsyncInvokeConfigLister {
	return &functionAsyncInvokeConfigLister{indexer: indexer}
}

// List lists all FunctionAsyncInvokeConfigs in the indexer.
func (s *functionAsyncInvokeConfigLister) List(selector labels.Selector) (ret []*v1alpha1.FunctionAsyncInvokeConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FunctionAsyncInvokeConfig))
	})
	return ret, err
}

// FunctionAsyncInvokeConfigs returns an object that can list and get FunctionAsyncInvokeConfigs.
func (s *functionAsyncInvokeConfigLister) FunctionAsyncInvokeConfigs(namespace string) FunctionAsyncInvokeConfigNamespaceLister {
	return functionAsyncInvokeConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FunctionAsyncInvokeConfigNamespaceLister helps list and get FunctionAsyncInvokeConfigs.
// All objects returned here must be treated as read-only.
type FunctionAsyncInvokeConfigNamespaceLister interface {
	// List lists all FunctionAsyncInvokeConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FunctionAsyncInvokeConfig, err error)
	// Get retrieves the FunctionAsyncInvokeConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FunctionAsyncInvokeConfig, error)
	FunctionAsyncInvokeConfigNamespaceListerExpansion
}

// functionAsyncInvokeConfigNamespaceLister implements the FunctionAsyncInvokeConfigNamespaceLister
// interface.
type functionAsyncInvokeConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FunctionAsyncInvokeConfigs in the indexer for a given namespace.
func (s functionAsyncInvokeConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FunctionAsyncInvokeConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FunctionAsyncInvokeConfig))
	})
	return ret, err
}

// Get retrieves the FunctionAsyncInvokeConfig from the indexer for a given namespace and name.
func (s functionAsyncInvokeConfigNamespaceLister) Get(name string) (*v1alpha1.FunctionAsyncInvokeConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("functionasyncinvokeconfig"), name)
	}
	return obj.(*v1alpha1.FunctionAsyncInvokeConfig), nil
}
