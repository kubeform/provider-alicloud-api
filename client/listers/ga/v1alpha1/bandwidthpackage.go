/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ga/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BandwidthPackageLister helps list BandwidthPackages.
// All objects returned here must be treated as read-only.
type BandwidthPackageLister interface {
	// List lists all BandwidthPackages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BandwidthPackage, err error)
	// BandwidthPackages returns an object that can list and get BandwidthPackages.
	BandwidthPackages(namespace string) BandwidthPackageNamespaceLister
	BandwidthPackageListerExpansion
}

// bandwidthPackageLister implements the BandwidthPackageLister interface.
type bandwidthPackageLister struct {
	indexer cache.Indexer
}

// NewBandwidthPackageLister returns a new BandwidthPackageLister.
func NewBandwidthPackageLister(indexer cache.Indexer) BandwidthPackageLister {
	return &bandwidthPackageLister{indexer: indexer}
}

// List lists all BandwidthPackages in the indexer.
func (s *bandwidthPackageLister) List(selector labels.Selector) (ret []*v1alpha1.BandwidthPackage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BandwidthPackage))
	})
	return ret, err
}

// BandwidthPackages returns an object that can list and get BandwidthPackages.
func (s *bandwidthPackageLister) BandwidthPackages(namespace string) BandwidthPackageNamespaceLister {
	return bandwidthPackageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BandwidthPackageNamespaceLister helps list and get BandwidthPackages.
// All objects returned here must be treated as read-only.
type BandwidthPackageNamespaceLister interface {
	// List lists all BandwidthPackages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BandwidthPackage, err error)
	// Get retrieves the BandwidthPackage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BandwidthPackage, error)
	BandwidthPackageNamespaceListerExpansion
}

// bandwidthPackageNamespaceLister implements the BandwidthPackageNamespaceLister
// interface.
type bandwidthPackageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BandwidthPackages in the indexer for a given namespace.
func (s bandwidthPackageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BandwidthPackage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BandwidthPackage))
	})
	return ret, err
}

// Get retrieves the BandwidthPackage from the indexer for a given namespace and name.
func (s bandwidthPackageNamespaceLister) Get(name string) (*v1alpha1.BandwidthPackage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bandwidthpackage"), name)
	}
	return obj.(*v1alpha1.BandwidthPackage), nil
}
