/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/route/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TableAttachmentLister helps list TableAttachments.
// All objects returned here must be treated as read-only.
type TableAttachmentLister interface {
	// List lists all TableAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TableAttachment, err error)
	// TableAttachments returns an object that can list and get TableAttachments.
	TableAttachments(namespace string) TableAttachmentNamespaceLister
	TableAttachmentListerExpansion
}

// tableAttachmentLister implements the TableAttachmentLister interface.
type tableAttachmentLister struct {
	indexer cache.Indexer
}

// NewTableAttachmentLister returns a new TableAttachmentLister.
func NewTableAttachmentLister(indexer cache.Indexer) TableAttachmentLister {
	return &tableAttachmentLister{indexer: indexer}
}

// List lists all TableAttachments in the indexer.
func (s *tableAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.TableAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TableAttachment))
	})
	return ret, err
}

// TableAttachments returns an object that can list and get TableAttachments.
func (s *tableAttachmentLister) TableAttachments(namespace string) TableAttachmentNamespaceLister {
	return tableAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TableAttachmentNamespaceLister helps list and get TableAttachments.
// All objects returned here must be treated as read-only.
type TableAttachmentNamespaceLister interface {
	// List lists all TableAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TableAttachment, err error)
	// Get retrieves the TableAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TableAttachment, error)
	TableAttachmentNamespaceListerExpansion
}

// tableAttachmentNamespaceLister implements the TableAttachmentNamespaceLister
// interface.
type tableAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TableAttachments in the indexer for a given namespace.
func (s tableAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TableAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TableAttachment))
	})
	return ret, err
}

// Get retrieves the TableAttachment from the indexer for a given namespace and name.
func (s tableAttachmentNamespaceLister) Get(name string) (*v1alpha1.TableAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tableattachment"), name)
	}
	return obj.(*v1alpha1.TableAttachment), nil
}
