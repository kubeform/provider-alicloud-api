/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/graph/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseDbInstanceLister helps list DatabaseDbInstances.
// All objects returned here must be treated as read-only.
type DatabaseDbInstanceLister interface {
	// List lists all DatabaseDbInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseDbInstance, err error)
	// DatabaseDbInstances returns an object that can list and get DatabaseDbInstances.
	DatabaseDbInstances(namespace string) DatabaseDbInstanceNamespaceLister
	DatabaseDbInstanceListerExpansion
}

// databaseDbInstanceLister implements the DatabaseDbInstanceLister interface.
type databaseDbInstanceLister struct {
	indexer cache.Indexer
}

// NewDatabaseDbInstanceLister returns a new DatabaseDbInstanceLister.
func NewDatabaseDbInstanceLister(indexer cache.Indexer) DatabaseDbInstanceLister {
	return &databaseDbInstanceLister{indexer: indexer}
}

// List lists all DatabaseDbInstances in the indexer.
func (s *databaseDbInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseDbInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseDbInstance))
	})
	return ret, err
}

// DatabaseDbInstances returns an object that can list and get DatabaseDbInstances.
func (s *databaseDbInstanceLister) DatabaseDbInstances(namespace string) DatabaseDbInstanceNamespaceLister {
	return databaseDbInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseDbInstanceNamespaceLister helps list and get DatabaseDbInstances.
// All objects returned here must be treated as read-only.
type DatabaseDbInstanceNamespaceLister interface {
	// List lists all DatabaseDbInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseDbInstance, err error)
	// Get retrieves the DatabaseDbInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatabaseDbInstance, error)
	DatabaseDbInstanceNamespaceListerExpansion
}

// databaseDbInstanceNamespaceLister implements the DatabaseDbInstanceNamespaceLister
// interface.
type databaseDbInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseDbInstances in the indexer for a given namespace.
func (s databaseDbInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseDbInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseDbInstance))
	})
	return ret, err
}

// Get retrieves the DatabaseDbInstance from the indexer for a given namespace and name.
func (s databaseDbInstanceNamespaceLister) Get(name string) (*v1alpha1.DatabaseDbInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databasedbinstance"), name)
	}
	return obj.(*v1alpha1.DatabaseDbInstance), nil
}
