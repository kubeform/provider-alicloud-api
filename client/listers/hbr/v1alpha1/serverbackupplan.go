/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/hbr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServerBackupPlanLister helps list ServerBackupPlans.
// All objects returned here must be treated as read-only.
type ServerBackupPlanLister interface {
	// List lists all ServerBackupPlans in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerBackupPlan, err error)
	// ServerBackupPlans returns an object that can list and get ServerBackupPlans.
	ServerBackupPlans(namespace string) ServerBackupPlanNamespaceLister
	ServerBackupPlanListerExpansion
}

// serverBackupPlanLister implements the ServerBackupPlanLister interface.
type serverBackupPlanLister struct {
	indexer cache.Indexer
}

// NewServerBackupPlanLister returns a new ServerBackupPlanLister.
func NewServerBackupPlanLister(indexer cache.Indexer) ServerBackupPlanLister {
	return &serverBackupPlanLister{indexer: indexer}
}

// List lists all ServerBackupPlans in the indexer.
func (s *serverBackupPlanLister) List(selector labels.Selector) (ret []*v1alpha1.ServerBackupPlan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerBackupPlan))
	})
	return ret, err
}

// ServerBackupPlans returns an object that can list and get ServerBackupPlans.
func (s *serverBackupPlanLister) ServerBackupPlans(namespace string) ServerBackupPlanNamespaceLister {
	return serverBackupPlanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerBackupPlanNamespaceLister helps list and get ServerBackupPlans.
// All objects returned here must be treated as read-only.
type ServerBackupPlanNamespaceLister interface {
	// List lists all ServerBackupPlans in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerBackupPlan, err error)
	// Get retrieves the ServerBackupPlan from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServerBackupPlan, error)
	ServerBackupPlanNamespaceListerExpansion
}

// serverBackupPlanNamespaceLister implements the ServerBackupPlanNamespaceLister
// interface.
type serverBackupPlanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServerBackupPlans in the indexer for a given namespace.
func (s serverBackupPlanNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServerBackupPlan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerBackupPlan))
	})
	return ret, err
}

// Get retrieves the ServerBackupPlan from the indexer for a given namespace and name.
func (s serverBackupPlanNamespaceLister) Get(name string) (*v1alpha1.ServerBackupPlan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serverbackupplan"), name)
	}
	return obj.(*v1alpha1.ServerBackupPlan), nil
}
