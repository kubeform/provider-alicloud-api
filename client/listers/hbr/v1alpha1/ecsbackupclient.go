/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/hbr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EcsBackupClientLister helps list EcsBackupClients.
// All objects returned here must be treated as read-only.
type EcsBackupClientLister interface {
	// List lists all EcsBackupClients in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EcsBackupClient, err error)
	// EcsBackupClients returns an object that can list and get EcsBackupClients.
	EcsBackupClients(namespace string) EcsBackupClientNamespaceLister
	EcsBackupClientListerExpansion
}

// ecsBackupClientLister implements the EcsBackupClientLister interface.
type ecsBackupClientLister struct {
	indexer cache.Indexer
}

// NewEcsBackupClientLister returns a new EcsBackupClientLister.
func NewEcsBackupClientLister(indexer cache.Indexer) EcsBackupClientLister {
	return &ecsBackupClientLister{indexer: indexer}
}

// List lists all EcsBackupClients in the indexer.
func (s *ecsBackupClientLister) List(selector labels.Selector) (ret []*v1alpha1.EcsBackupClient, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EcsBackupClient))
	})
	return ret, err
}

// EcsBackupClients returns an object that can list and get EcsBackupClients.
func (s *ecsBackupClientLister) EcsBackupClients(namespace string) EcsBackupClientNamespaceLister {
	return ecsBackupClientNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EcsBackupClientNamespaceLister helps list and get EcsBackupClients.
// All objects returned here must be treated as read-only.
type EcsBackupClientNamespaceLister interface {
	// List lists all EcsBackupClients in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EcsBackupClient, err error)
	// Get retrieves the EcsBackupClient from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EcsBackupClient, error)
	EcsBackupClientNamespaceListerExpansion
}

// ecsBackupClientNamespaceLister implements the EcsBackupClientNamespaceLister
// interface.
type ecsBackupClientNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EcsBackupClients in the indexer for a given namespace.
func (s ecsBackupClientNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EcsBackupClient, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EcsBackupClient))
	})
	return ret, err
}

// Get retrieves the EcsBackupClient from the indexer for a given namespace and name.
func (s ecsBackupClientNamespaceLister) Get(name string) (*v1alpha1.EcsBackupClient, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ecsbackupclient"), name)
	}
	return obj.(*v1alpha1.EcsBackupClient), nil
}
