/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/hbr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NasBackupPlanLister helps list NasBackupPlans.
// All objects returned here must be treated as read-only.
type NasBackupPlanLister interface {
	// List lists all NasBackupPlans in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NasBackupPlan, err error)
	// NasBackupPlans returns an object that can list and get NasBackupPlans.
	NasBackupPlans(namespace string) NasBackupPlanNamespaceLister
	NasBackupPlanListerExpansion
}

// nasBackupPlanLister implements the NasBackupPlanLister interface.
type nasBackupPlanLister struct {
	indexer cache.Indexer
}

// NewNasBackupPlanLister returns a new NasBackupPlanLister.
func NewNasBackupPlanLister(indexer cache.Indexer) NasBackupPlanLister {
	return &nasBackupPlanLister{indexer: indexer}
}

// List lists all NasBackupPlans in the indexer.
func (s *nasBackupPlanLister) List(selector labels.Selector) (ret []*v1alpha1.NasBackupPlan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NasBackupPlan))
	})
	return ret, err
}

// NasBackupPlans returns an object that can list and get NasBackupPlans.
func (s *nasBackupPlanLister) NasBackupPlans(namespace string) NasBackupPlanNamespaceLister {
	return nasBackupPlanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NasBackupPlanNamespaceLister helps list and get NasBackupPlans.
// All objects returned here must be treated as read-only.
type NasBackupPlanNamespaceLister interface {
	// List lists all NasBackupPlans in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NasBackupPlan, err error)
	// Get retrieves the NasBackupPlan from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NasBackupPlan, error)
	NasBackupPlanNamespaceListerExpansion
}

// nasBackupPlanNamespaceLister implements the NasBackupPlanNamespaceLister
// interface.
type nasBackupPlanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NasBackupPlans in the indexer for a given namespace.
func (s nasBackupPlanNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NasBackupPlan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NasBackupPlan))
	})
	return ret, err
}

// Get retrieves the NasBackupPlan from the indexer for a given namespace and name.
func (s nasBackupPlanNamespaceLister) Get(name string) (*v1alpha1.NasBackupPlan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nasbackupplan"), name)
	}
	return obj.(*v1alpha1.NasBackupPlan), nil
}
