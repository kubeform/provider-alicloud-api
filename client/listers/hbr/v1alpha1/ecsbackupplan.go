/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/hbr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EcsBackupPlanLister helps list EcsBackupPlans.
// All objects returned here must be treated as read-only.
type EcsBackupPlanLister interface {
	// List lists all EcsBackupPlans in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EcsBackupPlan, err error)
	// EcsBackupPlans returns an object that can list and get EcsBackupPlans.
	EcsBackupPlans(namespace string) EcsBackupPlanNamespaceLister
	EcsBackupPlanListerExpansion
}

// ecsBackupPlanLister implements the EcsBackupPlanLister interface.
type ecsBackupPlanLister struct {
	indexer cache.Indexer
}

// NewEcsBackupPlanLister returns a new EcsBackupPlanLister.
func NewEcsBackupPlanLister(indexer cache.Indexer) EcsBackupPlanLister {
	return &ecsBackupPlanLister{indexer: indexer}
}

// List lists all EcsBackupPlans in the indexer.
func (s *ecsBackupPlanLister) List(selector labels.Selector) (ret []*v1alpha1.EcsBackupPlan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EcsBackupPlan))
	})
	return ret, err
}

// EcsBackupPlans returns an object that can list and get EcsBackupPlans.
func (s *ecsBackupPlanLister) EcsBackupPlans(namespace string) EcsBackupPlanNamespaceLister {
	return ecsBackupPlanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EcsBackupPlanNamespaceLister helps list and get EcsBackupPlans.
// All objects returned here must be treated as read-only.
type EcsBackupPlanNamespaceLister interface {
	// List lists all EcsBackupPlans in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EcsBackupPlan, err error)
	// Get retrieves the EcsBackupPlan from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EcsBackupPlan, error)
	EcsBackupPlanNamespaceListerExpansion
}

// ecsBackupPlanNamespaceLister implements the EcsBackupPlanNamespaceLister
// interface.
type ecsBackupPlanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EcsBackupPlans in the indexer for a given namespace.
func (s ecsBackupPlanNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EcsBackupPlan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EcsBackupPlan))
	})
	return ret, err
}

// Get retrieves the EcsBackupPlan from the indexer for a given namespace and name.
func (s ecsBackupPlanNamespaceLister) Get(name string) (*v1alpha1.EcsBackupPlan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ecsbackupplan"), name)
	}
	return obj.(*v1alpha1.EcsBackupPlan), nil
}
