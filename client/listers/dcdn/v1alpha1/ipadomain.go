/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/dcdn/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpaDomainLister helps list IpaDomains.
// All objects returned here must be treated as read-only.
type IpaDomainLister interface {
	// List lists all IpaDomains in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpaDomain, err error)
	// IpaDomains returns an object that can list and get IpaDomains.
	IpaDomains(namespace string) IpaDomainNamespaceLister
	IpaDomainListerExpansion
}

// ipaDomainLister implements the IpaDomainLister interface.
type ipaDomainLister struct {
	indexer cache.Indexer
}

// NewIpaDomainLister returns a new IpaDomainLister.
func NewIpaDomainLister(indexer cache.Indexer) IpaDomainLister {
	return &ipaDomainLister{indexer: indexer}
}

// List lists all IpaDomains in the indexer.
func (s *ipaDomainLister) List(selector labels.Selector) (ret []*v1alpha1.IpaDomain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpaDomain))
	})
	return ret, err
}

// IpaDomains returns an object that can list and get IpaDomains.
func (s *ipaDomainLister) IpaDomains(namespace string) IpaDomainNamespaceLister {
	return ipaDomainNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpaDomainNamespaceLister helps list and get IpaDomains.
// All objects returned here must be treated as read-only.
type IpaDomainNamespaceLister interface {
	// List lists all IpaDomains in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpaDomain, err error)
	// Get retrieves the IpaDomain from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpaDomain, error)
	IpaDomainNamespaceListerExpansion
}

// ipaDomainNamespaceLister implements the IpaDomainNamespaceLister
// interface.
type ipaDomainNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpaDomains in the indexer for a given namespace.
func (s ipaDomainNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpaDomain, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpaDomain))
	})
	return ret, err
}

// Get retrieves the IpaDomain from the indexer for a given namespace and name.
func (s ipaDomainNamespaceLister) Get(name string) (*v1alpha1.IpaDomain, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipadomain"), name)
	}
	return obj.(*v1alpha1.IpaDomain), nil
}
