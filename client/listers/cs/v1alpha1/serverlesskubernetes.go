/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServerlessKubernetesLister helps list ServerlessKuberneteses.
// All objects returned here must be treated as read-only.
type ServerlessKubernetesLister interface {
	// List lists all ServerlessKuberneteses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerlessKubernetes, err error)
	// ServerlessKuberneteses returns an object that can list and get ServerlessKuberneteses.
	ServerlessKuberneteses(namespace string) ServerlessKubernetesNamespaceLister
	ServerlessKubernetesListerExpansion
}

// serverlessKubernetesLister implements the ServerlessKubernetesLister interface.
type serverlessKubernetesLister struct {
	indexer cache.Indexer
}

// NewServerlessKubernetesLister returns a new ServerlessKubernetesLister.
func NewServerlessKubernetesLister(indexer cache.Indexer) ServerlessKubernetesLister {
	return &serverlessKubernetesLister{indexer: indexer}
}

// List lists all ServerlessKuberneteses in the indexer.
func (s *serverlessKubernetesLister) List(selector labels.Selector) (ret []*v1alpha1.ServerlessKubernetes, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerlessKubernetes))
	})
	return ret, err
}

// ServerlessKuberneteses returns an object that can list and get ServerlessKuberneteses.
func (s *serverlessKubernetesLister) ServerlessKuberneteses(namespace string) ServerlessKubernetesNamespaceLister {
	return serverlessKubernetesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerlessKubernetesNamespaceLister helps list and get ServerlessKuberneteses.
// All objects returned here must be treated as read-only.
type ServerlessKubernetesNamespaceLister interface {
	// List lists all ServerlessKuberneteses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerlessKubernetes, err error)
	// Get retrieves the ServerlessKubernetes from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServerlessKubernetes, error)
	ServerlessKubernetesNamespaceListerExpansion
}

// serverlessKubernetesNamespaceLister implements the ServerlessKubernetesNamespaceLister
// interface.
type serverlessKubernetesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServerlessKuberneteses in the indexer for a given namespace.
func (s serverlessKubernetesNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServerlessKubernetes, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerlessKubernetes))
	})
	return ret, err
}

// Get retrieves the ServerlessKubernetes from the indexer for a given namespace and name.
func (s serverlessKubernetesNamespaceLister) Get(name string) (*v1alpha1.ServerlessKubernetes, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serverlesskubernetes"), name)
	}
	return obj.(*v1alpha1.ServerlessKubernetes), nil
}
