/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AutoscalingConfigLister helps list AutoscalingConfigs.
// All objects returned here must be treated as read-only.
type AutoscalingConfigLister interface {
	// List lists all AutoscalingConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AutoscalingConfig, err error)
	// AutoscalingConfigs returns an object that can list and get AutoscalingConfigs.
	AutoscalingConfigs(namespace string) AutoscalingConfigNamespaceLister
	AutoscalingConfigListerExpansion
}

// autoscalingConfigLister implements the AutoscalingConfigLister interface.
type autoscalingConfigLister struct {
	indexer cache.Indexer
}

// NewAutoscalingConfigLister returns a new AutoscalingConfigLister.
func NewAutoscalingConfigLister(indexer cache.Indexer) AutoscalingConfigLister {
	return &autoscalingConfigLister{indexer: indexer}
}

// List lists all AutoscalingConfigs in the indexer.
func (s *autoscalingConfigLister) List(selector labels.Selector) (ret []*v1alpha1.AutoscalingConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutoscalingConfig))
	})
	return ret, err
}

// AutoscalingConfigs returns an object that can list and get AutoscalingConfigs.
func (s *autoscalingConfigLister) AutoscalingConfigs(namespace string) AutoscalingConfigNamespaceLister {
	return autoscalingConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AutoscalingConfigNamespaceLister helps list and get AutoscalingConfigs.
// All objects returned here must be treated as read-only.
type AutoscalingConfigNamespaceLister interface {
	// List lists all AutoscalingConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AutoscalingConfig, err error)
	// Get retrieves the AutoscalingConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AutoscalingConfig, error)
	AutoscalingConfigNamespaceListerExpansion
}

// autoscalingConfigNamespaceLister implements the AutoscalingConfigNamespaceLister
// interface.
type autoscalingConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AutoscalingConfigs in the indexer for a given namespace.
func (s autoscalingConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AutoscalingConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutoscalingConfig))
	})
	return ret, err
}

// Get retrieves the AutoscalingConfig from the indexer for a given namespace and name.
func (s autoscalingConfigNamespaceLister) Get(name string) (*v1alpha1.AutoscalingConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("autoscalingconfig"), name)
	}
	return obj.(*v1alpha1.AutoscalingConfig), nil
}
