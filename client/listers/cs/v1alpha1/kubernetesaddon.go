/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubernetesAddonLister helps list KubernetesAddons.
// All objects returned here must be treated as read-only.
type KubernetesAddonLister interface {
	// List lists all KubernetesAddons in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KubernetesAddon, err error)
	// KubernetesAddons returns an object that can list and get KubernetesAddons.
	KubernetesAddons(namespace string) KubernetesAddonNamespaceLister
	KubernetesAddonListerExpansion
}

// kubernetesAddonLister implements the KubernetesAddonLister interface.
type kubernetesAddonLister struct {
	indexer cache.Indexer
}

// NewKubernetesAddonLister returns a new KubernetesAddonLister.
func NewKubernetesAddonLister(indexer cache.Indexer) KubernetesAddonLister {
	return &kubernetesAddonLister{indexer: indexer}
}

// List lists all KubernetesAddons in the indexer.
func (s *kubernetesAddonLister) List(selector labels.Selector) (ret []*v1alpha1.KubernetesAddon, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KubernetesAddon))
	})
	return ret, err
}

// KubernetesAddons returns an object that can list and get KubernetesAddons.
func (s *kubernetesAddonLister) KubernetesAddons(namespace string) KubernetesAddonNamespaceLister {
	return kubernetesAddonNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubernetesAddonNamespaceLister helps list and get KubernetesAddons.
// All objects returned here must be treated as read-only.
type KubernetesAddonNamespaceLister interface {
	// List lists all KubernetesAddons in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KubernetesAddon, err error)
	// Get retrieves the KubernetesAddon from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KubernetesAddon, error)
	KubernetesAddonNamespaceListerExpansion
}

// kubernetesAddonNamespaceLister implements the KubernetesAddonNamespaceLister
// interface.
type kubernetesAddonNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubernetesAddons in the indexer for a given namespace.
func (s kubernetesAddonNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KubernetesAddon, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KubernetesAddon))
	})
	return ret, err
}

// Get retrieves the KubernetesAddon from the indexer for a given namespace and name.
func (s kubernetesAddonNamespaceLister) Get(name string) (*v1alpha1.KubernetesAddon, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kubernetesaddon"), name)
	}
	return obj.(*v1alpha1.KubernetesAddon), nil
}
