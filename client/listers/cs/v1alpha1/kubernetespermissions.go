/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubernetesPermissionsLister helps list KubernetesPermissionses.
// All objects returned here must be treated as read-only.
type KubernetesPermissionsLister interface {
	// List lists all KubernetesPermissionses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KubernetesPermissions, err error)
	// KubernetesPermissionses returns an object that can list and get KubernetesPermissionses.
	KubernetesPermissionses(namespace string) KubernetesPermissionsNamespaceLister
	KubernetesPermissionsListerExpansion
}

// kubernetesPermissionsLister implements the KubernetesPermissionsLister interface.
type kubernetesPermissionsLister struct {
	indexer cache.Indexer
}

// NewKubernetesPermissionsLister returns a new KubernetesPermissionsLister.
func NewKubernetesPermissionsLister(indexer cache.Indexer) KubernetesPermissionsLister {
	return &kubernetesPermissionsLister{indexer: indexer}
}

// List lists all KubernetesPermissionses in the indexer.
func (s *kubernetesPermissionsLister) List(selector labels.Selector) (ret []*v1alpha1.KubernetesPermissions, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KubernetesPermissions))
	})
	return ret, err
}

// KubernetesPermissionses returns an object that can list and get KubernetesPermissionses.
func (s *kubernetesPermissionsLister) KubernetesPermissionses(namespace string) KubernetesPermissionsNamespaceLister {
	return kubernetesPermissionsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubernetesPermissionsNamespaceLister helps list and get KubernetesPermissionses.
// All objects returned here must be treated as read-only.
type KubernetesPermissionsNamespaceLister interface {
	// List lists all KubernetesPermissionses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KubernetesPermissions, err error)
	// Get retrieves the KubernetesPermissions from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KubernetesPermissions, error)
	KubernetesPermissionsNamespaceListerExpansion
}

// kubernetesPermissionsNamespaceLister implements the KubernetesPermissionsNamespaceLister
// interface.
type kubernetesPermissionsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubernetesPermissionses in the indexer for a given namespace.
func (s kubernetesPermissionsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KubernetesPermissions, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KubernetesPermissions))
	})
	return ret, err
}

// Get retrieves the KubernetesPermissions from the indexer for a given namespace and name.
func (s kubernetesPermissionsNamespaceLister) Get(name string) (*v1alpha1.KubernetesPermissions, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kubernetespermissions"), name)
	}
	return obj.(*v1alpha1.KubernetesPermissions), nil
}
