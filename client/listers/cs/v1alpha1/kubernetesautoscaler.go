/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubernetesAutoscalerLister helps list KubernetesAutoscalers.
// All objects returned here must be treated as read-only.
type KubernetesAutoscalerLister interface {
	// List lists all KubernetesAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KubernetesAutoscaler, err error)
	// KubernetesAutoscalers returns an object that can list and get KubernetesAutoscalers.
	KubernetesAutoscalers(namespace string) KubernetesAutoscalerNamespaceLister
	KubernetesAutoscalerListerExpansion
}

// kubernetesAutoscalerLister implements the KubernetesAutoscalerLister interface.
type kubernetesAutoscalerLister struct {
	indexer cache.Indexer
}

// NewKubernetesAutoscalerLister returns a new KubernetesAutoscalerLister.
func NewKubernetesAutoscalerLister(indexer cache.Indexer) KubernetesAutoscalerLister {
	return &kubernetesAutoscalerLister{indexer: indexer}
}

// List lists all KubernetesAutoscalers in the indexer.
func (s *kubernetesAutoscalerLister) List(selector labels.Selector) (ret []*v1alpha1.KubernetesAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KubernetesAutoscaler))
	})
	return ret, err
}

// KubernetesAutoscalers returns an object that can list and get KubernetesAutoscalers.
func (s *kubernetesAutoscalerLister) KubernetesAutoscalers(namespace string) KubernetesAutoscalerNamespaceLister {
	return kubernetesAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubernetesAutoscalerNamespaceLister helps list and get KubernetesAutoscalers.
// All objects returned here must be treated as read-only.
type KubernetesAutoscalerNamespaceLister interface {
	// List lists all KubernetesAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KubernetesAutoscaler, err error)
	// Get retrieves the KubernetesAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KubernetesAutoscaler, error)
	KubernetesAutoscalerNamespaceListerExpansion
}

// kubernetesAutoscalerNamespaceLister implements the KubernetesAutoscalerNamespaceLister
// interface.
type kubernetesAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubernetesAutoscalers in the indexer for a given namespace.
func (s kubernetesAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KubernetesAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KubernetesAutoscaler))
	})
	return ret, err
}

// Get retrieves the KubernetesAutoscaler from the indexer for a given namespace and name.
func (s kubernetesAutoscalerNamespaceLister) Get(name string) (*v1alpha1.KubernetesAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kubernetesautoscaler"), name)
	}
	return obj.(*v1alpha1.KubernetesAutoscaler), nil
}
