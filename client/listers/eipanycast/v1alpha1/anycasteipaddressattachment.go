/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/eipanycast/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnycastEipAddressAttachmentLister helps list AnycastEipAddressAttachments.
// All objects returned here must be treated as read-only.
type AnycastEipAddressAttachmentLister interface {
	// List lists all AnycastEipAddressAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnycastEipAddressAttachment, err error)
	// AnycastEipAddressAttachments returns an object that can list and get AnycastEipAddressAttachments.
	AnycastEipAddressAttachments(namespace string) AnycastEipAddressAttachmentNamespaceLister
	AnycastEipAddressAttachmentListerExpansion
}

// anycastEipAddressAttachmentLister implements the AnycastEipAddressAttachmentLister interface.
type anycastEipAddressAttachmentLister struct {
	indexer cache.Indexer
}

// NewAnycastEipAddressAttachmentLister returns a new AnycastEipAddressAttachmentLister.
func NewAnycastEipAddressAttachmentLister(indexer cache.Indexer) AnycastEipAddressAttachmentLister {
	return &anycastEipAddressAttachmentLister{indexer: indexer}
}

// List lists all AnycastEipAddressAttachments in the indexer.
func (s *anycastEipAddressAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.AnycastEipAddressAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnycastEipAddressAttachment))
	})
	return ret, err
}

// AnycastEipAddressAttachments returns an object that can list and get AnycastEipAddressAttachments.
func (s *anycastEipAddressAttachmentLister) AnycastEipAddressAttachments(namespace string) AnycastEipAddressAttachmentNamespaceLister {
	return anycastEipAddressAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnycastEipAddressAttachmentNamespaceLister helps list and get AnycastEipAddressAttachments.
// All objects returned here must be treated as read-only.
type AnycastEipAddressAttachmentNamespaceLister interface {
	// List lists all AnycastEipAddressAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnycastEipAddressAttachment, err error)
	// Get retrieves the AnycastEipAddressAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnycastEipAddressAttachment, error)
	AnycastEipAddressAttachmentNamespaceListerExpansion
}

// anycastEipAddressAttachmentNamespaceLister implements the AnycastEipAddressAttachmentNamespaceLister
// interface.
type anycastEipAddressAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnycastEipAddressAttachments in the indexer for a given namespace.
func (s anycastEipAddressAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnycastEipAddressAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnycastEipAddressAttachment))
	})
	return ret, err
}

// Get retrieves the AnycastEipAddressAttachment from the indexer for a given namespace and name.
func (s anycastEipAddressAttachmentNamespaceLister) Get(name string) (*v1alpha1.AnycastEipAddressAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("anycasteipaddressattachment"), name)
	}
	return obj.(*v1alpha1.AnycastEipAddressAttachment), nil
}
