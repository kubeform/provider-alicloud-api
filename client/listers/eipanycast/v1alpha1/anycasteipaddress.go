/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/eipanycast/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnycastEipAddressLister helps list AnycastEipAddresses.
// All objects returned here must be treated as read-only.
type AnycastEipAddressLister interface {
	// List lists all AnycastEipAddresses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnycastEipAddress, err error)
	// AnycastEipAddresses returns an object that can list and get AnycastEipAddresses.
	AnycastEipAddresses(namespace string) AnycastEipAddressNamespaceLister
	AnycastEipAddressListerExpansion
}

// anycastEipAddressLister implements the AnycastEipAddressLister interface.
type anycastEipAddressLister struct {
	indexer cache.Indexer
}

// NewAnycastEipAddressLister returns a new AnycastEipAddressLister.
func NewAnycastEipAddressLister(indexer cache.Indexer) AnycastEipAddressLister {
	return &anycastEipAddressLister{indexer: indexer}
}

// List lists all AnycastEipAddresses in the indexer.
func (s *anycastEipAddressLister) List(selector labels.Selector) (ret []*v1alpha1.AnycastEipAddress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnycastEipAddress))
	})
	return ret, err
}

// AnycastEipAddresses returns an object that can list and get AnycastEipAddresses.
func (s *anycastEipAddressLister) AnycastEipAddresses(namespace string) AnycastEipAddressNamespaceLister {
	return anycastEipAddressNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnycastEipAddressNamespaceLister helps list and get AnycastEipAddresses.
// All objects returned here must be treated as read-only.
type AnycastEipAddressNamespaceLister interface {
	// List lists all AnycastEipAddresses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnycastEipAddress, err error)
	// Get retrieves the AnycastEipAddress from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnycastEipAddress, error)
	AnycastEipAddressNamespaceListerExpansion
}

// anycastEipAddressNamespaceLister implements the AnycastEipAddressNamespaceLister
// interface.
type anycastEipAddressNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnycastEipAddresses in the indexer for a given namespace.
func (s anycastEipAddressNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnycastEipAddress, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnycastEipAddress))
	})
	return ret, err
}

// Get retrieves the AnycastEipAddress from the indexer for a given namespace and name.
func (s anycastEipAddressNamespaceLister) Get(name string) (*v1alpha1.AnycastEipAddress, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("anycasteipaddress"), name)
	}
	return obj.(*v1alpha1.AnycastEipAddress), nil
}
