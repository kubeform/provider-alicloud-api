/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/dns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DnsLister helps list Dnses.
// All objects returned here must be treated as read-only.
type DnsLister interface {
	// List lists all Dnses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Dns, err error)
	// Dnses returns an object that can list and get Dnses.
	Dnses(namespace string) DnsNamespaceLister
	DnsListerExpansion
}

// dnsLister implements the DnsLister interface.
type dnsLister struct {
	indexer cache.Indexer
}

// NewDnsLister returns a new DnsLister.
func NewDnsLister(indexer cache.Indexer) DnsLister {
	return &dnsLister{indexer: indexer}
}

// List lists all Dnses in the indexer.
func (s *dnsLister) List(selector labels.Selector) (ret []*v1alpha1.Dns, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Dns))
	})
	return ret, err
}

// Dnses returns an object that can list and get Dnses.
func (s *dnsLister) Dnses(namespace string) DnsNamespaceLister {
	return dnsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DnsNamespaceLister helps list and get Dnses.
// All objects returned here must be treated as read-only.
type DnsNamespaceLister interface {
	// List lists all Dnses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Dns, err error)
	// Get retrieves the Dns from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Dns, error)
	DnsNamespaceListerExpansion
}

// dnsNamespaceLister implements the DnsNamespaceLister
// interface.
type dnsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Dnses in the indexer for a given namespace.
func (s dnsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Dns, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Dns))
	})
	return ret, err
}

// Get retrieves the Dns from the indexer for a given namespace and name.
func (s dnsNamespaceLister) Get(name string) (*v1alpha1.Dns, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dns"), name)
	}
	return obj.(*v1alpha1.Dns), nil
}
