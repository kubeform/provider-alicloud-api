/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/alidns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AddressPoolLister helps list AddressPools.
// All objects returned here must be treated as read-only.
type AddressPoolLister interface {
	// List lists all AddressPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AddressPool, err error)
	// AddressPools returns an object that can list and get AddressPools.
	AddressPools(namespace string) AddressPoolNamespaceLister
	AddressPoolListerExpansion
}

// addressPoolLister implements the AddressPoolLister interface.
type addressPoolLister struct {
	indexer cache.Indexer
}

// NewAddressPoolLister returns a new AddressPoolLister.
func NewAddressPoolLister(indexer cache.Indexer) AddressPoolLister {
	return &addressPoolLister{indexer: indexer}
}

// List lists all AddressPools in the indexer.
func (s *addressPoolLister) List(selector labels.Selector) (ret []*v1alpha1.AddressPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AddressPool))
	})
	return ret, err
}

// AddressPools returns an object that can list and get AddressPools.
func (s *addressPoolLister) AddressPools(namespace string) AddressPoolNamespaceLister {
	return addressPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AddressPoolNamespaceLister helps list and get AddressPools.
// All objects returned here must be treated as read-only.
type AddressPoolNamespaceLister interface {
	// List lists all AddressPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AddressPool, err error)
	// Get retrieves the AddressPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AddressPool, error)
	AddressPoolNamespaceListerExpansion
}

// addressPoolNamespaceLister implements the AddressPoolNamespaceLister
// interface.
type addressPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AddressPools in the indexer for a given namespace.
func (s addressPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AddressPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AddressPool))
	})
	return ret, err
}

// Get retrieves the AddressPool from the indexer for a given namespace and name.
func (s addressPoolNamespaceLister) Get(name string) (*v1alpha1.AddressPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("addresspool"), name)
	}
	return obj.(*v1alpha1.AddressPool), nil
}
