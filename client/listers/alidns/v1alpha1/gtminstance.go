/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/alidns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GtmInstanceLister helps list GtmInstances.
// All objects returned here must be treated as read-only.
type GtmInstanceLister interface {
	// List lists all GtmInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GtmInstance, err error)
	// GtmInstances returns an object that can list and get GtmInstances.
	GtmInstances(namespace string) GtmInstanceNamespaceLister
	GtmInstanceListerExpansion
}

// gtmInstanceLister implements the GtmInstanceLister interface.
type gtmInstanceLister struct {
	indexer cache.Indexer
}

// NewGtmInstanceLister returns a new GtmInstanceLister.
func NewGtmInstanceLister(indexer cache.Indexer) GtmInstanceLister {
	return &gtmInstanceLister{indexer: indexer}
}

// List lists all GtmInstances in the indexer.
func (s *gtmInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.GtmInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GtmInstance))
	})
	return ret, err
}

// GtmInstances returns an object that can list and get GtmInstances.
func (s *gtmInstanceLister) GtmInstances(namespace string) GtmInstanceNamespaceLister {
	return gtmInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GtmInstanceNamespaceLister helps list and get GtmInstances.
// All objects returned here must be treated as read-only.
type GtmInstanceNamespaceLister interface {
	// List lists all GtmInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GtmInstance, err error)
	// Get retrieves the GtmInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GtmInstance, error)
	GtmInstanceNamespaceListerExpansion
}

// gtmInstanceNamespaceLister implements the GtmInstanceNamespaceLister
// interface.
type gtmInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GtmInstances in the indexer for a given namespace.
func (s gtmInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GtmInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GtmInstance))
	})
	return ret, err
}

// Get retrieves the GtmInstance from the indexer for a given namespace and name.
func (s gtmInstanceNamespaceLister) Get(name string) (*v1alpha1.GtmInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gtminstance"), name)
	}
	return obj.(*v1alpha1.GtmInstance), nil
}
