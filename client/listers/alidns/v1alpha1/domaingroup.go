/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/alidns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DomainGroupLister helps list DomainGroups.
// All objects returned here must be treated as read-only.
type DomainGroupLister interface {
	// List lists all DomainGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainGroup, err error)
	// DomainGroups returns an object that can list and get DomainGroups.
	DomainGroups(namespace string) DomainGroupNamespaceLister
	DomainGroupListerExpansion
}

// domainGroupLister implements the DomainGroupLister interface.
type domainGroupLister struct {
	indexer cache.Indexer
}

// NewDomainGroupLister returns a new DomainGroupLister.
func NewDomainGroupLister(indexer cache.Indexer) DomainGroupLister {
	return &domainGroupLister{indexer: indexer}
}

// List lists all DomainGroups in the indexer.
func (s *domainGroupLister) List(selector labels.Selector) (ret []*v1alpha1.DomainGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainGroup))
	})
	return ret, err
}

// DomainGroups returns an object that can list and get DomainGroups.
func (s *domainGroupLister) DomainGroups(namespace string) DomainGroupNamespaceLister {
	return domainGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainGroupNamespaceLister helps list and get DomainGroups.
// All objects returned here must be treated as read-only.
type DomainGroupNamespaceLister interface {
	// List lists all DomainGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainGroup, err error)
	// Get retrieves the DomainGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainGroup, error)
	DomainGroupNamespaceListerExpansion
}

// domainGroupNamespaceLister implements the DomainGroupNamespaceLister
// interface.
type domainGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainGroups in the indexer for a given namespace.
func (s domainGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainGroup))
	})
	return ret, err
}

// Get retrieves the DomainGroup from the indexer for a given namespace and name.
func (s domainGroupNamespaceLister) Get(name string) (*v1alpha1.DomainGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domaingroup"), name)
	}
	return obj.(*v1alpha1.DomainGroup), nil
}
