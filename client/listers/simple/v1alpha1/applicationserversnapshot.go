/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/simple/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationServerSnapshotLister helps list ApplicationServerSnapshots.
// All objects returned here must be treated as read-only.
type ApplicationServerSnapshotLister interface {
	// List lists all ApplicationServerSnapshots in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationServerSnapshot, err error)
	// ApplicationServerSnapshots returns an object that can list and get ApplicationServerSnapshots.
	ApplicationServerSnapshots(namespace string) ApplicationServerSnapshotNamespaceLister
	ApplicationServerSnapshotListerExpansion
}

// applicationServerSnapshotLister implements the ApplicationServerSnapshotLister interface.
type applicationServerSnapshotLister struct {
	indexer cache.Indexer
}

// NewApplicationServerSnapshotLister returns a new ApplicationServerSnapshotLister.
func NewApplicationServerSnapshotLister(indexer cache.Indexer) ApplicationServerSnapshotLister {
	return &applicationServerSnapshotLister{indexer: indexer}
}

// List lists all ApplicationServerSnapshots in the indexer.
func (s *applicationServerSnapshotLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationServerSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationServerSnapshot))
	})
	return ret, err
}

// ApplicationServerSnapshots returns an object that can list and get ApplicationServerSnapshots.
func (s *applicationServerSnapshotLister) ApplicationServerSnapshots(namespace string) ApplicationServerSnapshotNamespaceLister {
	return applicationServerSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationServerSnapshotNamespaceLister helps list and get ApplicationServerSnapshots.
// All objects returned here must be treated as read-only.
type ApplicationServerSnapshotNamespaceLister interface {
	// List lists all ApplicationServerSnapshots in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationServerSnapshot, err error)
	// Get retrieves the ApplicationServerSnapshot from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApplicationServerSnapshot, error)
	ApplicationServerSnapshotNamespaceListerExpansion
}

// applicationServerSnapshotNamespaceLister implements the ApplicationServerSnapshotNamespaceLister
// interface.
type applicationServerSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationServerSnapshots in the indexer for a given namespace.
func (s applicationServerSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationServerSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationServerSnapshot))
	})
	return ret, err
}

// Get retrieves the ApplicationServerSnapshot from the indexer for a given namespace and name.
func (s applicationServerSnapshotNamespaceLister) Get(name string) (*v1alpha1.ApplicationServerSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationserversnapshot"), name)
	}
	return obj.(*v1alpha1.ApplicationServerSnapshot), nil
}
