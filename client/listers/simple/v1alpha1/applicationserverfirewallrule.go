/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/simple/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationServerFirewallRuleLister helps list ApplicationServerFirewallRules.
// All objects returned here must be treated as read-only.
type ApplicationServerFirewallRuleLister interface {
	// List lists all ApplicationServerFirewallRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationServerFirewallRule, err error)
	// ApplicationServerFirewallRules returns an object that can list and get ApplicationServerFirewallRules.
	ApplicationServerFirewallRules(namespace string) ApplicationServerFirewallRuleNamespaceLister
	ApplicationServerFirewallRuleListerExpansion
}

// applicationServerFirewallRuleLister implements the ApplicationServerFirewallRuleLister interface.
type applicationServerFirewallRuleLister struct {
	indexer cache.Indexer
}

// NewApplicationServerFirewallRuleLister returns a new ApplicationServerFirewallRuleLister.
func NewApplicationServerFirewallRuleLister(indexer cache.Indexer) ApplicationServerFirewallRuleLister {
	return &applicationServerFirewallRuleLister{indexer: indexer}
}

// List lists all ApplicationServerFirewallRules in the indexer.
func (s *applicationServerFirewallRuleLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationServerFirewallRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationServerFirewallRule))
	})
	return ret, err
}

// ApplicationServerFirewallRules returns an object that can list and get ApplicationServerFirewallRules.
func (s *applicationServerFirewallRuleLister) ApplicationServerFirewallRules(namespace string) ApplicationServerFirewallRuleNamespaceLister {
	return applicationServerFirewallRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationServerFirewallRuleNamespaceLister helps list and get ApplicationServerFirewallRules.
// All objects returned here must be treated as read-only.
type ApplicationServerFirewallRuleNamespaceLister interface {
	// List lists all ApplicationServerFirewallRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationServerFirewallRule, err error)
	// Get retrieves the ApplicationServerFirewallRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApplicationServerFirewallRule, error)
	ApplicationServerFirewallRuleNamespaceListerExpansion
}

// applicationServerFirewallRuleNamespaceLister implements the ApplicationServerFirewallRuleNamespaceLister
// interface.
type applicationServerFirewallRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationServerFirewallRules in the indexer for a given namespace.
func (s applicationServerFirewallRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationServerFirewallRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationServerFirewallRule))
	})
	return ret, err
}

// Get retrieves the ApplicationServerFirewallRule from the indexer for a given namespace and name.
func (s applicationServerFirewallRuleNamespaceLister) Get(name string) (*v1alpha1.ApplicationServerFirewallRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationserverfirewallrule"), name)
	}
	return obj.(*v1alpha1.ApplicationServerFirewallRule), nil
}
