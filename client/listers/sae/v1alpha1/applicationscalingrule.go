/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/sae/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationScalingRuleLister helps list ApplicationScalingRules.
// All objects returned here must be treated as read-only.
type ApplicationScalingRuleLister interface {
	// List lists all ApplicationScalingRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationScalingRule, err error)
	// ApplicationScalingRules returns an object that can list and get ApplicationScalingRules.
	ApplicationScalingRules(namespace string) ApplicationScalingRuleNamespaceLister
	ApplicationScalingRuleListerExpansion
}

// applicationScalingRuleLister implements the ApplicationScalingRuleLister interface.
type applicationScalingRuleLister struct {
	indexer cache.Indexer
}

// NewApplicationScalingRuleLister returns a new ApplicationScalingRuleLister.
func NewApplicationScalingRuleLister(indexer cache.Indexer) ApplicationScalingRuleLister {
	return &applicationScalingRuleLister{indexer: indexer}
}

// List lists all ApplicationScalingRules in the indexer.
func (s *applicationScalingRuleLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationScalingRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationScalingRule))
	})
	return ret, err
}

// ApplicationScalingRules returns an object that can list and get ApplicationScalingRules.
func (s *applicationScalingRuleLister) ApplicationScalingRules(namespace string) ApplicationScalingRuleNamespaceLister {
	return applicationScalingRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationScalingRuleNamespaceLister helps list and get ApplicationScalingRules.
// All objects returned here must be treated as read-only.
type ApplicationScalingRuleNamespaceLister interface {
	// List lists all ApplicationScalingRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationScalingRule, err error)
	// Get retrieves the ApplicationScalingRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApplicationScalingRule, error)
	ApplicationScalingRuleNamespaceListerExpansion
}

// applicationScalingRuleNamespaceLister implements the ApplicationScalingRuleNamespaceLister
// interface.
type applicationScalingRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationScalingRules in the indexer for a given namespace.
func (s applicationScalingRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationScalingRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationScalingRule))
	})
	return ret, err
}

// Get retrieves the ApplicationScalingRule from the indexer for a given namespace and name.
func (s applicationScalingRuleNamespaceLister) Get(name string) (*v1alpha1.ApplicationScalingRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationscalingrule"), name)
	}
	return obj.(*v1alpha1.ApplicationScalingRule), nil
}
