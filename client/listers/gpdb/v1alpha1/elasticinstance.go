/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/gpdb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ElasticInstanceLister helps list ElasticInstances.
// All objects returned here must be treated as read-only.
type ElasticInstanceLister interface {
	// List lists all ElasticInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticInstance, err error)
	// ElasticInstances returns an object that can list and get ElasticInstances.
	ElasticInstances(namespace string) ElasticInstanceNamespaceLister
	ElasticInstanceListerExpansion
}

// elasticInstanceLister implements the ElasticInstanceLister interface.
type elasticInstanceLister struct {
	indexer cache.Indexer
}

// NewElasticInstanceLister returns a new ElasticInstanceLister.
func NewElasticInstanceLister(indexer cache.Indexer) ElasticInstanceLister {
	return &elasticInstanceLister{indexer: indexer}
}

// List lists all ElasticInstances in the indexer.
func (s *elasticInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticInstance))
	})
	return ret, err
}

// ElasticInstances returns an object that can list and get ElasticInstances.
func (s *elasticInstanceLister) ElasticInstances(namespace string) ElasticInstanceNamespaceLister {
	return elasticInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ElasticInstanceNamespaceLister helps list and get ElasticInstances.
// All objects returned here must be treated as read-only.
type ElasticInstanceNamespaceLister interface {
	// List lists all ElasticInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticInstance, err error)
	// Get retrieves the ElasticInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ElasticInstance, error)
	ElasticInstanceNamespaceListerExpansion
}

// elasticInstanceNamespaceLister implements the ElasticInstanceNamespaceLister
// interface.
type elasticInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ElasticInstances in the indexer for a given namespace.
func (s elasticInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticInstance))
	})
	return ret, err
}

// Get retrieves the ElasticInstance from the indexer for a given namespace and name.
func (s elasticInstanceNamespaceLister) Get(name string) (*v1alpha1.ElasticInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("elasticinstance"), name)
	}
	return obj.(*v1alpha1.ElasticInstance), nil
}
