/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ram/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecurityPreferenceLister helps list SecurityPreferences.
// All objects returned here must be treated as read-only.
type SecurityPreferenceLister interface {
	// List lists all SecurityPreferences in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecurityPreference, err error)
	// SecurityPreferences returns an object that can list and get SecurityPreferences.
	SecurityPreferences(namespace string) SecurityPreferenceNamespaceLister
	SecurityPreferenceListerExpansion
}

// securityPreferenceLister implements the SecurityPreferenceLister interface.
type securityPreferenceLister struct {
	indexer cache.Indexer
}

// NewSecurityPreferenceLister returns a new SecurityPreferenceLister.
func NewSecurityPreferenceLister(indexer cache.Indexer) SecurityPreferenceLister {
	return &securityPreferenceLister{indexer: indexer}
}

// List lists all SecurityPreferences in the indexer.
func (s *securityPreferenceLister) List(selector labels.Selector) (ret []*v1alpha1.SecurityPreference, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecurityPreference))
	})
	return ret, err
}

// SecurityPreferences returns an object that can list and get SecurityPreferences.
func (s *securityPreferenceLister) SecurityPreferences(namespace string) SecurityPreferenceNamespaceLister {
	return securityPreferenceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecurityPreferenceNamespaceLister helps list and get SecurityPreferences.
// All objects returned here must be treated as read-only.
type SecurityPreferenceNamespaceLister interface {
	// List lists all SecurityPreferences in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecurityPreference, err error)
	// Get retrieves the SecurityPreference from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SecurityPreference, error)
	SecurityPreferenceNamespaceListerExpansion
}

// securityPreferenceNamespaceLister implements the SecurityPreferenceNamespaceLister
// interface.
type securityPreferenceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecurityPreferences in the indexer for a given namespace.
func (s securityPreferenceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecurityPreference, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecurityPreference))
	})
	return ret, err
}

// Get retrieves the SecurityPreference from the indexer for a given namespace and name.
func (s securityPreferenceNamespaceLister) Get(name string) (*v1alpha1.SecurityPreference, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("securitypreference"), name)
	}
	return obj.(*v1alpha1.SecurityPreference), nil
}
