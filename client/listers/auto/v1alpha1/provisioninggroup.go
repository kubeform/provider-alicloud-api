/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/auto/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProvisioningGroupLister helps list ProvisioningGroups.
// All objects returned here must be treated as read-only.
type ProvisioningGroupLister interface {
	// List lists all ProvisioningGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProvisioningGroup, err error)
	// ProvisioningGroups returns an object that can list and get ProvisioningGroups.
	ProvisioningGroups(namespace string) ProvisioningGroupNamespaceLister
	ProvisioningGroupListerExpansion
}

// provisioningGroupLister implements the ProvisioningGroupLister interface.
type provisioningGroupLister struct {
	indexer cache.Indexer
}

// NewProvisioningGroupLister returns a new ProvisioningGroupLister.
func NewProvisioningGroupLister(indexer cache.Indexer) ProvisioningGroupLister {
	return &provisioningGroupLister{indexer: indexer}
}

// List lists all ProvisioningGroups in the indexer.
func (s *provisioningGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ProvisioningGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProvisioningGroup))
	})
	return ret, err
}

// ProvisioningGroups returns an object that can list and get ProvisioningGroups.
func (s *provisioningGroupLister) ProvisioningGroups(namespace string) ProvisioningGroupNamespaceLister {
	return provisioningGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProvisioningGroupNamespaceLister helps list and get ProvisioningGroups.
// All objects returned here must be treated as read-only.
type ProvisioningGroupNamespaceLister interface {
	// List lists all ProvisioningGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProvisioningGroup, err error)
	// Get retrieves the ProvisioningGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProvisioningGroup, error)
	ProvisioningGroupNamespaceListerExpansion
}

// provisioningGroupNamespaceLister implements the ProvisioningGroupNamespaceLister
// interface.
type provisioningGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProvisioningGroups in the indexer for a given namespace.
func (s provisioningGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProvisioningGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProvisioningGroup))
	})
	return ret, err
}

// Get retrieves the ProvisioningGroup from the indexer for a given namespace and name.
func (s provisioningGroupNamespaceLister) Get(name string) (*v1alpha1.ProvisioningGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("provisioninggroup"), name)
	}
	return obj.(*v1alpha1.ProvisioningGroup), nil
}
