/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/common/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BandwidthPackageAttachmentLister helps list BandwidthPackageAttachments.
// All objects returned here must be treated as read-only.
type BandwidthPackageAttachmentLister interface {
	// List lists all BandwidthPackageAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BandwidthPackageAttachment, err error)
	// BandwidthPackageAttachments returns an object that can list and get BandwidthPackageAttachments.
	BandwidthPackageAttachments(namespace string) BandwidthPackageAttachmentNamespaceLister
	BandwidthPackageAttachmentListerExpansion
}

// bandwidthPackageAttachmentLister implements the BandwidthPackageAttachmentLister interface.
type bandwidthPackageAttachmentLister struct {
	indexer cache.Indexer
}

// NewBandwidthPackageAttachmentLister returns a new BandwidthPackageAttachmentLister.
func NewBandwidthPackageAttachmentLister(indexer cache.Indexer) BandwidthPackageAttachmentLister {
	return &bandwidthPackageAttachmentLister{indexer: indexer}
}

// List lists all BandwidthPackageAttachments in the indexer.
func (s *bandwidthPackageAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.BandwidthPackageAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BandwidthPackageAttachment))
	})
	return ret, err
}

// BandwidthPackageAttachments returns an object that can list and get BandwidthPackageAttachments.
func (s *bandwidthPackageAttachmentLister) BandwidthPackageAttachments(namespace string) BandwidthPackageAttachmentNamespaceLister {
	return bandwidthPackageAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BandwidthPackageAttachmentNamespaceLister helps list and get BandwidthPackageAttachments.
// All objects returned here must be treated as read-only.
type BandwidthPackageAttachmentNamespaceLister interface {
	// List lists all BandwidthPackageAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BandwidthPackageAttachment, err error)
	// Get retrieves the BandwidthPackageAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BandwidthPackageAttachment, error)
	BandwidthPackageAttachmentNamespaceListerExpansion
}

// bandwidthPackageAttachmentNamespaceLister implements the BandwidthPackageAttachmentNamespaceLister
// interface.
type bandwidthPackageAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BandwidthPackageAttachments in the indexer for a given namespace.
func (s bandwidthPackageAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BandwidthPackageAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BandwidthPackageAttachment))
	})
	return ret, err
}

// Get retrieves the BandwidthPackageAttachment from the indexer for a given namespace and name.
func (s bandwidthPackageAttachmentNamespaceLister) Get(name string) (*v1alpha1.BandwidthPackageAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bandwidthpackageattachment"), name)
	}
	return obj.(*v1alpha1.BandwidthPackageAttachment), nil
}
