/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EndpointACLPolicyLister helps list EndpointACLPolicies.
// All objects returned here must be treated as read-only.
type EndpointACLPolicyLister interface {
	// List lists all EndpointACLPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointACLPolicy, err error)
	// EndpointACLPolicies returns an object that can list and get EndpointACLPolicies.
	EndpointACLPolicies(namespace string) EndpointACLPolicyNamespaceLister
	EndpointACLPolicyListerExpansion
}

// endpointACLPolicyLister implements the EndpointACLPolicyLister interface.
type endpointACLPolicyLister struct {
	indexer cache.Indexer
}

// NewEndpointACLPolicyLister returns a new EndpointACLPolicyLister.
func NewEndpointACLPolicyLister(indexer cache.Indexer) EndpointACLPolicyLister {
	return &endpointACLPolicyLister{indexer: indexer}
}

// List lists all EndpointACLPolicies in the indexer.
func (s *endpointACLPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointACLPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointACLPolicy))
	})
	return ret, err
}

// EndpointACLPolicies returns an object that can list and get EndpointACLPolicies.
func (s *endpointACLPolicyLister) EndpointACLPolicies(namespace string) EndpointACLPolicyNamespaceLister {
	return endpointACLPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EndpointACLPolicyNamespaceLister helps list and get EndpointACLPolicies.
// All objects returned here must be treated as read-only.
type EndpointACLPolicyNamespaceLister interface {
	// List lists all EndpointACLPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointACLPolicy, err error)
	// Get retrieves the EndpointACLPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EndpointACLPolicy, error)
	EndpointACLPolicyNamespaceListerExpansion
}

// endpointACLPolicyNamespaceLister implements the EndpointACLPolicyNamespaceLister
// interface.
type endpointACLPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EndpointACLPolicies in the indexer for a given namespace.
func (s endpointACLPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointACLPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointACLPolicy))
	})
	return ret, err
}

// Get retrieves the EndpointACLPolicy from the indexer for a given namespace and name.
func (s endpointACLPolicyNamespaceLister) Get(name string) (*v1alpha1.EndpointACLPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("endpointaclpolicy"), name)
	}
	return obj.(*v1alpha1.EndpointACLPolicy), nil
}
