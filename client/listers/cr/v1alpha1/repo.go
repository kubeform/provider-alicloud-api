/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RepoLister helps list Repos.
// All objects returned here must be treated as read-only.
type RepoLister interface {
	// List lists all Repos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Repo, err error)
	// Repos returns an object that can list and get Repos.
	Repos(namespace string) RepoNamespaceLister
	RepoListerExpansion
}

// repoLister implements the RepoLister interface.
type repoLister struct {
	indexer cache.Indexer
}

// NewRepoLister returns a new RepoLister.
func NewRepoLister(indexer cache.Indexer) RepoLister {
	return &repoLister{indexer: indexer}
}

// List lists all Repos in the indexer.
func (s *repoLister) List(selector labels.Selector) (ret []*v1alpha1.Repo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Repo))
	})
	return ret, err
}

// Repos returns an object that can list and get Repos.
func (s *repoLister) Repos(namespace string) RepoNamespaceLister {
	return repoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RepoNamespaceLister helps list and get Repos.
// All objects returned here must be treated as read-only.
type RepoNamespaceLister interface {
	// List lists all Repos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Repo, err error)
	// Get retrieves the Repo from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Repo, error)
	RepoNamespaceListerExpansion
}

// repoNamespaceLister implements the RepoNamespaceLister
// interface.
type repoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Repos in the indexer for a given namespace.
func (s repoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Repo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Repo))
	})
	return ret, err
}

// Get retrieves the Repo from the indexer for a given namespace and name.
func (s repoNamespaceLister) Get(name string) (*v1alpha1.Repo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("repo"), name)
	}
	return obj.(*v1alpha1.Repo), nil
}
