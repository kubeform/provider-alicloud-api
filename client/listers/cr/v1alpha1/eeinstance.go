/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EeInstanceLister helps list EeInstances.
// All objects returned here must be treated as read-only.
type EeInstanceLister interface {
	// List lists all EeInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EeInstance, err error)
	// EeInstances returns an object that can list and get EeInstances.
	EeInstances(namespace string) EeInstanceNamespaceLister
	EeInstanceListerExpansion
}

// eeInstanceLister implements the EeInstanceLister interface.
type eeInstanceLister struct {
	indexer cache.Indexer
}

// NewEeInstanceLister returns a new EeInstanceLister.
func NewEeInstanceLister(indexer cache.Indexer) EeInstanceLister {
	return &eeInstanceLister{indexer: indexer}
}

// List lists all EeInstances in the indexer.
func (s *eeInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.EeInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EeInstance))
	})
	return ret, err
}

// EeInstances returns an object that can list and get EeInstances.
func (s *eeInstanceLister) EeInstances(namespace string) EeInstanceNamespaceLister {
	return eeInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EeInstanceNamespaceLister helps list and get EeInstances.
// All objects returned here must be treated as read-only.
type EeInstanceNamespaceLister interface {
	// List lists all EeInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EeInstance, err error)
	// Get retrieves the EeInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EeInstance, error)
	EeInstanceNamespaceListerExpansion
}

// eeInstanceNamespaceLister implements the EeInstanceNamespaceLister
// interface.
type eeInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EeInstances in the indexer for a given namespace.
func (s eeInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EeInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EeInstance))
	})
	return ret, err
}

// Get retrieves the EeInstance from the indexer for a given namespace and name.
func (s eeInstanceNamespaceLister) Get(name string) (*v1alpha1.EeInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eeinstance"), name)
	}
	return obj.(*v1alpha1.EeInstance), nil
}
