/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EeNamespaceLister helps list EeNamespaces.
// All objects returned here must be treated as read-only.
type EeNamespaceLister interface {
	// List lists all EeNamespaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EeNamespace, err error)
	// EeNamespaces returns an object that can list and get EeNamespaces.
	EeNamespaces(namespace string) EeNamespaceNamespaceLister
	EeNamespaceListerExpansion
}

// eeNamespaceLister implements the EeNamespaceLister interface.
type eeNamespaceLister struct {
	indexer cache.Indexer
}

// NewEeNamespaceLister returns a new EeNamespaceLister.
func NewEeNamespaceLister(indexer cache.Indexer) EeNamespaceLister {
	return &eeNamespaceLister{indexer: indexer}
}

// List lists all EeNamespaces in the indexer.
func (s *eeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EeNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EeNamespace))
	})
	return ret, err
}

// EeNamespaces returns an object that can list and get EeNamespaces.
func (s *eeNamespaceLister) EeNamespaces(namespace string) EeNamespaceNamespaceLister {
	return eeNamespaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EeNamespaceNamespaceLister helps list and get EeNamespaces.
// All objects returned here must be treated as read-only.
type EeNamespaceNamespaceLister interface {
	// List lists all EeNamespaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EeNamespace, err error)
	// Get retrieves the EeNamespace from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EeNamespace, error)
	EeNamespaceNamespaceListerExpansion
}

// eeNamespaceNamespaceLister implements the EeNamespaceNamespaceLister
// interface.
type eeNamespaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EeNamespaces in the indexer for a given namespace.
func (s eeNamespaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EeNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EeNamespace))
	})
	return ret, err
}

// Get retrieves the EeNamespace from the indexer for a given namespace and name.
func (s eeNamespaceNamespaceLister) Get(name string) (*v1alpha1.EeNamespace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eenamespace"), name)
	}
	return obj.(*v1alpha1.EeNamespace), nil
}
