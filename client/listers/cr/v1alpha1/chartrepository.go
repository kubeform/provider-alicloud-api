/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChartRepositoryLister helps list ChartRepositories.
// All objects returned here must be treated as read-only.
type ChartRepositoryLister interface {
	// List lists all ChartRepositories in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChartRepository, err error)
	// ChartRepositories returns an object that can list and get ChartRepositories.
	ChartRepositories(namespace string) ChartRepositoryNamespaceLister
	ChartRepositoryListerExpansion
}

// chartRepositoryLister implements the ChartRepositoryLister interface.
type chartRepositoryLister struct {
	indexer cache.Indexer
}

// NewChartRepositoryLister returns a new ChartRepositoryLister.
func NewChartRepositoryLister(indexer cache.Indexer) ChartRepositoryLister {
	return &chartRepositoryLister{indexer: indexer}
}

// List lists all ChartRepositories in the indexer.
func (s *chartRepositoryLister) List(selector labels.Selector) (ret []*v1alpha1.ChartRepository, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChartRepository))
	})
	return ret, err
}

// ChartRepositories returns an object that can list and get ChartRepositories.
func (s *chartRepositoryLister) ChartRepositories(namespace string) ChartRepositoryNamespaceLister {
	return chartRepositoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChartRepositoryNamespaceLister helps list and get ChartRepositories.
// All objects returned here must be treated as read-only.
type ChartRepositoryNamespaceLister interface {
	// List lists all ChartRepositories in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChartRepository, err error)
	// Get retrieves the ChartRepository from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ChartRepository, error)
	ChartRepositoryNamespaceListerExpansion
}

// chartRepositoryNamespaceLister implements the ChartRepositoryNamespaceLister
// interface.
type chartRepositoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChartRepositories in the indexer for a given namespace.
func (s chartRepositoryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChartRepository, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChartRepository))
	})
	return ret, err
}

// Get retrieves the ChartRepository from the indexer for a given namespace and name.
func (s chartRepositoryNamespaceLister) Get(name string) (*v1alpha1.ChartRepository, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("chartrepository"), name)
	}
	return obj.(*v1alpha1.ChartRepository), nil
}
