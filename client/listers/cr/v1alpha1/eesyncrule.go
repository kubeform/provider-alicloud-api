/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EeSyncRuleLister helps list EeSyncRules.
// All objects returned here must be treated as read-only.
type EeSyncRuleLister interface {
	// List lists all EeSyncRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EeSyncRule, err error)
	// EeSyncRules returns an object that can list and get EeSyncRules.
	EeSyncRules(namespace string) EeSyncRuleNamespaceLister
	EeSyncRuleListerExpansion
}

// eeSyncRuleLister implements the EeSyncRuleLister interface.
type eeSyncRuleLister struct {
	indexer cache.Indexer
}

// NewEeSyncRuleLister returns a new EeSyncRuleLister.
func NewEeSyncRuleLister(indexer cache.Indexer) EeSyncRuleLister {
	return &eeSyncRuleLister{indexer: indexer}
}

// List lists all EeSyncRules in the indexer.
func (s *eeSyncRuleLister) List(selector labels.Selector) (ret []*v1alpha1.EeSyncRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EeSyncRule))
	})
	return ret, err
}

// EeSyncRules returns an object that can list and get EeSyncRules.
func (s *eeSyncRuleLister) EeSyncRules(namespace string) EeSyncRuleNamespaceLister {
	return eeSyncRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EeSyncRuleNamespaceLister helps list and get EeSyncRules.
// All objects returned here must be treated as read-only.
type EeSyncRuleNamespaceLister interface {
	// List lists all EeSyncRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EeSyncRule, err error)
	// Get retrieves the EeSyncRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EeSyncRule, error)
	EeSyncRuleNamespaceListerExpansion
}

// eeSyncRuleNamespaceLister implements the EeSyncRuleNamespaceLister
// interface.
type eeSyncRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EeSyncRules in the indexer for a given namespace.
func (s eeSyncRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EeSyncRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EeSyncRule))
	})
	return ret, err
}

// Get retrieves the EeSyncRule from the indexer for a given namespace and name.
func (s eeSyncRuleNamespaceLister) Get(name string) (*v1alpha1.EeSyncRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eesyncrule"), name)
	}
	return obj.(*v1alpha1.EeSyncRule), nil
}
