/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/waf/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProtectionModuleLister helps list ProtectionModules.
// All objects returned here must be treated as read-only.
type ProtectionModuleLister interface {
	// List lists all ProtectionModules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProtectionModule, err error)
	// ProtectionModules returns an object that can list and get ProtectionModules.
	ProtectionModules(namespace string) ProtectionModuleNamespaceLister
	ProtectionModuleListerExpansion
}

// protectionModuleLister implements the ProtectionModuleLister interface.
type protectionModuleLister struct {
	indexer cache.Indexer
}

// NewProtectionModuleLister returns a new ProtectionModuleLister.
func NewProtectionModuleLister(indexer cache.Indexer) ProtectionModuleLister {
	return &protectionModuleLister{indexer: indexer}
}

// List lists all ProtectionModules in the indexer.
func (s *protectionModuleLister) List(selector labels.Selector) (ret []*v1alpha1.ProtectionModule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProtectionModule))
	})
	return ret, err
}

// ProtectionModules returns an object that can list and get ProtectionModules.
func (s *protectionModuleLister) ProtectionModules(namespace string) ProtectionModuleNamespaceLister {
	return protectionModuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProtectionModuleNamespaceLister helps list and get ProtectionModules.
// All objects returned here must be treated as read-only.
type ProtectionModuleNamespaceLister interface {
	// List lists all ProtectionModules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProtectionModule, err error)
	// Get retrieves the ProtectionModule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProtectionModule, error)
	ProtectionModuleNamespaceListerExpansion
}

// protectionModuleNamespaceLister implements the ProtectionModuleNamespaceLister
// interface.
type protectionModuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProtectionModules in the indexer for a given namespace.
func (s protectionModuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProtectionModule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProtectionModule))
	})
	return ret, err
}

// Get retrieves the ProtectionModule from the indexer for a given namespace and name.
func (s protectionModuleNamespaceLister) Get(name string) (*v1alpha1.ProtectionModule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("protectionmodule"), name)
	}
	return obj.(*v1alpha1.ProtectionModule), nil
}
