/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/event/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BridgeRuleLister helps list BridgeRules.
// All objects returned here must be treated as read-only.
type BridgeRuleLister interface {
	// List lists all BridgeRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BridgeRule, err error)
	// BridgeRules returns an object that can list and get BridgeRules.
	BridgeRules(namespace string) BridgeRuleNamespaceLister
	BridgeRuleListerExpansion
}

// bridgeRuleLister implements the BridgeRuleLister interface.
type bridgeRuleLister struct {
	indexer cache.Indexer
}

// NewBridgeRuleLister returns a new BridgeRuleLister.
func NewBridgeRuleLister(indexer cache.Indexer) BridgeRuleLister {
	return &bridgeRuleLister{indexer: indexer}
}

// List lists all BridgeRules in the indexer.
func (s *bridgeRuleLister) List(selector labels.Selector) (ret []*v1alpha1.BridgeRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BridgeRule))
	})
	return ret, err
}

// BridgeRules returns an object that can list and get BridgeRules.
func (s *bridgeRuleLister) BridgeRules(namespace string) BridgeRuleNamespaceLister {
	return bridgeRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BridgeRuleNamespaceLister helps list and get BridgeRules.
// All objects returned here must be treated as read-only.
type BridgeRuleNamespaceLister interface {
	// List lists all BridgeRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BridgeRule, err error)
	// Get retrieves the BridgeRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BridgeRule, error)
	BridgeRuleNamespaceListerExpansion
}

// bridgeRuleNamespaceLister implements the BridgeRuleNamespaceLister
// interface.
type bridgeRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BridgeRules in the indexer for a given namespace.
func (s bridgeRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BridgeRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BridgeRule))
	})
	return ret, err
}

// Get retrieves the BridgeRule from the indexer for a given namespace and name.
func (s bridgeRuleNamespaceLister) Get(name string) (*v1alpha1.BridgeRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bridgerule"), name)
	}
	return obj.(*v1alpha1.BridgeRule), nil
}
