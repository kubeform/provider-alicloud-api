/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/event/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BridgeSlrLister helps list BridgeSlrs.
// All objects returned here must be treated as read-only.
type BridgeSlrLister interface {
	// List lists all BridgeSlrs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BridgeSlr, err error)
	// BridgeSlrs returns an object that can list and get BridgeSlrs.
	BridgeSlrs(namespace string) BridgeSlrNamespaceLister
	BridgeSlrListerExpansion
}

// bridgeSlrLister implements the BridgeSlrLister interface.
type bridgeSlrLister struct {
	indexer cache.Indexer
}

// NewBridgeSlrLister returns a new BridgeSlrLister.
func NewBridgeSlrLister(indexer cache.Indexer) BridgeSlrLister {
	return &bridgeSlrLister{indexer: indexer}
}

// List lists all BridgeSlrs in the indexer.
func (s *bridgeSlrLister) List(selector labels.Selector) (ret []*v1alpha1.BridgeSlr, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BridgeSlr))
	})
	return ret, err
}

// BridgeSlrs returns an object that can list and get BridgeSlrs.
func (s *bridgeSlrLister) BridgeSlrs(namespace string) BridgeSlrNamespaceLister {
	return bridgeSlrNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BridgeSlrNamespaceLister helps list and get BridgeSlrs.
// All objects returned here must be treated as read-only.
type BridgeSlrNamespaceLister interface {
	// List lists all BridgeSlrs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BridgeSlr, err error)
	// Get retrieves the BridgeSlr from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BridgeSlr, error)
	BridgeSlrNamespaceListerExpansion
}

// bridgeSlrNamespaceLister implements the BridgeSlrNamespaceLister
// interface.
type bridgeSlrNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BridgeSlrs in the indexer for a given namespace.
func (s bridgeSlrNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BridgeSlr, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BridgeSlr))
	})
	return ret, err
}

// Get retrieves the BridgeSlr from the indexer for a given namespace and name.
func (s bridgeSlrNamespaceLister) Get(name string) (*v1alpha1.BridgeSlr, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bridgeslr"), name)
	}
	return obj.(*v1alpha1.BridgeSlr), nil
}
