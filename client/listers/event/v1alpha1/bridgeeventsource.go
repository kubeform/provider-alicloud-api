/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/event/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BridgeEventSourceLister helps list BridgeEventSources.
// All objects returned here must be treated as read-only.
type BridgeEventSourceLister interface {
	// List lists all BridgeEventSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BridgeEventSource, err error)
	// BridgeEventSources returns an object that can list and get BridgeEventSources.
	BridgeEventSources(namespace string) BridgeEventSourceNamespaceLister
	BridgeEventSourceListerExpansion
}

// bridgeEventSourceLister implements the BridgeEventSourceLister interface.
type bridgeEventSourceLister struct {
	indexer cache.Indexer
}

// NewBridgeEventSourceLister returns a new BridgeEventSourceLister.
func NewBridgeEventSourceLister(indexer cache.Indexer) BridgeEventSourceLister {
	return &bridgeEventSourceLister{indexer: indexer}
}

// List lists all BridgeEventSources in the indexer.
func (s *bridgeEventSourceLister) List(selector labels.Selector) (ret []*v1alpha1.BridgeEventSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BridgeEventSource))
	})
	return ret, err
}

// BridgeEventSources returns an object that can list and get BridgeEventSources.
func (s *bridgeEventSourceLister) BridgeEventSources(namespace string) BridgeEventSourceNamespaceLister {
	return bridgeEventSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BridgeEventSourceNamespaceLister helps list and get BridgeEventSources.
// All objects returned here must be treated as read-only.
type BridgeEventSourceNamespaceLister interface {
	// List lists all BridgeEventSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BridgeEventSource, err error)
	// Get retrieves the BridgeEventSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BridgeEventSource, error)
	BridgeEventSourceNamespaceListerExpansion
}

// bridgeEventSourceNamespaceLister implements the BridgeEventSourceNamespaceLister
// interface.
type bridgeEventSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BridgeEventSources in the indexer for a given namespace.
func (s bridgeEventSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BridgeEventSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BridgeEventSource))
	})
	return ret, err
}

// Get retrieves the BridgeEventSource from the indexer for a given namespace and name.
func (s bridgeEventSourceNamespaceLister) Get(name string) (*v1alpha1.BridgeEventSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bridgeeventsource"), name)
	}
	return obj.(*v1alpha1.BridgeEventSource), nil
}
