/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/scdn/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DomainConfigLister helps list DomainConfigs.
// All objects returned here must be treated as read-only.
type DomainConfigLister interface {
	// List lists all DomainConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainConfig, err error)
	// DomainConfigs returns an object that can list and get DomainConfigs.
	DomainConfigs(namespace string) DomainConfigNamespaceLister
	DomainConfigListerExpansion
}

// domainConfigLister implements the DomainConfigLister interface.
type domainConfigLister struct {
	indexer cache.Indexer
}

// NewDomainConfigLister returns a new DomainConfigLister.
func NewDomainConfigLister(indexer cache.Indexer) DomainConfigLister {
	return &domainConfigLister{indexer: indexer}
}

// List lists all DomainConfigs in the indexer.
func (s *domainConfigLister) List(selector labels.Selector) (ret []*v1alpha1.DomainConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainConfig))
	})
	return ret, err
}

// DomainConfigs returns an object that can list and get DomainConfigs.
func (s *domainConfigLister) DomainConfigs(namespace string) DomainConfigNamespaceLister {
	return domainConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainConfigNamespaceLister helps list and get DomainConfigs.
// All objects returned here must be treated as read-only.
type DomainConfigNamespaceLister interface {
	// List lists all DomainConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainConfig, err error)
	// Get retrieves the DomainConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainConfig, error)
	DomainConfigNamespaceListerExpansion
}

// domainConfigNamespaceLister implements the DomainConfigNamespaceLister
// interface.
type domainConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainConfigs in the indexer for a given namespace.
func (s domainConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainConfig))
	})
	return ret, err
}

// Get retrieves the DomainConfig from the indexer for a given namespace and name.
func (s domainConfigNamespaceLister) Get(name string) (*v1alpha1.DomainConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domainconfig"), name)
	}
	return obj.(*v1alpha1.DomainConfig), nil
}
