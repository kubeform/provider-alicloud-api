/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cen/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TransitRouterVbrAttachmentLister helps list TransitRouterVbrAttachments.
// All objects returned here must be treated as read-only.
type TransitRouterVbrAttachmentLister interface {
	// List lists all TransitRouterVbrAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitRouterVbrAttachment, err error)
	// TransitRouterVbrAttachments returns an object that can list and get TransitRouterVbrAttachments.
	TransitRouterVbrAttachments(namespace string) TransitRouterVbrAttachmentNamespaceLister
	TransitRouterVbrAttachmentListerExpansion
}

// transitRouterVbrAttachmentLister implements the TransitRouterVbrAttachmentLister interface.
type transitRouterVbrAttachmentLister struct {
	indexer cache.Indexer
}

// NewTransitRouterVbrAttachmentLister returns a new TransitRouterVbrAttachmentLister.
func NewTransitRouterVbrAttachmentLister(indexer cache.Indexer) TransitRouterVbrAttachmentLister {
	return &transitRouterVbrAttachmentLister{indexer: indexer}
}

// List lists all TransitRouterVbrAttachments in the indexer.
func (s *transitRouterVbrAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.TransitRouterVbrAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitRouterVbrAttachment))
	})
	return ret, err
}

// TransitRouterVbrAttachments returns an object that can list and get TransitRouterVbrAttachments.
func (s *transitRouterVbrAttachmentLister) TransitRouterVbrAttachments(namespace string) TransitRouterVbrAttachmentNamespaceLister {
	return transitRouterVbrAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TransitRouterVbrAttachmentNamespaceLister helps list and get TransitRouterVbrAttachments.
// All objects returned here must be treated as read-only.
type TransitRouterVbrAttachmentNamespaceLister interface {
	// List lists all TransitRouterVbrAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitRouterVbrAttachment, err error)
	// Get retrieves the TransitRouterVbrAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TransitRouterVbrAttachment, error)
	TransitRouterVbrAttachmentNamespaceListerExpansion
}

// transitRouterVbrAttachmentNamespaceLister implements the TransitRouterVbrAttachmentNamespaceLister
// interface.
type transitRouterVbrAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TransitRouterVbrAttachments in the indexer for a given namespace.
func (s transitRouterVbrAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TransitRouterVbrAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitRouterVbrAttachment))
	})
	return ret, err
}

// Get retrieves the TransitRouterVbrAttachment from the indexer for a given namespace and name.
func (s transitRouterVbrAttachmentNamespaceLister) Get(name string) (*v1alpha1.TransitRouterVbrAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("transitroutervbrattachment"), name)
	}
	return obj.(*v1alpha1.TransitRouterVbrAttachment), nil
}
