/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cen/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BandwidthLimitLister helps list BandwidthLimits.
// All objects returned here must be treated as read-only.
type BandwidthLimitLister interface {
	// List lists all BandwidthLimits in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BandwidthLimit, err error)
	// BandwidthLimits returns an object that can list and get BandwidthLimits.
	BandwidthLimits(namespace string) BandwidthLimitNamespaceLister
	BandwidthLimitListerExpansion
}

// bandwidthLimitLister implements the BandwidthLimitLister interface.
type bandwidthLimitLister struct {
	indexer cache.Indexer
}

// NewBandwidthLimitLister returns a new BandwidthLimitLister.
func NewBandwidthLimitLister(indexer cache.Indexer) BandwidthLimitLister {
	return &bandwidthLimitLister{indexer: indexer}
}

// List lists all BandwidthLimits in the indexer.
func (s *bandwidthLimitLister) List(selector labels.Selector) (ret []*v1alpha1.BandwidthLimit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BandwidthLimit))
	})
	return ret, err
}

// BandwidthLimits returns an object that can list and get BandwidthLimits.
func (s *bandwidthLimitLister) BandwidthLimits(namespace string) BandwidthLimitNamespaceLister {
	return bandwidthLimitNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BandwidthLimitNamespaceLister helps list and get BandwidthLimits.
// All objects returned here must be treated as read-only.
type BandwidthLimitNamespaceLister interface {
	// List lists all BandwidthLimits in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BandwidthLimit, err error)
	// Get retrieves the BandwidthLimit from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BandwidthLimit, error)
	BandwidthLimitNamespaceListerExpansion
}

// bandwidthLimitNamespaceLister implements the BandwidthLimitNamespaceLister
// interface.
type bandwidthLimitNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BandwidthLimits in the indexer for a given namespace.
func (s bandwidthLimitNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BandwidthLimit, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BandwidthLimit))
	})
	return ret, err
}

// Get retrieves the BandwidthLimit from the indexer for a given namespace and name.
func (s bandwidthLimitNamespaceLister) Get(name string) (*v1alpha1.BandwidthLimit, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bandwidthlimit"), name)
	}
	return obj.(*v1alpha1.BandwidthLimit), nil
}
