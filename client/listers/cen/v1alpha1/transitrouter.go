/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cen/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TransitRouterLister helps list TransitRouters.
// All objects returned here must be treated as read-only.
type TransitRouterLister interface {
	// List lists all TransitRouters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitRouter, err error)
	// TransitRouters returns an object that can list and get TransitRouters.
	TransitRouters(namespace string) TransitRouterNamespaceLister
	TransitRouterListerExpansion
}

// transitRouterLister implements the TransitRouterLister interface.
type transitRouterLister struct {
	indexer cache.Indexer
}

// NewTransitRouterLister returns a new TransitRouterLister.
func NewTransitRouterLister(indexer cache.Indexer) TransitRouterLister {
	return &transitRouterLister{indexer: indexer}
}

// List lists all TransitRouters in the indexer.
func (s *transitRouterLister) List(selector labels.Selector) (ret []*v1alpha1.TransitRouter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitRouter))
	})
	return ret, err
}

// TransitRouters returns an object that can list and get TransitRouters.
func (s *transitRouterLister) TransitRouters(namespace string) TransitRouterNamespaceLister {
	return transitRouterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TransitRouterNamespaceLister helps list and get TransitRouters.
// All objects returned here must be treated as read-only.
type TransitRouterNamespaceLister interface {
	// List lists all TransitRouters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitRouter, err error)
	// Get retrieves the TransitRouter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TransitRouter, error)
	TransitRouterNamespaceListerExpansion
}

// transitRouterNamespaceLister implements the TransitRouterNamespaceLister
// interface.
type transitRouterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TransitRouters in the indexer for a given namespace.
func (s transitRouterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TransitRouter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitRouter))
	})
	return ret, err
}

// Get retrieves the TransitRouter from the indexer for a given namespace and name.
func (s transitRouterNamespaceLister) Get(name string) (*v1alpha1.TransitRouter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("transitrouter"), name)
	}
	return obj.(*v1alpha1.TransitRouter), nil
}
