/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cen/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TransitRouterRouteTableAssociationLister helps list TransitRouterRouteTableAssociations.
// All objects returned here must be treated as read-only.
type TransitRouterRouteTableAssociationLister interface {
	// List lists all TransitRouterRouteTableAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitRouterRouteTableAssociation, err error)
	// TransitRouterRouteTableAssociations returns an object that can list and get TransitRouterRouteTableAssociations.
	TransitRouterRouteTableAssociations(namespace string) TransitRouterRouteTableAssociationNamespaceLister
	TransitRouterRouteTableAssociationListerExpansion
}

// transitRouterRouteTableAssociationLister implements the TransitRouterRouteTableAssociationLister interface.
type transitRouterRouteTableAssociationLister struct {
	indexer cache.Indexer
}

// NewTransitRouterRouteTableAssociationLister returns a new TransitRouterRouteTableAssociationLister.
func NewTransitRouterRouteTableAssociationLister(indexer cache.Indexer) TransitRouterRouteTableAssociationLister {
	return &transitRouterRouteTableAssociationLister{indexer: indexer}
}

// List lists all TransitRouterRouteTableAssociations in the indexer.
func (s *transitRouterRouteTableAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.TransitRouterRouteTableAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitRouterRouteTableAssociation))
	})
	return ret, err
}

// TransitRouterRouteTableAssociations returns an object that can list and get TransitRouterRouteTableAssociations.
func (s *transitRouterRouteTableAssociationLister) TransitRouterRouteTableAssociations(namespace string) TransitRouterRouteTableAssociationNamespaceLister {
	return transitRouterRouteTableAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TransitRouterRouteTableAssociationNamespaceLister helps list and get TransitRouterRouteTableAssociations.
// All objects returned here must be treated as read-only.
type TransitRouterRouteTableAssociationNamespaceLister interface {
	// List lists all TransitRouterRouteTableAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitRouterRouteTableAssociation, err error)
	// Get retrieves the TransitRouterRouteTableAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TransitRouterRouteTableAssociation, error)
	TransitRouterRouteTableAssociationNamespaceListerExpansion
}

// transitRouterRouteTableAssociationNamespaceLister implements the TransitRouterRouteTableAssociationNamespaceLister
// interface.
type transitRouterRouteTableAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TransitRouterRouteTableAssociations in the indexer for a given namespace.
func (s transitRouterRouteTableAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TransitRouterRouteTableAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitRouterRouteTableAssociation))
	})
	return ret, err
}

// Get retrieves the TransitRouterRouteTableAssociation from the indexer for a given namespace and name.
func (s transitRouterRouteTableAssociationNamespaceLister) Get(name string) (*v1alpha1.TransitRouterRouteTableAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("transitrouterroutetableassociation"), name)
	}
	return obj.(*v1alpha1.TransitRouterRouteTableAssociation), nil
}
