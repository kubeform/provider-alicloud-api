/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cen/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TransitRouterRouteEntryLister helps list TransitRouterRouteEntries.
// All objects returned here must be treated as read-only.
type TransitRouterRouteEntryLister interface {
	// List lists all TransitRouterRouteEntries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitRouterRouteEntry, err error)
	// TransitRouterRouteEntries returns an object that can list and get TransitRouterRouteEntries.
	TransitRouterRouteEntries(namespace string) TransitRouterRouteEntryNamespaceLister
	TransitRouterRouteEntryListerExpansion
}

// transitRouterRouteEntryLister implements the TransitRouterRouteEntryLister interface.
type transitRouterRouteEntryLister struct {
	indexer cache.Indexer
}

// NewTransitRouterRouteEntryLister returns a new TransitRouterRouteEntryLister.
func NewTransitRouterRouteEntryLister(indexer cache.Indexer) TransitRouterRouteEntryLister {
	return &transitRouterRouteEntryLister{indexer: indexer}
}

// List lists all TransitRouterRouteEntries in the indexer.
func (s *transitRouterRouteEntryLister) List(selector labels.Selector) (ret []*v1alpha1.TransitRouterRouteEntry, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitRouterRouteEntry))
	})
	return ret, err
}

// TransitRouterRouteEntries returns an object that can list and get TransitRouterRouteEntries.
func (s *transitRouterRouteEntryLister) TransitRouterRouteEntries(namespace string) TransitRouterRouteEntryNamespaceLister {
	return transitRouterRouteEntryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TransitRouterRouteEntryNamespaceLister helps list and get TransitRouterRouteEntries.
// All objects returned here must be treated as read-only.
type TransitRouterRouteEntryNamespaceLister interface {
	// List lists all TransitRouterRouteEntries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitRouterRouteEntry, err error)
	// Get retrieves the TransitRouterRouteEntry from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TransitRouterRouteEntry, error)
	TransitRouterRouteEntryNamespaceListerExpansion
}

// transitRouterRouteEntryNamespaceLister implements the TransitRouterRouteEntryNamespaceLister
// interface.
type transitRouterRouteEntryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TransitRouterRouteEntries in the indexer for a given namespace.
func (s transitRouterRouteEntryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TransitRouterRouteEntry, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitRouterRouteEntry))
	})
	return ret, err
}

// Get retrieves the TransitRouterRouteEntry from the indexer for a given namespace and name.
func (s transitRouterRouteEntryNamespaceLister) Get(name string) (*v1alpha1.TransitRouterRouteEntry, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("transitrouterrouteentry"), name)
	}
	return obj.(*v1alpha1.TransitRouterRouteEntry), nil
}
