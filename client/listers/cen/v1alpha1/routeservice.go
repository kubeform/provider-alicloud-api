/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cen/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RouteServiceLister helps list RouteServices.
// All objects returned here must be treated as read-only.
type RouteServiceLister interface {
	// List lists all RouteServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RouteService, err error)
	// RouteServices returns an object that can list and get RouteServices.
	RouteServices(namespace string) RouteServiceNamespaceLister
	RouteServiceListerExpansion
}

// routeServiceLister implements the RouteServiceLister interface.
type routeServiceLister struct {
	indexer cache.Indexer
}

// NewRouteServiceLister returns a new RouteServiceLister.
func NewRouteServiceLister(indexer cache.Indexer) RouteServiceLister {
	return &routeServiceLister{indexer: indexer}
}

// List lists all RouteServices in the indexer.
func (s *routeServiceLister) List(selector labels.Selector) (ret []*v1alpha1.RouteService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RouteService))
	})
	return ret, err
}

// RouteServices returns an object that can list and get RouteServices.
func (s *routeServiceLister) RouteServices(namespace string) RouteServiceNamespaceLister {
	return routeServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RouteServiceNamespaceLister helps list and get RouteServices.
// All objects returned here must be treated as read-only.
type RouteServiceNamespaceLister interface {
	// List lists all RouteServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RouteService, err error)
	// Get retrieves the RouteService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RouteService, error)
	RouteServiceNamespaceListerExpansion
}

// routeServiceNamespaceLister implements the RouteServiceNamespaceLister
// interface.
type routeServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RouteServices in the indexer for a given namespace.
func (s routeServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RouteService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RouteService))
	})
	return ret, err
}

// Get retrieves the RouteService from the indexer for a given namespace and name.
func (s routeServiceNamespaceLister) Get(name string) (*v1alpha1.RouteService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("routeservice"), name)
	}
	return obj.(*v1alpha1.RouteService), nil
}
