/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cen/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TransitRouterPeerAttachmentLister helps list TransitRouterPeerAttachments.
// All objects returned here must be treated as read-only.
type TransitRouterPeerAttachmentLister interface {
	// List lists all TransitRouterPeerAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitRouterPeerAttachment, err error)
	// TransitRouterPeerAttachments returns an object that can list and get TransitRouterPeerAttachments.
	TransitRouterPeerAttachments(namespace string) TransitRouterPeerAttachmentNamespaceLister
	TransitRouterPeerAttachmentListerExpansion
}

// transitRouterPeerAttachmentLister implements the TransitRouterPeerAttachmentLister interface.
type transitRouterPeerAttachmentLister struct {
	indexer cache.Indexer
}

// NewTransitRouterPeerAttachmentLister returns a new TransitRouterPeerAttachmentLister.
func NewTransitRouterPeerAttachmentLister(indexer cache.Indexer) TransitRouterPeerAttachmentLister {
	return &transitRouterPeerAttachmentLister{indexer: indexer}
}

// List lists all TransitRouterPeerAttachments in the indexer.
func (s *transitRouterPeerAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.TransitRouterPeerAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitRouterPeerAttachment))
	})
	return ret, err
}

// TransitRouterPeerAttachments returns an object that can list and get TransitRouterPeerAttachments.
func (s *transitRouterPeerAttachmentLister) TransitRouterPeerAttachments(namespace string) TransitRouterPeerAttachmentNamespaceLister {
	return transitRouterPeerAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TransitRouterPeerAttachmentNamespaceLister helps list and get TransitRouterPeerAttachments.
// All objects returned here must be treated as read-only.
type TransitRouterPeerAttachmentNamespaceLister interface {
	// List lists all TransitRouterPeerAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitRouterPeerAttachment, err error)
	// Get retrieves the TransitRouterPeerAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TransitRouterPeerAttachment, error)
	TransitRouterPeerAttachmentNamespaceListerExpansion
}

// transitRouterPeerAttachmentNamespaceLister implements the TransitRouterPeerAttachmentNamespaceLister
// interface.
type transitRouterPeerAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TransitRouterPeerAttachments in the indexer for a given namespace.
func (s transitRouterPeerAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TransitRouterPeerAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitRouterPeerAttachment))
	})
	return ret, err
}

// Get retrieves the TransitRouterPeerAttachment from the indexer for a given namespace and name.
func (s transitRouterPeerAttachmentNamespaceLister) Get(name string) (*v1alpha1.TransitRouterPeerAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("transitrouterpeerattachment"), name)
	}
	return obj.(*v1alpha1.TransitRouterPeerAttachment), nil
}
