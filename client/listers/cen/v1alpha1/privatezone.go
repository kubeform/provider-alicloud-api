/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cen/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivateZoneLister helps list PrivateZones.
// All objects returned here must be treated as read-only.
type PrivateZoneLister interface {
	// List lists all PrivateZones in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateZone, err error)
	// PrivateZones returns an object that can list and get PrivateZones.
	PrivateZones(namespace string) PrivateZoneNamespaceLister
	PrivateZoneListerExpansion
}

// privateZoneLister implements the PrivateZoneLister interface.
type privateZoneLister struct {
	indexer cache.Indexer
}

// NewPrivateZoneLister returns a new PrivateZoneLister.
func NewPrivateZoneLister(indexer cache.Indexer) PrivateZoneLister {
	return &privateZoneLister{indexer: indexer}
}

// List lists all PrivateZones in the indexer.
func (s *privateZoneLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateZone, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateZone))
	})
	return ret, err
}

// PrivateZones returns an object that can list and get PrivateZones.
func (s *privateZoneLister) PrivateZones(namespace string) PrivateZoneNamespaceLister {
	return privateZoneNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateZoneNamespaceLister helps list and get PrivateZones.
// All objects returned here must be treated as read-only.
type PrivateZoneNamespaceLister interface {
	// List lists all PrivateZones in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateZone, err error)
	// Get retrieves the PrivateZone from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PrivateZone, error)
	PrivateZoneNamespaceListerExpansion
}

// privateZoneNamespaceLister implements the PrivateZoneNamespaceLister
// interface.
type privateZoneNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateZones in the indexer for a given namespace.
func (s privateZoneNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateZone, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateZone))
	})
	return ret, err
}

// Get retrieves the PrivateZone from the indexer for a given namespace and name.
func (s privateZoneNamespaceLister) Get(name string) (*v1alpha1.PrivateZone, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("privatezone"), name)
	}
	return obj.(*v1alpha1.PrivateZone), nil
}
