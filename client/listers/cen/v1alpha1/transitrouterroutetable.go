/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cen/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TransitRouterRouteTableLister helps list TransitRouterRouteTables.
// All objects returned here must be treated as read-only.
type TransitRouterRouteTableLister interface {
	// List lists all TransitRouterRouteTables in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitRouterRouteTable, err error)
	// TransitRouterRouteTables returns an object that can list and get TransitRouterRouteTables.
	TransitRouterRouteTables(namespace string) TransitRouterRouteTableNamespaceLister
	TransitRouterRouteTableListerExpansion
}

// transitRouterRouteTableLister implements the TransitRouterRouteTableLister interface.
type transitRouterRouteTableLister struct {
	indexer cache.Indexer
}

// NewTransitRouterRouteTableLister returns a new TransitRouterRouteTableLister.
func NewTransitRouterRouteTableLister(indexer cache.Indexer) TransitRouterRouteTableLister {
	return &transitRouterRouteTableLister{indexer: indexer}
}

// List lists all TransitRouterRouteTables in the indexer.
func (s *transitRouterRouteTableLister) List(selector labels.Selector) (ret []*v1alpha1.TransitRouterRouteTable, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitRouterRouteTable))
	})
	return ret, err
}

// TransitRouterRouteTables returns an object that can list and get TransitRouterRouteTables.
func (s *transitRouterRouteTableLister) TransitRouterRouteTables(namespace string) TransitRouterRouteTableNamespaceLister {
	return transitRouterRouteTableNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TransitRouterRouteTableNamespaceLister helps list and get TransitRouterRouteTables.
// All objects returned here must be treated as read-only.
type TransitRouterRouteTableNamespaceLister interface {
	// List lists all TransitRouterRouteTables in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitRouterRouteTable, err error)
	// Get retrieves the TransitRouterRouteTable from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TransitRouterRouteTable, error)
	TransitRouterRouteTableNamespaceListerExpansion
}

// transitRouterRouteTableNamespaceLister implements the TransitRouterRouteTableNamespaceLister
// interface.
type transitRouterRouteTableNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TransitRouterRouteTables in the indexer for a given namespace.
func (s transitRouterRouteTableNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TransitRouterRouteTable, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitRouterRouteTable))
	})
	return ret, err
}

// Get retrieves the TransitRouterRouteTable from the indexer for a given namespace and name.
func (s transitRouterRouteTableNamespaceLister) Get(name string) (*v1alpha1.TransitRouterRouteTable, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("transitrouterroutetable"), name)
	}
	return obj.(*v1alpha1.TransitRouterRouteTable), nil
}
