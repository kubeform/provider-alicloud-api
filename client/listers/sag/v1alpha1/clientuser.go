/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/sag/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClientUserLister helps list ClientUsers.
// All objects returned here must be treated as read-only.
type ClientUserLister interface {
	// List lists all ClientUsers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClientUser, err error)
	// ClientUsers returns an object that can list and get ClientUsers.
	ClientUsers(namespace string) ClientUserNamespaceLister
	ClientUserListerExpansion
}

// clientUserLister implements the ClientUserLister interface.
type clientUserLister struct {
	indexer cache.Indexer
}

// NewClientUserLister returns a new ClientUserLister.
func NewClientUserLister(indexer cache.Indexer) ClientUserLister {
	return &clientUserLister{indexer: indexer}
}

// List lists all ClientUsers in the indexer.
func (s *clientUserLister) List(selector labels.Selector) (ret []*v1alpha1.ClientUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClientUser))
	})
	return ret, err
}

// ClientUsers returns an object that can list and get ClientUsers.
func (s *clientUserLister) ClientUsers(namespace string) ClientUserNamespaceLister {
	return clientUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClientUserNamespaceLister helps list and get ClientUsers.
// All objects returned here must be treated as read-only.
type ClientUserNamespaceLister interface {
	// List lists all ClientUsers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClientUser, err error)
	// Get retrieves the ClientUser from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClientUser, error)
	ClientUserNamespaceListerExpansion
}

// clientUserNamespaceLister implements the ClientUserNamespaceLister
// interface.
type clientUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClientUsers in the indexer for a given namespace.
func (s clientUserNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClientUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClientUser))
	})
	return ret, err
}

// Get retrieves the ClientUser from the indexer for a given namespace and name.
func (s clientUserNamespaceLister) Get(name string) (*v1alpha1.ClientUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clientuser"), name)
	}
	return obj.(*v1alpha1.ClientUser), nil
}
