/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/sag/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DnatEntryLister helps list DnatEntries.
// All objects returned here must be treated as read-only.
type DnatEntryLister interface {
	// List lists all DnatEntries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DnatEntry, err error)
	// DnatEntries returns an object that can list and get DnatEntries.
	DnatEntries(namespace string) DnatEntryNamespaceLister
	DnatEntryListerExpansion
}

// dnatEntryLister implements the DnatEntryLister interface.
type dnatEntryLister struct {
	indexer cache.Indexer
}

// NewDnatEntryLister returns a new DnatEntryLister.
func NewDnatEntryLister(indexer cache.Indexer) DnatEntryLister {
	return &dnatEntryLister{indexer: indexer}
}

// List lists all DnatEntries in the indexer.
func (s *dnatEntryLister) List(selector labels.Selector) (ret []*v1alpha1.DnatEntry, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnatEntry))
	})
	return ret, err
}

// DnatEntries returns an object that can list and get DnatEntries.
func (s *dnatEntryLister) DnatEntries(namespace string) DnatEntryNamespaceLister {
	return dnatEntryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DnatEntryNamespaceLister helps list and get DnatEntries.
// All objects returned here must be treated as read-only.
type DnatEntryNamespaceLister interface {
	// List lists all DnatEntries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DnatEntry, err error)
	// Get retrieves the DnatEntry from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DnatEntry, error)
	DnatEntryNamespaceListerExpansion
}

// dnatEntryNamespaceLister implements the DnatEntryNamespaceLister
// interface.
type dnatEntryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DnatEntries in the indexer for a given namespace.
func (s dnatEntryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DnatEntry, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnatEntry))
	})
	return ret, err
}

// Get retrieves the DnatEntry from the indexer for a given namespace and name.
func (s dnatEntryNamespaceLister) Get(name string) (*v1alpha1.DnatEntry, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dnatentry"), name)
	}
	return obj.(*v1alpha1.DnatEntry), nil
}
