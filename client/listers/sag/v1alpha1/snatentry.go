/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/sag/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SnatEntryLister helps list SnatEntries.
// All objects returned here must be treated as read-only.
type SnatEntryLister interface {
	// List lists all SnatEntries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SnatEntry, err error)
	// SnatEntries returns an object that can list and get SnatEntries.
	SnatEntries(namespace string) SnatEntryNamespaceLister
	SnatEntryListerExpansion
}

// snatEntryLister implements the SnatEntryLister interface.
type snatEntryLister struct {
	indexer cache.Indexer
}

// NewSnatEntryLister returns a new SnatEntryLister.
func NewSnatEntryLister(indexer cache.Indexer) SnatEntryLister {
	return &snatEntryLister{indexer: indexer}
}

// List lists all SnatEntries in the indexer.
func (s *snatEntryLister) List(selector labels.Selector) (ret []*v1alpha1.SnatEntry, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SnatEntry))
	})
	return ret, err
}

// SnatEntries returns an object that can list and get SnatEntries.
func (s *snatEntryLister) SnatEntries(namespace string) SnatEntryNamespaceLister {
	return snatEntryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SnatEntryNamespaceLister helps list and get SnatEntries.
// All objects returned here must be treated as read-only.
type SnatEntryNamespaceLister interface {
	// List lists all SnatEntries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SnatEntry, err error)
	// Get retrieves the SnatEntry from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SnatEntry, error)
	SnatEntryNamespaceListerExpansion
}

// snatEntryNamespaceLister implements the SnatEntryNamespaceLister
// interface.
type snatEntryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SnatEntries in the indexer for a given namespace.
func (s snatEntryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SnatEntry, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SnatEntry))
	})
	return ret, err
}

// Get retrieves the SnatEntry from the indexer for a given namespace and name.
func (s snatEntryNamespaceLister) Get(name string) (*v1alpha1.SnatEntry, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("snatentry"), name)
	}
	return obj.(*v1alpha1.SnatEntry), nil
}
