/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/sag/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QosCarLister helps list QosCars.
// All objects returned here must be treated as read-only.
type QosCarLister interface {
	// List lists all QosCars in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QosCar, err error)
	// QosCars returns an object that can list and get QosCars.
	QosCars(namespace string) QosCarNamespaceLister
	QosCarListerExpansion
}

// qosCarLister implements the QosCarLister interface.
type qosCarLister struct {
	indexer cache.Indexer
}

// NewQosCarLister returns a new QosCarLister.
func NewQosCarLister(indexer cache.Indexer) QosCarLister {
	return &qosCarLister{indexer: indexer}
}

// List lists all QosCars in the indexer.
func (s *qosCarLister) List(selector labels.Selector) (ret []*v1alpha1.QosCar, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QosCar))
	})
	return ret, err
}

// QosCars returns an object that can list and get QosCars.
func (s *qosCarLister) QosCars(namespace string) QosCarNamespaceLister {
	return qosCarNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QosCarNamespaceLister helps list and get QosCars.
// All objects returned here must be treated as read-only.
type QosCarNamespaceLister interface {
	// List lists all QosCars in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QosCar, err error)
	// Get retrieves the QosCar from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.QosCar, error)
	QosCarNamespaceListerExpansion
}

// qosCarNamespaceLister implements the QosCarNamespaceLister
// interface.
type qosCarNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QosCars in the indexer for a given namespace.
func (s qosCarNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.QosCar, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QosCar))
	})
	return ret, err
}

// Get retrieves the QosCar from the indexer for a given namespace and name.
func (s qosCarNamespaceLister) Get(name string) (*v1alpha1.QosCar, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("qoscar"), name)
	}
	return obj.(*v1alpha1.QosCar), nil
}
