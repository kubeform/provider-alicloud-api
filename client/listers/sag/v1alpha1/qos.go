/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/sag/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QosLister helps list Qoses.
// All objects returned here must be treated as read-only.
type QosLister interface {
	// List lists all Qoses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Qos, err error)
	// Qoses returns an object that can list and get Qoses.
	Qoses(namespace string) QosNamespaceLister
	QosListerExpansion
}

// qosLister implements the QosLister interface.
type qosLister struct {
	indexer cache.Indexer
}

// NewQosLister returns a new QosLister.
func NewQosLister(indexer cache.Indexer) QosLister {
	return &qosLister{indexer: indexer}
}

// List lists all Qoses in the indexer.
func (s *qosLister) List(selector labels.Selector) (ret []*v1alpha1.Qos, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Qos))
	})
	return ret, err
}

// Qoses returns an object that can list and get Qoses.
func (s *qosLister) Qoses(namespace string) QosNamespaceLister {
	return qosNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QosNamespaceLister helps list and get Qoses.
// All objects returned here must be treated as read-only.
type QosNamespaceLister interface {
	// List lists all Qoses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Qos, err error)
	// Get retrieves the Qos from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Qos, error)
	QosNamespaceListerExpansion
}

// qosNamespaceLister implements the QosNamespaceLister
// interface.
type qosNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Qoses in the indexer for a given namespace.
func (s qosNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Qos, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Qos))
	})
	return ret, err
}

// Get retrieves the Qos from the indexer for a given namespace and name.
func (s qosNamespaceLister) Get(name string) (*v1alpha1.Qos, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("qos"), name)
	}
	return obj.(*v1alpha1.Qos), nil
}
