/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/sag/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QosPolicyLister helps list QosPolicies.
// All objects returned here must be treated as read-only.
type QosPolicyLister interface {
	// List lists all QosPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QosPolicy, err error)
	// QosPolicies returns an object that can list and get QosPolicies.
	QosPolicies(namespace string) QosPolicyNamespaceLister
	QosPolicyListerExpansion
}

// qosPolicyLister implements the QosPolicyLister interface.
type qosPolicyLister struct {
	indexer cache.Indexer
}

// NewQosPolicyLister returns a new QosPolicyLister.
func NewQosPolicyLister(indexer cache.Indexer) QosPolicyLister {
	return &qosPolicyLister{indexer: indexer}
}

// List lists all QosPolicies in the indexer.
func (s *qosPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.QosPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QosPolicy))
	})
	return ret, err
}

// QosPolicies returns an object that can list and get QosPolicies.
func (s *qosPolicyLister) QosPolicies(namespace string) QosPolicyNamespaceLister {
	return qosPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QosPolicyNamespaceLister helps list and get QosPolicies.
// All objects returned here must be treated as read-only.
type QosPolicyNamespaceLister interface {
	// List lists all QosPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QosPolicy, err error)
	// Get retrieves the QosPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.QosPolicy, error)
	QosPolicyNamespaceListerExpansion
}

// qosPolicyNamespaceLister implements the QosPolicyNamespaceLister
// interface.
type qosPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QosPolicies in the indexer for a given namespace.
func (s qosPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.QosPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QosPolicy))
	})
	return ret, err
}

// Get retrieves the QosPolicy from the indexer for a given namespace and name.
func (s qosPolicyNamespaceLister) Get(name string) (*v1alpha1.QosPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("qospolicy"), name)
	}
	return obj.(*v1alpha1.QosPolicy), nil
}
