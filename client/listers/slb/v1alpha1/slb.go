/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/slb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SlbLister helps list Slbs.
// All objects returned here must be treated as read-only.
type SlbLister interface {
	// List lists all Slbs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Slb, err error)
	// Slbs returns an object that can list and get Slbs.
	Slbs(namespace string) SlbNamespaceLister
	SlbListerExpansion
}

// slbLister implements the SlbLister interface.
type slbLister struct {
	indexer cache.Indexer
}

// NewSlbLister returns a new SlbLister.
func NewSlbLister(indexer cache.Indexer) SlbLister {
	return &slbLister{indexer: indexer}
}

// List lists all Slbs in the indexer.
func (s *slbLister) List(selector labels.Selector) (ret []*v1alpha1.Slb, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Slb))
	})
	return ret, err
}

// Slbs returns an object that can list and get Slbs.
func (s *slbLister) Slbs(namespace string) SlbNamespaceLister {
	return slbNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SlbNamespaceLister helps list and get Slbs.
// All objects returned here must be treated as read-only.
type SlbNamespaceLister interface {
	// List lists all Slbs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Slb, err error)
	// Get retrieves the Slb from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Slb, error)
	SlbNamespaceListerExpansion
}

// slbNamespaceLister implements the SlbNamespaceLister
// interface.
type slbNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Slbs in the indexer for a given namespace.
func (s slbNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Slb, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Slb))
	})
	return ret, err
}

// Get retrieves the Slb from the indexer for a given namespace and name.
func (s slbNamespaceLister) Get(name string) (*v1alpha1.Slb, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("slb"), name)
	}
	return obj.(*v1alpha1.Slb), nil
}
