/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/slb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CaCertificateLister helps list CaCertificates.
// All objects returned here must be treated as read-only.
type CaCertificateLister interface {
	// List lists all CaCertificates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CaCertificate, err error)
	// CaCertificates returns an object that can list and get CaCertificates.
	CaCertificates(namespace string) CaCertificateNamespaceLister
	CaCertificateListerExpansion
}

// caCertificateLister implements the CaCertificateLister interface.
type caCertificateLister struct {
	indexer cache.Indexer
}

// NewCaCertificateLister returns a new CaCertificateLister.
func NewCaCertificateLister(indexer cache.Indexer) CaCertificateLister {
	return &caCertificateLister{indexer: indexer}
}

// List lists all CaCertificates in the indexer.
func (s *caCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.CaCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CaCertificate))
	})
	return ret, err
}

// CaCertificates returns an object that can list and get CaCertificates.
func (s *caCertificateLister) CaCertificates(namespace string) CaCertificateNamespaceLister {
	return caCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CaCertificateNamespaceLister helps list and get CaCertificates.
// All objects returned here must be treated as read-only.
type CaCertificateNamespaceLister interface {
	// List lists all CaCertificates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CaCertificate, err error)
	// Get retrieves the CaCertificate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CaCertificate, error)
	CaCertificateNamespaceListerExpansion
}

// caCertificateNamespaceLister implements the CaCertificateNamespaceLister
// interface.
type caCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CaCertificates in the indexer for a given namespace.
func (s caCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CaCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CaCertificate))
	})
	return ret, err
}

// Get retrieves the CaCertificate from the indexer for a given namespace and name.
func (s caCertificateNamespaceLister) Get(name string) (*v1alpha1.CaCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cacertificate"), name)
	}
	return obj.(*v1alpha1.CaCertificate), nil
}
