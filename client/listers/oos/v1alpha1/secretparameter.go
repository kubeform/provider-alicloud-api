/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/oos/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecretParameterLister helps list SecretParameters.
// All objects returned here must be treated as read-only.
type SecretParameterLister interface {
	// List lists all SecretParameters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretParameter, err error)
	// SecretParameters returns an object that can list and get SecretParameters.
	SecretParameters(namespace string) SecretParameterNamespaceLister
	SecretParameterListerExpansion
}

// secretParameterLister implements the SecretParameterLister interface.
type secretParameterLister struct {
	indexer cache.Indexer
}

// NewSecretParameterLister returns a new SecretParameterLister.
func NewSecretParameterLister(indexer cache.Indexer) SecretParameterLister {
	return &secretParameterLister{indexer: indexer}
}

// List lists all SecretParameters in the indexer.
func (s *secretParameterLister) List(selector labels.Selector) (ret []*v1alpha1.SecretParameter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretParameter))
	})
	return ret, err
}

// SecretParameters returns an object that can list and get SecretParameters.
func (s *secretParameterLister) SecretParameters(namespace string) SecretParameterNamespaceLister {
	return secretParameterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecretParameterNamespaceLister helps list and get SecretParameters.
// All objects returned here must be treated as read-only.
type SecretParameterNamespaceLister interface {
	// List lists all SecretParameters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretParameter, err error)
	// Get retrieves the SecretParameter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SecretParameter, error)
	SecretParameterNamespaceListerExpansion
}

// secretParameterNamespaceLister implements the SecretParameterNamespaceLister
// interface.
type secretParameterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecretParameters in the indexer for a given namespace.
func (s secretParameterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecretParameter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretParameter))
	})
	return ret, err
}

// Get retrieves the SecretParameter from the indexer for a given namespace and name.
func (s secretParameterNamespaceLister) Get(name string) (*v1alpha1.SecretParameter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("secretparameter"), name)
	}
	return obj.(*v1alpha1.SecretParameter), nil
}
