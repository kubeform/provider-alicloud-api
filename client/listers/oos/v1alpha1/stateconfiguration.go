/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/oos/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StateConfigurationLister helps list StateConfigurations.
// All objects returned here must be treated as read-only.
type StateConfigurationLister interface {
	// List lists all StateConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StateConfiguration, err error)
	// StateConfigurations returns an object that can list and get StateConfigurations.
	StateConfigurations(namespace string) StateConfigurationNamespaceLister
	StateConfigurationListerExpansion
}

// stateConfigurationLister implements the StateConfigurationLister interface.
type stateConfigurationLister struct {
	indexer cache.Indexer
}

// NewStateConfigurationLister returns a new StateConfigurationLister.
func NewStateConfigurationLister(indexer cache.Indexer) StateConfigurationLister {
	return &stateConfigurationLister{indexer: indexer}
}

// List lists all StateConfigurations in the indexer.
func (s *stateConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.StateConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StateConfiguration))
	})
	return ret, err
}

// StateConfigurations returns an object that can list and get StateConfigurations.
func (s *stateConfigurationLister) StateConfigurations(namespace string) StateConfigurationNamespaceLister {
	return stateConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StateConfigurationNamespaceLister helps list and get StateConfigurations.
// All objects returned here must be treated as read-only.
type StateConfigurationNamespaceLister interface {
	// List lists all StateConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StateConfiguration, err error)
	// Get retrieves the StateConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StateConfiguration, error)
	StateConfigurationNamespaceListerExpansion
}

// stateConfigurationNamespaceLister implements the StateConfigurationNamespaceLister
// interface.
type stateConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StateConfigurations in the indexer for a given namespace.
func (s stateConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StateConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StateConfiguration))
	})
	return ret, err
}

// Get retrieves the StateConfiguration from the indexer for a given namespace and name.
func (s stateConfigurationNamespaceLister) Get(name string) (*v1alpha1.StateConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("stateconfiguration"), name)
	}
	return obj.(*v1alpha1.StateConfiguration), nil
}
