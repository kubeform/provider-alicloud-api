/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/oos/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationGroupLister helps list ApplicationGroups.
// All objects returned here must be treated as read-only.
type ApplicationGroupLister interface {
	// List lists all ApplicationGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationGroup, err error)
	// ApplicationGroups returns an object that can list and get ApplicationGroups.
	ApplicationGroups(namespace string) ApplicationGroupNamespaceLister
	ApplicationGroupListerExpansion
}

// applicationGroupLister implements the ApplicationGroupLister interface.
type applicationGroupLister struct {
	indexer cache.Indexer
}

// NewApplicationGroupLister returns a new ApplicationGroupLister.
func NewApplicationGroupLister(indexer cache.Indexer) ApplicationGroupLister {
	return &applicationGroupLister{indexer: indexer}
}

// List lists all ApplicationGroups in the indexer.
func (s *applicationGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationGroup))
	})
	return ret, err
}

// ApplicationGroups returns an object that can list and get ApplicationGroups.
func (s *applicationGroupLister) ApplicationGroups(namespace string) ApplicationGroupNamespaceLister {
	return applicationGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationGroupNamespaceLister helps list and get ApplicationGroups.
// All objects returned here must be treated as read-only.
type ApplicationGroupNamespaceLister interface {
	// List lists all ApplicationGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationGroup, err error)
	// Get retrieves the ApplicationGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApplicationGroup, error)
	ApplicationGroupNamespaceListerExpansion
}

// applicationGroupNamespaceLister implements the ApplicationGroupNamespaceLister
// interface.
type applicationGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationGroups in the indexer for a given namespace.
func (s applicationGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationGroup))
	})
	return ret, err
}

// Get retrieves the ApplicationGroup from the indexer for a given namespace and name.
func (s applicationGroupNamespaceLister) Get(name string) (*v1alpha1.ApplicationGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationgroup"), name)
	}
	return obj.(*v1alpha1.ApplicationGroup), nil
}
