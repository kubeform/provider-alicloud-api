/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/oos/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceSettingLister helps list ServiceSettings.
// All objects returned here must be treated as read-only.
type ServiceSettingLister interface {
	// List lists all ServiceSettings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceSetting, err error)
	// ServiceSettings returns an object that can list and get ServiceSettings.
	ServiceSettings(namespace string) ServiceSettingNamespaceLister
	ServiceSettingListerExpansion
}

// serviceSettingLister implements the ServiceSettingLister interface.
type serviceSettingLister struct {
	indexer cache.Indexer
}

// NewServiceSettingLister returns a new ServiceSettingLister.
func NewServiceSettingLister(indexer cache.Indexer) ServiceSettingLister {
	return &serviceSettingLister{indexer: indexer}
}

// List lists all ServiceSettings in the indexer.
func (s *serviceSettingLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceSetting, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceSetting))
	})
	return ret, err
}

// ServiceSettings returns an object that can list and get ServiceSettings.
func (s *serviceSettingLister) ServiceSettings(namespace string) ServiceSettingNamespaceLister {
	return serviceSettingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceSettingNamespaceLister helps list and get ServiceSettings.
// All objects returned here must be treated as read-only.
type ServiceSettingNamespaceLister interface {
	// List lists all ServiceSettings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceSetting, err error)
	// Get retrieves the ServiceSetting from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceSetting, error)
	ServiceSettingNamespaceListerExpansion
}

// serviceSettingNamespaceLister implements the ServiceSettingNamespaceLister
// interface.
type serviceSettingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceSettings in the indexer for a given namespace.
func (s serviceSettingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceSetting, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceSetting))
	})
	return ret, err
}

// Get retrieves the ServiceSetting from the indexer for a given namespace and name.
func (s serviceSettingNamespaceLister) Get(name string) (*v1alpha1.ServiceSetting, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicesetting"), name)
	}
	return obj.(*v1alpha1.ServiceSetting), nil
}
