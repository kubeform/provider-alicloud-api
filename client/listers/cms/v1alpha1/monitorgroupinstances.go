/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MonitorGroupInstancesLister helps list MonitorGroupInstanceses.
// All objects returned here must be treated as read-only.
type MonitorGroupInstancesLister interface {
	// List lists all MonitorGroupInstanceses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MonitorGroupInstances, err error)
	// MonitorGroupInstanceses returns an object that can list and get MonitorGroupInstanceses.
	MonitorGroupInstanceses(namespace string) MonitorGroupInstancesNamespaceLister
	MonitorGroupInstancesListerExpansion
}

// monitorGroupInstancesLister implements the MonitorGroupInstancesLister interface.
type monitorGroupInstancesLister struct {
	indexer cache.Indexer
}

// NewMonitorGroupInstancesLister returns a new MonitorGroupInstancesLister.
func NewMonitorGroupInstancesLister(indexer cache.Indexer) MonitorGroupInstancesLister {
	return &monitorGroupInstancesLister{indexer: indexer}
}

// List lists all MonitorGroupInstanceses in the indexer.
func (s *monitorGroupInstancesLister) List(selector labels.Selector) (ret []*v1alpha1.MonitorGroupInstances, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitorGroupInstances))
	})
	return ret, err
}

// MonitorGroupInstanceses returns an object that can list and get MonitorGroupInstanceses.
func (s *monitorGroupInstancesLister) MonitorGroupInstanceses(namespace string) MonitorGroupInstancesNamespaceLister {
	return monitorGroupInstancesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MonitorGroupInstancesNamespaceLister helps list and get MonitorGroupInstanceses.
// All objects returned here must be treated as read-only.
type MonitorGroupInstancesNamespaceLister interface {
	// List lists all MonitorGroupInstanceses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MonitorGroupInstances, err error)
	// Get retrieves the MonitorGroupInstances from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MonitorGroupInstances, error)
	MonitorGroupInstancesNamespaceListerExpansion
}

// monitorGroupInstancesNamespaceLister implements the MonitorGroupInstancesNamespaceLister
// interface.
type monitorGroupInstancesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MonitorGroupInstanceses in the indexer for a given namespace.
func (s monitorGroupInstancesNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MonitorGroupInstances, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitorGroupInstances))
	})
	return ret, err
}

// Get retrieves the MonitorGroupInstances from the indexer for a given namespace and name.
func (s monitorGroupInstancesNamespaceLister) Get(name string) (*v1alpha1.MonitorGroupInstances, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("monitorgroupinstances"), name)
	}
	return obj.(*v1alpha1.MonitorGroupInstances), nil
}
