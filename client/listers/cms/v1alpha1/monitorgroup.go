/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MonitorGroupLister helps list MonitorGroups.
// All objects returned here must be treated as read-only.
type MonitorGroupLister interface {
	// List lists all MonitorGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MonitorGroup, err error)
	// MonitorGroups returns an object that can list and get MonitorGroups.
	MonitorGroups(namespace string) MonitorGroupNamespaceLister
	MonitorGroupListerExpansion
}

// monitorGroupLister implements the MonitorGroupLister interface.
type monitorGroupLister struct {
	indexer cache.Indexer
}

// NewMonitorGroupLister returns a new MonitorGroupLister.
func NewMonitorGroupLister(indexer cache.Indexer) MonitorGroupLister {
	return &monitorGroupLister{indexer: indexer}
}

// List lists all MonitorGroups in the indexer.
func (s *monitorGroupLister) List(selector labels.Selector) (ret []*v1alpha1.MonitorGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitorGroup))
	})
	return ret, err
}

// MonitorGroups returns an object that can list and get MonitorGroups.
func (s *monitorGroupLister) MonitorGroups(namespace string) MonitorGroupNamespaceLister {
	return monitorGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MonitorGroupNamespaceLister helps list and get MonitorGroups.
// All objects returned here must be treated as read-only.
type MonitorGroupNamespaceLister interface {
	// List lists all MonitorGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MonitorGroup, err error)
	// Get retrieves the MonitorGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MonitorGroup, error)
	MonitorGroupNamespaceListerExpansion
}

// monitorGroupNamespaceLister implements the MonitorGroupNamespaceLister
// interface.
type monitorGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MonitorGroups in the indexer for a given namespace.
func (s monitorGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MonitorGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitorGroup))
	})
	return ret, err
}

// Get retrieves the MonitorGroup from the indexer for a given namespace and name.
func (s monitorGroupNamespaceLister) Get(name string) (*v1alpha1.MonitorGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("monitorgroup"), name)
	}
	return obj.(*v1alpha1.MonitorGroup), nil
}
