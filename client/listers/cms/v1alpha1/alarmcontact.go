/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AlarmContactLister helps list AlarmContacts.
// All objects returned here must be treated as read-only.
type AlarmContactLister interface {
	// List lists all AlarmContacts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlarmContact, err error)
	// AlarmContacts returns an object that can list and get AlarmContacts.
	AlarmContacts(namespace string) AlarmContactNamespaceLister
	AlarmContactListerExpansion
}

// alarmContactLister implements the AlarmContactLister interface.
type alarmContactLister struct {
	indexer cache.Indexer
}

// NewAlarmContactLister returns a new AlarmContactLister.
func NewAlarmContactLister(indexer cache.Indexer) AlarmContactLister {
	return &alarmContactLister{indexer: indexer}
}

// List lists all AlarmContacts in the indexer.
func (s *alarmContactLister) List(selector labels.Selector) (ret []*v1alpha1.AlarmContact, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlarmContact))
	})
	return ret, err
}

// AlarmContacts returns an object that can list and get AlarmContacts.
func (s *alarmContactLister) AlarmContacts(namespace string) AlarmContactNamespaceLister {
	return alarmContactNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AlarmContactNamespaceLister helps list and get AlarmContacts.
// All objects returned here must be treated as read-only.
type AlarmContactNamespaceLister interface {
	// List lists all AlarmContacts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlarmContact, err error)
	// Get retrieves the AlarmContact from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AlarmContact, error)
	AlarmContactNamespaceListerExpansion
}

// alarmContactNamespaceLister implements the AlarmContactNamespaceLister
// interface.
type alarmContactNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AlarmContacts in the indexer for a given namespace.
func (s alarmContactNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AlarmContact, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlarmContact))
	})
	return ret, err
}

// Get retrieves the AlarmContact from the indexer for a given namespace and name.
func (s alarmContactNamespaceLister) Get(name string) (*v1alpha1.AlarmContact, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("alarmcontact"), name)
	}
	return obj.(*v1alpha1.AlarmContact), nil
}
