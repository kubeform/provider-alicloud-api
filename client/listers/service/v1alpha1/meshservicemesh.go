/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/service/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MeshServiceMeshLister helps list MeshServiceMeshes.
// All objects returned here must be treated as read-only.
type MeshServiceMeshLister interface {
	// List lists all MeshServiceMeshes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MeshServiceMesh, err error)
	// MeshServiceMeshes returns an object that can list and get MeshServiceMeshes.
	MeshServiceMeshes(namespace string) MeshServiceMeshNamespaceLister
	MeshServiceMeshListerExpansion
}

// meshServiceMeshLister implements the MeshServiceMeshLister interface.
type meshServiceMeshLister struct {
	indexer cache.Indexer
}

// NewMeshServiceMeshLister returns a new MeshServiceMeshLister.
func NewMeshServiceMeshLister(indexer cache.Indexer) MeshServiceMeshLister {
	return &meshServiceMeshLister{indexer: indexer}
}

// List lists all MeshServiceMeshes in the indexer.
func (s *meshServiceMeshLister) List(selector labels.Selector) (ret []*v1alpha1.MeshServiceMesh, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MeshServiceMesh))
	})
	return ret, err
}

// MeshServiceMeshes returns an object that can list and get MeshServiceMeshes.
func (s *meshServiceMeshLister) MeshServiceMeshes(namespace string) MeshServiceMeshNamespaceLister {
	return meshServiceMeshNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MeshServiceMeshNamespaceLister helps list and get MeshServiceMeshes.
// All objects returned here must be treated as read-only.
type MeshServiceMeshNamespaceLister interface {
	// List lists all MeshServiceMeshes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MeshServiceMesh, err error)
	// Get retrieves the MeshServiceMesh from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MeshServiceMesh, error)
	MeshServiceMeshNamespaceListerExpansion
}

// meshServiceMeshNamespaceLister implements the MeshServiceMeshNamespaceLister
// interface.
type meshServiceMeshNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MeshServiceMeshes in the indexer for a given namespace.
func (s meshServiceMeshNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MeshServiceMesh, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MeshServiceMesh))
	})
	return ret, err
}

// Get retrieves the MeshServiceMesh from the indexer for a given namespace and name.
func (s meshServiceMeshNamespaceLister) Get(name string) (*v1alpha1.MeshServiceMesh, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("meshservicemesh"), name)
	}
	return obj.(*v1alpha1.MeshServiceMesh), nil
}
