/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/quotas/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QuotaApplicationLister helps list QuotaApplications.
// All objects returned here must be treated as read-only.
type QuotaApplicationLister interface {
	// List lists all QuotaApplications in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QuotaApplication, err error)
	// QuotaApplications returns an object that can list and get QuotaApplications.
	QuotaApplications(namespace string) QuotaApplicationNamespaceLister
	QuotaApplicationListerExpansion
}

// quotaApplicationLister implements the QuotaApplicationLister interface.
type quotaApplicationLister struct {
	indexer cache.Indexer
}

// NewQuotaApplicationLister returns a new QuotaApplicationLister.
func NewQuotaApplicationLister(indexer cache.Indexer) QuotaApplicationLister {
	return &quotaApplicationLister{indexer: indexer}
}

// List lists all QuotaApplications in the indexer.
func (s *quotaApplicationLister) List(selector labels.Selector) (ret []*v1alpha1.QuotaApplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QuotaApplication))
	})
	return ret, err
}

// QuotaApplications returns an object that can list and get QuotaApplications.
func (s *quotaApplicationLister) QuotaApplications(namespace string) QuotaApplicationNamespaceLister {
	return quotaApplicationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QuotaApplicationNamespaceLister helps list and get QuotaApplications.
// All objects returned here must be treated as read-only.
type QuotaApplicationNamespaceLister interface {
	// List lists all QuotaApplications in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QuotaApplication, err error)
	// Get retrieves the QuotaApplication from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.QuotaApplication, error)
	QuotaApplicationNamespaceListerExpansion
}

// quotaApplicationNamespaceLister implements the QuotaApplicationNamespaceLister
// interface.
type quotaApplicationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QuotaApplications in the indexer for a given namespace.
func (s quotaApplicationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.QuotaApplication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QuotaApplication))
	})
	return ret, err
}

// Get retrieves the QuotaApplication from the indexer for a given namespace and name.
func (s quotaApplicationNamespaceLister) Get(name string) (*v1alpha1.QuotaApplication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("quotaapplication"), name)
	}
	return obj.(*v1alpha1.QuotaApplication), nil
}
