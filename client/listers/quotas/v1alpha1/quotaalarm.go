/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/quotas/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QuotaAlarmLister helps list QuotaAlarms.
// All objects returned here must be treated as read-only.
type QuotaAlarmLister interface {
	// List lists all QuotaAlarms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QuotaAlarm, err error)
	// QuotaAlarms returns an object that can list and get QuotaAlarms.
	QuotaAlarms(namespace string) QuotaAlarmNamespaceLister
	QuotaAlarmListerExpansion
}

// quotaAlarmLister implements the QuotaAlarmLister interface.
type quotaAlarmLister struct {
	indexer cache.Indexer
}

// NewQuotaAlarmLister returns a new QuotaAlarmLister.
func NewQuotaAlarmLister(indexer cache.Indexer) QuotaAlarmLister {
	return &quotaAlarmLister{indexer: indexer}
}

// List lists all QuotaAlarms in the indexer.
func (s *quotaAlarmLister) List(selector labels.Selector) (ret []*v1alpha1.QuotaAlarm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QuotaAlarm))
	})
	return ret, err
}

// QuotaAlarms returns an object that can list and get QuotaAlarms.
func (s *quotaAlarmLister) QuotaAlarms(namespace string) QuotaAlarmNamespaceLister {
	return quotaAlarmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QuotaAlarmNamespaceLister helps list and get QuotaAlarms.
// All objects returned here must be treated as read-only.
type QuotaAlarmNamespaceLister interface {
	// List lists all QuotaAlarms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QuotaAlarm, err error)
	// Get retrieves the QuotaAlarm from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.QuotaAlarm, error)
	QuotaAlarmNamespaceListerExpansion
}

// quotaAlarmNamespaceLister implements the QuotaAlarmNamespaceLister
// interface.
type quotaAlarmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QuotaAlarms in the indexer for a given namespace.
func (s quotaAlarmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.QuotaAlarm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QuotaAlarm))
	})
	return ret, err
}

// Get retrieves the QuotaAlarm from the indexer for a given namespace and name.
func (s quotaAlarmNamespaceLister) Get(name string) (*v1alpha1.QuotaAlarm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("quotaalarm"), name)
	}
	return obj.(*v1alpha1.QuotaAlarm), nil
}
