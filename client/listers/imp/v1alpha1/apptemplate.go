/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/imp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppTemplateLister helps list AppTemplates.
// All objects returned here must be treated as read-only.
type AppTemplateLister interface {
	// List lists all AppTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppTemplate, err error)
	// AppTemplates returns an object that can list and get AppTemplates.
	AppTemplates(namespace string) AppTemplateNamespaceLister
	AppTemplateListerExpansion
}

// appTemplateLister implements the AppTemplateLister interface.
type appTemplateLister struct {
	indexer cache.Indexer
}

// NewAppTemplateLister returns a new AppTemplateLister.
func NewAppTemplateLister(indexer cache.Indexer) AppTemplateLister {
	return &appTemplateLister{indexer: indexer}
}

// List lists all AppTemplates in the indexer.
func (s *appTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.AppTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppTemplate))
	})
	return ret, err
}

// AppTemplates returns an object that can list and get AppTemplates.
func (s *appTemplateLister) AppTemplates(namespace string) AppTemplateNamespaceLister {
	return appTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppTemplateNamespaceLister helps list and get AppTemplates.
// All objects returned here must be treated as read-only.
type AppTemplateNamespaceLister interface {
	// List lists all AppTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppTemplate, err error)
	// Get retrieves the AppTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppTemplate, error)
	AppTemplateNamespaceListerExpansion
}

// appTemplateNamespaceLister implements the AppTemplateNamespaceLister
// interface.
type appTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppTemplates in the indexer for a given namespace.
func (s appTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppTemplate))
	})
	return ret, err
}

// Get retrieves the AppTemplate from the indexer for a given namespace and name.
func (s appTemplateNamespaceLister) Get(name string) (*v1alpha1.AppTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apptemplate"), name)
	}
	return obj.(*v1alpha1.AppTemplate), nil
}
