/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/forward/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EntryLister helps list Entries.
// All objects returned here must be treated as read-only.
type EntryLister interface {
	// List lists all Entries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Entry, err error)
	// Entries returns an object that can list and get Entries.
	Entries(namespace string) EntryNamespaceLister
	EntryListerExpansion
}

// entryLister implements the EntryLister interface.
type entryLister struct {
	indexer cache.Indexer
}

// NewEntryLister returns a new EntryLister.
func NewEntryLister(indexer cache.Indexer) EntryLister {
	return &entryLister{indexer: indexer}
}

// List lists all Entries in the indexer.
func (s *entryLister) List(selector labels.Selector) (ret []*v1alpha1.Entry, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Entry))
	})
	return ret, err
}

// Entries returns an object that can list and get Entries.
func (s *entryLister) Entries(namespace string) EntryNamespaceLister {
	return entryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EntryNamespaceLister helps list and get Entries.
// All objects returned here must be treated as read-only.
type EntryNamespaceLister interface {
	// List lists all Entries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Entry, err error)
	// Get retrieves the Entry from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Entry, error)
	EntryNamespaceListerExpansion
}

// entryNamespaceLister implements the EntryNamespaceLister
// interface.
type entryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Entries in the indexer for a given namespace.
func (s entryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Entry, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Entry))
	})
	return ret, err
}

// Get retrieves the Entry from the indexer for a given namespace and name.
func (s entryNamespaceLister) Get(name string) (*v1alpha1.Entry, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("entry"), name)
	}
	return obj.(*v1alpha1.Entry), nil
}
