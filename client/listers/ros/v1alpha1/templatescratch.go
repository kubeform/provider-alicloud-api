/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ros/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TemplateScratchLister helps list TemplateScratches.
// All objects returned here must be treated as read-only.
type TemplateScratchLister interface {
	// List lists all TemplateScratches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TemplateScratch, err error)
	// TemplateScratches returns an object that can list and get TemplateScratches.
	TemplateScratches(namespace string) TemplateScratchNamespaceLister
	TemplateScratchListerExpansion
}

// templateScratchLister implements the TemplateScratchLister interface.
type templateScratchLister struct {
	indexer cache.Indexer
}

// NewTemplateScratchLister returns a new TemplateScratchLister.
func NewTemplateScratchLister(indexer cache.Indexer) TemplateScratchLister {
	return &templateScratchLister{indexer: indexer}
}

// List lists all TemplateScratches in the indexer.
func (s *templateScratchLister) List(selector labels.Selector) (ret []*v1alpha1.TemplateScratch, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TemplateScratch))
	})
	return ret, err
}

// TemplateScratches returns an object that can list and get TemplateScratches.
func (s *templateScratchLister) TemplateScratches(namespace string) TemplateScratchNamespaceLister {
	return templateScratchNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TemplateScratchNamespaceLister helps list and get TemplateScratches.
// All objects returned here must be treated as read-only.
type TemplateScratchNamespaceLister interface {
	// List lists all TemplateScratches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TemplateScratch, err error)
	// Get retrieves the TemplateScratch from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TemplateScratch, error)
	TemplateScratchNamespaceListerExpansion
}

// templateScratchNamespaceLister implements the TemplateScratchNamespaceLister
// interface.
type templateScratchNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TemplateScratches in the indexer for a given namespace.
func (s templateScratchNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TemplateScratch, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TemplateScratch))
	})
	return ret, err
}

// Get retrieves the TemplateScratch from the indexer for a given namespace and name.
func (s templateScratchNamespaceLister) Get(name string) (*v1alpha1.TemplateScratch, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("templatescratch"), name)
	}
	return obj.(*v1alpha1.TemplateScratch), nil
}
