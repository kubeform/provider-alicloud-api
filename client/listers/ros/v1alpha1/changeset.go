/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ros/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChangeSetLister helps list ChangeSets.
// All objects returned here must be treated as read-only.
type ChangeSetLister interface {
	// List lists all ChangeSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChangeSet, err error)
	// ChangeSets returns an object that can list and get ChangeSets.
	ChangeSets(namespace string) ChangeSetNamespaceLister
	ChangeSetListerExpansion
}

// changeSetLister implements the ChangeSetLister interface.
type changeSetLister struct {
	indexer cache.Indexer
}

// NewChangeSetLister returns a new ChangeSetLister.
func NewChangeSetLister(indexer cache.Indexer) ChangeSetLister {
	return &changeSetLister{indexer: indexer}
}

// List lists all ChangeSets in the indexer.
func (s *changeSetLister) List(selector labels.Selector) (ret []*v1alpha1.ChangeSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChangeSet))
	})
	return ret, err
}

// ChangeSets returns an object that can list and get ChangeSets.
func (s *changeSetLister) ChangeSets(namespace string) ChangeSetNamespaceLister {
	return changeSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChangeSetNamespaceLister helps list and get ChangeSets.
// All objects returned here must be treated as read-only.
type ChangeSetNamespaceLister interface {
	// List lists all ChangeSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChangeSet, err error)
	// Get retrieves the ChangeSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ChangeSet, error)
	ChangeSetNamespaceListerExpansion
}

// changeSetNamespaceLister implements the ChangeSetNamespaceLister
// interface.
type changeSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChangeSets in the indexer for a given namespace.
func (s changeSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChangeSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChangeSet))
	})
	return ret, err
}

// Get retrieves the ChangeSet from the indexer for a given namespace and name.
func (s changeSetNamespaceLister) Get(name string) (*v1alpha1.ChangeSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("changeset"), name)
	}
	return obj.(*v1alpha1.ChangeSet), nil
}
