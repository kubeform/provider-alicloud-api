/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/rds/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UpgradeDbInstanceLister helps list UpgradeDbInstances.
// All objects returned here must be treated as read-only.
type UpgradeDbInstanceLister interface {
	// List lists all UpgradeDbInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UpgradeDbInstance, err error)
	// UpgradeDbInstances returns an object that can list and get UpgradeDbInstances.
	UpgradeDbInstances(namespace string) UpgradeDbInstanceNamespaceLister
	UpgradeDbInstanceListerExpansion
}

// upgradeDbInstanceLister implements the UpgradeDbInstanceLister interface.
type upgradeDbInstanceLister struct {
	indexer cache.Indexer
}

// NewUpgradeDbInstanceLister returns a new UpgradeDbInstanceLister.
func NewUpgradeDbInstanceLister(indexer cache.Indexer) UpgradeDbInstanceLister {
	return &upgradeDbInstanceLister{indexer: indexer}
}

// List lists all UpgradeDbInstances in the indexer.
func (s *upgradeDbInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.UpgradeDbInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UpgradeDbInstance))
	})
	return ret, err
}

// UpgradeDbInstances returns an object that can list and get UpgradeDbInstances.
func (s *upgradeDbInstanceLister) UpgradeDbInstances(namespace string) UpgradeDbInstanceNamespaceLister {
	return upgradeDbInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UpgradeDbInstanceNamespaceLister helps list and get UpgradeDbInstances.
// All objects returned here must be treated as read-only.
type UpgradeDbInstanceNamespaceLister interface {
	// List lists all UpgradeDbInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UpgradeDbInstance, err error)
	// Get retrieves the UpgradeDbInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UpgradeDbInstance, error)
	UpgradeDbInstanceNamespaceListerExpansion
}

// upgradeDbInstanceNamespaceLister implements the UpgradeDbInstanceNamespaceLister
// interface.
type upgradeDbInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UpgradeDbInstances in the indexer for a given namespace.
func (s upgradeDbInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UpgradeDbInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UpgradeDbInstance))
	})
	return ret, err
}

// Get retrieves the UpgradeDbInstance from the indexer for a given namespace and name.
func (s upgradeDbInstanceNamespaceLister) Get(name string) (*v1alpha1.UpgradeDbInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("upgradedbinstance"), name)
	}
	return obj.(*v1alpha1.UpgradeDbInstance), nil
}
