/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/rds/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloneDbInstanceLister helps list CloneDbInstances.
// All objects returned here must be treated as read-only.
type CloneDbInstanceLister interface {
	// List lists all CloneDbInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloneDbInstance, err error)
	// CloneDbInstances returns an object that can list and get CloneDbInstances.
	CloneDbInstances(namespace string) CloneDbInstanceNamespaceLister
	CloneDbInstanceListerExpansion
}

// cloneDbInstanceLister implements the CloneDbInstanceLister interface.
type cloneDbInstanceLister struct {
	indexer cache.Indexer
}

// NewCloneDbInstanceLister returns a new CloneDbInstanceLister.
func NewCloneDbInstanceLister(indexer cache.Indexer) CloneDbInstanceLister {
	return &cloneDbInstanceLister{indexer: indexer}
}

// List lists all CloneDbInstances in the indexer.
func (s *cloneDbInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.CloneDbInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloneDbInstance))
	})
	return ret, err
}

// CloneDbInstances returns an object that can list and get CloneDbInstances.
func (s *cloneDbInstanceLister) CloneDbInstances(namespace string) CloneDbInstanceNamespaceLister {
	return cloneDbInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloneDbInstanceNamespaceLister helps list and get CloneDbInstances.
// All objects returned here must be treated as read-only.
type CloneDbInstanceNamespaceLister interface {
	// List lists all CloneDbInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloneDbInstance, err error)
	// Get retrieves the CloneDbInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CloneDbInstance, error)
	CloneDbInstanceNamespaceListerExpansion
}

// cloneDbInstanceNamespaceLister implements the CloneDbInstanceNamespaceLister
// interface.
type cloneDbInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloneDbInstances in the indexer for a given namespace.
func (s cloneDbInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloneDbInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloneDbInstance))
	})
	return ret, err
}

// Get retrieves the CloneDbInstance from the indexer for a given namespace and name.
func (s cloneDbInstanceNamespaceLister) Get(name string) (*v1alpha1.CloneDbInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clonedbinstance"), name)
	}
	return obj.(*v1alpha1.CloneDbInstance), nil
}
