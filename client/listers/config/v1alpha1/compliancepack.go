/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/config/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CompliancePackLister helps list CompliancePacks.
// All objects returned here must be treated as read-only.
type CompliancePackLister interface {
	// List lists all CompliancePacks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CompliancePack, err error)
	// CompliancePacks returns an object that can list and get CompliancePacks.
	CompliancePacks(namespace string) CompliancePackNamespaceLister
	CompliancePackListerExpansion
}

// compliancePackLister implements the CompliancePackLister interface.
type compliancePackLister struct {
	indexer cache.Indexer
}

// NewCompliancePackLister returns a new CompliancePackLister.
func NewCompliancePackLister(indexer cache.Indexer) CompliancePackLister {
	return &compliancePackLister{indexer: indexer}
}

// List lists all CompliancePacks in the indexer.
func (s *compliancePackLister) List(selector labels.Selector) (ret []*v1alpha1.CompliancePack, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CompliancePack))
	})
	return ret, err
}

// CompliancePacks returns an object that can list and get CompliancePacks.
func (s *compliancePackLister) CompliancePacks(namespace string) CompliancePackNamespaceLister {
	return compliancePackNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CompliancePackNamespaceLister helps list and get CompliancePacks.
// All objects returned here must be treated as read-only.
type CompliancePackNamespaceLister interface {
	// List lists all CompliancePacks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CompliancePack, err error)
	// Get retrieves the CompliancePack from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CompliancePack, error)
	CompliancePackNamespaceListerExpansion
}

// compliancePackNamespaceLister implements the CompliancePackNamespaceLister
// interface.
type compliancePackNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CompliancePacks in the indexer for a given namespace.
func (s compliancePackNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CompliancePack, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CompliancePack))
	})
	return ret, err
}

// Get retrieves the CompliancePack from the indexer for a given namespace and name.
func (s compliancePackNamespaceLister) Get(name string) (*v1alpha1.CompliancePack, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("compliancepack"), name)
	}
	return obj.(*v1alpha1.CompliancePack), nil
}
