/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/config/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AggregateCompliancePackLister helps list AggregateCompliancePacks.
// All objects returned here must be treated as read-only.
type AggregateCompliancePackLister interface {
	// List lists all AggregateCompliancePacks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AggregateCompliancePack, err error)
	// AggregateCompliancePacks returns an object that can list and get AggregateCompliancePacks.
	AggregateCompliancePacks(namespace string) AggregateCompliancePackNamespaceLister
	AggregateCompliancePackListerExpansion
}

// aggregateCompliancePackLister implements the AggregateCompliancePackLister interface.
type aggregateCompliancePackLister struct {
	indexer cache.Indexer
}

// NewAggregateCompliancePackLister returns a new AggregateCompliancePackLister.
func NewAggregateCompliancePackLister(indexer cache.Indexer) AggregateCompliancePackLister {
	return &aggregateCompliancePackLister{indexer: indexer}
}

// List lists all AggregateCompliancePacks in the indexer.
func (s *aggregateCompliancePackLister) List(selector labels.Selector) (ret []*v1alpha1.AggregateCompliancePack, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AggregateCompliancePack))
	})
	return ret, err
}

// AggregateCompliancePacks returns an object that can list and get AggregateCompliancePacks.
func (s *aggregateCompliancePackLister) AggregateCompliancePacks(namespace string) AggregateCompliancePackNamespaceLister {
	return aggregateCompliancePackNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AggregateCompliancePackNamespaceLister helps list and get AggregateCompliancePacks.
// All objects returned here must be treated as read-only.
type AggregateCompliancePackNamespaceLister interface {
	// List lists all AggregateCompliancePacks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AggregateCompliancePack, err error)
	// Get retrieves the AggregateCompliancePack from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AggregateCompliancePack, error)
	AggregateCompliancePackNamespaceListerExpansion
}

// aggregateCompliancePackNamespaceLister implements the AggregateCompliancePackNamespaceLister
// interface.
type aggregateCompliancePackNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AggregateCompliancePacks in the indexer for a given namespace.
func (s aggregateCompliancePackNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AggregateCompliancePack, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AggregateCompliancePack))
	})
	return ret, err
}

// Get retrieves the AggregateCompliancePack from the indexer for a given namespace and name.
func (s aggregateCompliancePackNamespaceLister) Get(name string) (*v1alpha1.AggregateCompliancePack, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aggregatecompliancepack"), name)
	}
	return obj.(*v1alpha1.AggregateCompliancePack), nil
}
