/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/config/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AggregatorLister helps list Aggregators.
// All objects returned here must be treated as read-only.
type AggregatorLister interface {
	// List lists all Aggregators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Aggregator, err error)
	// Aggregators returns an object that can list and get Aggregators.
	Aggregators(namespace string) AggregatorNamespaceLister
	AggregatorListerExpansion
}

// aggregatorLister implements the AggregatorLister interface.
type aggregatorLister struct {
	indexer cache.Indexer
}

// NewAggregatorLister returns a new AggregatorLister.
func NewAggregatorLister(indexer cache.Indexer) AggregatorLister {
	return &aggregatorLister{indexer: indexer}
}

// List lists all Aggregators in the indexer.
func (s *aggregatorLister) List(selector labels.Selector) (ret []*v1alpha1.Aggregator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Aggregator))
	})
	return ret, err
}

// Aggregators returns an object that can list and get Aggregators.
func (s *aggregatorLister) Aggregators(namespace string) AggregatorNamespaceLister {
	return aggregatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AggregatorNamespaceLister helps list and get Aggregators.
// All objects returned here must be treated as read-only.
type AggregatorNamespaceLister interface {
	// List lists all Aggregators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Aggregator, err error)
	// Get retrieves the Aggregator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Aggregator, error)
	AggregatorNamespaceListerExpansion
}

// aggregatorNamespaceLister implements the AggregatorNamespaceLister
// interface.
type aggregatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Aggregators in the indexer for a given namespace.
func (s aggregatorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Aggregator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Aggregator))
	})
	return ret, err
}

// Get retrieves the Aggregator from the indexer for a given namespace and name.
func (s aggregatorNamespaceLister) Get(name string) (*v1alpha1.Aggregator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aggregator"), name)
	}
	return obj.(*v1alpha1.Aggregator), nil
}
