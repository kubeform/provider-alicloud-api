/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/privatelink/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpcEndpointZoneLister helps list VpcEndpointZones.
// All objects returned here must be treated as read-only.
type VpcEndpointZoneLister interface {
	// List lists all VpcEndpointZones in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointZone, err error)
	// VpcEndpointZones returns an object that can list and get VpcEndpointZones.
	VpcEndpointZones(namespace string) VpcEndpointZoneNamespaceLister
	VpcEndpointZoneListerExpansion
}

// vpcEndpointZoneLister implements the VpcEndpointZoneLister interface.
type vpcEndpointZoneLister struct {
	indexer cache.Indexer
}

// NewVpcEndpointZoneLister returns a new VpcEndpointZoneLister.
func NewVpcEndpointZoneLister(indexer cache.Indexer) VpcEndpointZoneLister {
	return &vpcEndpointZoneLister{indexer: indexer}
}

// List lists all VpcEndpointZones in the indexer.
func (s *vpcEndpointZoneLister) List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointZone, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcEndpointZone))
	})
	return ret, err
}

// VpcEndpointZones returns an object that can list and get VpcEndpointZones.
func (s *vpcEndpointZoneLister) VpcEndpointZones(namespace string) VpcEndpointZoneNamespaceLister {
	return vpcEndpointZoneNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpcEndpointZoneNamespaceLister helps list and get VpcEndpointZones.
// All objects returned here must be treated as read-only.
type VpcEndpointZoneNamespaceLister interface {
	// List lists all VpcEndpointZones in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointZone, err error)
	// Get retrieves the VpcEndpointZone from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpcEndpointZone, error)
	VpcEndpointZoneNamespaceListerExpansion
}

// vpcEndpointZoneNamespaceLister implements the VpcEndpointZoneNamespaceLister
// interface.
type vpcEndpointZoneNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpcEndpointZones in the indexer for a given namespace.
func (s vpcEndpointZoneNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointZone, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcEndpointZone))
	})
	return ret, err
}

// Get retrieves the VpcEndpointZone from the indexer for a given namespace and name.
func (s vpcEndpointZoneNamespaceLister) Get(name string) (*v1alpha1.VpcEndpointZone, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpcendpointzone"), name)
	}
	return obj.(*v1alpha1.VpcEndpointZone), nil
}
