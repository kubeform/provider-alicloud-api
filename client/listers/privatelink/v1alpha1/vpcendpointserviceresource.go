/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/privatelink/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpcEndpointServiceResourceLister helps list VpcEndpointServiceResources.
// All objects returned here must be treated as read-only.
type VpcEndpointServiceResourceLister interface {
	// List lists all VpcEndpointServiceResources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointServiceResource, err error)
	// VpcEndpointServiceResources returns an object that can list and get VpcEndpointServiceResources.
	VpcEndpointServiceResources(namespace string) VpcEndpointServiceResourceNamespaceLister
	VpcEndpointServiceResourceListerExpansion
}

// vpcEndpointServiceResourceLister implements the VpcEndpointServiceResourceLister interface.
type vpcEndpointServiceResourceLister struct {
	indexer cache.Indexer
}

// NewVpcEndpointServiceResourceLister returns a new VpcEndpointServiceResourceLister.
func NewVpcEndpointServiceResourceLister(indexer cache.Indexer) VpcEndpointServiceResourceLister {
	return &vpcEndpointServiceResourceLister{indexer: indexer}
}

// List lists all VpcEndpointServiceResources in the indexer.
func (s *vpcEndpointServiceResourceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointServiceResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcEndpointServiceResource))
	})
	return ret, err
}

// VpcEndpointServiceResources returns an object that can list and get VpcEndpointServiceResources.
func (s *vpcEndpointServiceResourceLister) VpcEndpointServiceResources(namespace string) VpcEndpointServiceResourceNamespaceLister {
	return vpcEndpointServiceResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpcEndpointServiceResourceNamespaceLister helps list and get VpcEndpointServiceResources.
// All objects returned here must be treated as read-only.
type VpcEndpointServiceResourceNamespaceLister interface {
	// List lists all VpcEndpointServiceResources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointServiceResource, err error)
	// Get retrieves the VpcEndpointServiceResource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpcEndpointServiceResource, error)
	VpcEndpointServiceResourceNamespaceListerExpansion
}

// vpcEndpointServiceResourceNamespaceLister implements the VpcEndpointServiceResourceNamespaceLister
// interface.
type vpcEndpointServiceResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpcEndpointServiceResources in the indexer for a given namespace.
func (s vpcEndpointServiceResourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointServiceResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcEndpointServiceResource))
	})
	return ret, err
}

// Get retrieves the VpcEndpointServiceResource from the indexer for a given namespace and name.
func (s vpcEndpointServiceResourceNamespaceLister) Get(name string) (*v1alpha1.VpcEndpointServiceResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpcendpointserviceresource"), name)
	}
	return obj.(*v1alpha1.VpcEndpointServiceResource), nil
}
