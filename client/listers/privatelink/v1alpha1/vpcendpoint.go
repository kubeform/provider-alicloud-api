/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/privatelink/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpcEndpointLister helps list VpcEndpoints.
// All objects returned here must be treated as read-only.
type VpcEndpointLister interface {
	// List lists all VpcEndpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcEndpoint, err error)
	// VpcEndpoints returns an object that can list and get VpcEndpoints.
	VpcEndpoints(namespace string) VpcEndpointNamespaceLister
	VpcEndpointListerExpansion
}

// vpcEndpointLister implements the VpcEndpointLister interface.
type vpcEndpointLister struct {
	indexer cache.Indexer
}

// NewVpcEndpointLister returns a new VpcEndpointLister.
func NewVpcEndpointLister(indexer cache.Indexer) VpcEndpointLister {
	return &vpcEndpointLister{indexer: indexer}
}

// List lists all VpcEndpoints in the indexer.
func (s *vpcEndpointLister) List(selector labels.Selector) (ret []*v1alpha1.VpcEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcEndpoint))
	})
	return ret, err
}

// VpcEndpoints returns an object that can list and get VpcEndpoints.
func (s *vpcEndpointLister) VpcEndpoints(namespace string) VpcEndpointNamespaceLister {
	return vpcEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpcEndpointNamespaceLister helps list and get VpcEndpoints.
// All objects returned here must be treated as read-only.
type VpcEndpointNamespaceLister interface {
	// List lists all VpcEndpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcEndpoint, err error)
	// Get retrieves the VpcEndpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpcEndpoint, error)
	VpcEndpointNamespaceListerExpansion
}

// vpcEndpointNamespaceLister implements the VpcEndpointNamespaceLister
// interface.
type vpcEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpcEndpoints in the indexer for a given namespace.
func (s vpcEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcEndpoint))
	})
	return ret, err
}

// Get retrieves the VpcEndpoint from the indexer for a given namespace and name.
func (s vpcEndpointNamespaceLister) Get(name string) (*v1alpha1.VpcEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpcendpoint"), name)
	}
	return obj.(*v1alpha1.VpcEndpoint), nil
}
