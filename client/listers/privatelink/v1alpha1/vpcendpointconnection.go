/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/privatelink/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpcEndpointConnectionLister helps list VpcEndpointConnections.
// All objects returned here must be treated as read-only.
type VpcEndpointConnectionLister interface {
	// List lists all VpcEndpointConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointConnection, err error)
	// VpcEndpointConnections returns an object that can list and get VpcEndpointConnections.
	VpcEndpointConnections(namespace string) VpcEndpointConnectionNamespaceLister
	VpcEndpointConnectionListerExpansion
}

// vpcEndpointConnectionLister implements the VpcEndpointConnectionLister interface.
type vpcEndpointConnectionLister struct {
	indexer cache.Indexer
}

// NewVpcEndpointConnectionLister returns a new VpcEndpointConnectionLister.
func NewVpcEndpointConnectionLister(indexer cache.Indexer) VpcEndpointConnectionLister {
	return &vpcEndpointConnectionLister{indexer: indexer}
}

// List lists all VpcEndpointConnections in the indexer.
func (s *vpcEndpointConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcEndpointConnection))
	})
	return ret, err
}

// VpcEndpointConnections returns an object that can list and get VpcEndpointConnections.
func (s *vpcEndpointConnectionLister) VpcEndpointConnections(namespace string) VpcEndpointConnectionNamespaceLister {
	return vpcEndpointConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpcEndpointConnectionNamespaceLister helps list and get VpcEndpointConnections.
// All objects returned here must be treated as read-only.
type VpcEndpointConnectionNamespaceLister interface {
	// List lists all VpcEndpointConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointConnection, err error)
	// Get retrieves the VpcEndpointConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpcEndpointConnection, error)
	VpcEndpointConnectionNamespaceListerExpansion
}

// vpcEndpointConnectionNamespaceLister implements the VpcEndpointConnectionNamespaceLister
// interface.
type vpcEndpointConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpcEndpointConnections in the indexer for a given namespace.
func (s vpcEndpointConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcEndpointConnection))
	})
	return ret, err
}

// Get retrieves the VpcEndpointConnection from the indexer for a given namespace and name.
func (s vpcEndpointConnectionNamespaceLister) Get(name string) (*v1alpha1.VpcEndpointConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpcendpointconnection"), name)
	}
	return obj.(*v1alpha1.VpcEndpointConnection), nil
}
