/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/privatelink/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpcEndpointServiceLister helps list VpcEndpointServices.
// All objects returned here must be treated as read-only.
type VpcEndpointServiceLister interface {
	// List lists all VpcEndpointServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointService, err error)
	// VpcEndpointServices returns an object that can list and get VpcEndpointServices.
	VpcEndpointServices(namespace string) VpcEndpointServiceNamespaceLister
	VpcEndpointServiceListerExpansion
}

// vpcEndpointServiceLister implements the VpcEndpointServiceLister interface.
type vpcEndpointServiceLister struct {
	indexer cache.Indexer
}

// NewVpcEndpointServiceLister returns a new VpcEndpointServiceLister.
func NewVpcEndpointServiceLister(indexer cache.Indexer) VpcEndpointServiceLister {
	return &vpcEndpointServiceLister{indexer: indexer}
}

// List lists all VpcEndpointServices in the indexer.
func (s *vpcEndpointServiceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcEndpointService))
	})
	return ret, err
}

// VpcEndpointServices returns an object that can list and get VpcEndpointServices.
func (s *vpcEndpointServiceLister) VpcEndpointServices(namespace string) VpcEndpointServiceNamespaceLister {
	return vpcEndpointServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpcEndpointServiceNamespaceLister helps list and get VpcEndpointServices.
// All objects returned here must be treated as read-only.
type VpcEndpointServiceNamespaceLister interface {
	// List lists all VpcEndpointServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointService, err error)
	// Get retrieves the VpcEndpointService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpcEndpointService, error)
	VpcEndpointServiceNamespaceListerExpansion
}

// vpcEndpointServiceNamespaceLister implements the VpcEndpointServiceNamespaceLister
// interface.
type vpcEndpointServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpcEndpointServices in the indexer for a given namespace.
func (s vpcEndpointServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcEndpointService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcEndpointService))
	})
	return ret, err
}

// Get retrieves the VpcEndpointService from the indexer for a given namespace and name.
func (s vpcEndpointServiceNamespaceLister) Get(name string) (*v1alpha1.VpcEndpointService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpcendpointservice"), name)
	}
	return obj.(*v1alpha1.VpcEndpointService), nil
}
