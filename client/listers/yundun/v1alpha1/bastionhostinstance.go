/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/yundun/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BastionhostInstanceLister helps list BastionhostInstances.
// All objects returned here must be treated as read-only.
type BastionhostInstanceLister interface {
	// List lists all BastionhostInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BastionhostInstance, err error)
	// BastionhostInstances returns an object that can list and get BastionhostInstances.
	BastionhostInstances(namespace string) BastionhostInstanceNamespaceLister
	BastionhostInstanceListerExpansion
}

// bastionhostInstanceLister implements the BastionhostInstanceLister interface.
type bastionhostInstanceLister struct {
	indexer cache.Indexer
}

// NewBastionhostInstanceLister returns a new BastionhostInstanceLister.
func NewBastionhostInstanceLister(indexer cache.Indexer) BastionhostInstanceLister {
	return &bastionhostInstanceLister{indexer: indexer}
}

// List lists all BastionhostInstances in the indexer.
func (s *bastionhostInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.BastionhostInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BastionhostInstance))
	})
	return ret, err
}

// BastionhostInstances returns an object that can list and get BastionhostInstances.
func (s *bastionhostInstanceLister) BastionhostInstances(namespace string) BastionhostInstanceNamespaceLister {
	return bastionhostInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BastionhostInstanceNamespaceLister helps list and get BastionhostInstances.
// All objects returned here must be treated as read-only.
type BastionhostInstanceNamespaceLister interface {
	// List lists all BastionhostInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BastionhostInstance, err error)
	// Get retrieves the BastionhostInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BastionhostInstance, error)
	BastionhostInstanceNamespaceListerExpansion
}

// bastionhostInstanceNamespaceLister implements the BastionhostInstanceNamespaceLister
// interface.
type bastionhostInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BastionhostInstances in the indexer for a given namespace.
func (s bastionhostInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BastionhostInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BastionhostInstance))
	})
	return ret, err
}

// Get retrieves the BastionhostInstance from the indexer for a given namespace and name.
func (s bastionhostInstanceNamespaceLister) Get(name string) (*v1alpha1.BastionhostInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bastionhostinstance"), name)
	}
	return obj.(*v1alpha1.BastionhostInstance), nil
}
