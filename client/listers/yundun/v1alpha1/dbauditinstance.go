/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/yundun/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DbauditInstanceLister helps list DbauditInstances.
// All objects returned here must be treated as read-only.
type DbauditInstanceLister interface {
	// List lists all DbauditInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DbauditInstance, err error)
	// DbauditInstances returns an object that can list and get DbauditInstances.
	DbauditInstances(namespace string) DbauditInstanceNamespaceLister
	DbauditInstanceListerExpansion
}

// dbauditInstanceLister implements the DbauditInstanceLister interface.
type dbauditInstanceLister struct {
	indexer cache.Indexer
}

// NewDbauditInstanceLister returns a new DbauditInstanceLister.
func NewDbauditInstanceLister(indexer cache.Indexer) DbauditInstanceLister {
	return &dbauditInstanceLister{indexer: indexer}
}

// List lists all DbauditInstances in the indexer.
func (s *dbauditInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.DbauditInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DbauditInstance))
	})
	return ret, err
}

// DbauditInstances returns an object that can list and get DbauditInstances.
func (s *dbauditInstanceLister) DbauditInstances(namespace string) DbauditInstanceNamespaceLister {
	return dbauditInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DbauditInstanceNamespaceLister helps list and get DbauditInstances.
// All objects returned here must be treated as read-only.
type DbauditInstanceNamespaceLister interface {
	// List lists all DbauditInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DbauditInstance, err error)
	// Get retrieves the DbauditInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DbauditInstance, error)
	DbauditInstanceNamespaceListerExpansion
}

// dbauditInstanceNamespaceLister implements the DbauditInstanceNamespaceLister
// interface.
type dbauditInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DbauditInstances in the indexer for a given namespace.
func (s dbauditInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DbauditInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DbauditInstance))
	})
	return ret, err
}

// Get retrieves the DbauditInstance from the indexer for a given namespace and name.
func (s dbauditInstanceNamespaceLister) Get(name string) (*v1alpha1.DbauditInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dbauditinstance"), name)
	}
	return obj.(*v1alpha1.DbauditInstance), nil
}
