/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/dfs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccessRuleLister helps list AccessRules.
// All objects returned here must be treated as read-only.
type AccessRuleLister interface {
	// List lists all AccessRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessRule, err error)
	// AccessRules returns an object that can list and get AccessRules.
	AccessRules(namespace string) AccessRuleNamespaceLister
	AccessRuleListerExpansion
}

// accessRuleLister implements the AccessRuleLister interface.
type accessRuleLister struct {
	indexer cache.Indexer
}

// NewAccessRuleLister returns a new AccessRuleLister.
func NewAccessRuleLister(indexer cache.Indexer) AccessRuleLister {
	return &accessRuleLister{indexer: indexer}
}

// List lists all AccessRules in the indexer.
func (s *accessRuleLister) List(selector labels.Selector) (ret []*v1alpha1.AccessRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessRule))
	})
	return ret, err
}

// AccessRules returns an object that can list and get AccessRules.
func (s *accessRuleLister) AccessRules(namespace string) AccessRuleNamespaceLister {
	return accessRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccessRuleNamespaceLister helps list and get AccessRules.
// All objects returned here must be treated as read-only.
type AccessRuleNamespaceLister interface {
	// List lists all AccessRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessRule, err error)
	// Get retrieves the AccessRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccessRule, error)
	AccessRuleNamespaceListerExpansion
}

// accessRuleNamespaceLister implements the AccessRuleNamespaceLister
// interface.
type accessRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccessRules in the indexer for a given namespace.
func (s accessRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccessRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessRule))
	})
	return ret, err
}

// Get retrieves the AccessRule from the indexer for a given namespace and name.
func (s accessRuleNamespaceLister) Get(name string) (*v1alpha1.AccessRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accessrule"), name)
	}
	return obj.(*v1alpha1.AccessRule), nil
}
