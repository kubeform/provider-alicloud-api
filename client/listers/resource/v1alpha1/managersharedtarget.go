/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/resource/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerSharedTargetLister helps list ManagerSharedTargets.
// All objects returned here must be treated as read-only.
type ManagerSharedTargetLister interface {
	// List lists all ManagerSharedTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerSharedTarget, err error)
	// ManagerSharedTargets returns an object that can list and get ManagerSharedTargets.
	ManagerSharedTargets(namespace string) ManagerSharedTargetNamespaceLister
	ManagerSharedTargetListerExpansion
}

// managerSharedTargetLister implements the ManagerSharedTargetLister interface.
type managerSharedTargetLister struct {
	indexer cache.Indexer
}

// NewManagerSharedTargetLister returns a new ManagerSharedTargetLister.
func NewManagerSharedTargetLister(indexer cache.Indexer) ManagerSharedTargetLister {
	return &managerSharedTargetLister{indexer: indexer}
}

// List lists all ManagerSharedTargets in the indexer.
func (s *managerSharedTargetLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerSharedTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerSharedTarget))
	})
	return ret, err
}

// ManagerSharedTargets returns an object that can list and get ManagerSharedTargets.
func (s *managerSharedTargetLister) ManagerSharedTargets(namespace string) ManagerSharedTargetNamespaceLister {
	return managerSharedTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerSharedTargetNamespaceLister helps list and get ManagerSharedTargets.
// All objects returned here must be treated as read-only.
type ManagerSharedTargetNamespaceLister interface {
	// List lists all ManagerSharedTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerSharedTarget, err error)
	// Get retrieves the ManagerSharedTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerSharedTarget, error)
	ManagerSharedTargetNamespaceListerExpansion
}

// managerSharedTargetNamespaceLister implements the ManagerSharedTargetNamespaceLister
// interface.
type managerSharedTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerSharedTargets in the indexer for a given namespace.
func (s managerSharedTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerSharedTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerSharedTarget))
	})
	return ret, err
}

// Get retrieves the ManagerSharedTarget from the indexer for a given namespace and name.
func (s managerSharedTargetNamespaceLister) Get(name string) (*v1alpha1.ManagerSharedTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managersharedtarget"), name)
	}
	return obj.(*v1alpha1.ManagerSharedTarget), nil
}
