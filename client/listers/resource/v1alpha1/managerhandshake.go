/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/resource/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerHandshakeLister helps list ManagerHandshakes.
// All objects returned here must be treated as read-only.
type ManagerHandshakeLister interface {
	// List lists all ManagerHandshakes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerHandshake, err error)
	// ManagerHandshakes returns an object that can list and get ManagerHandshakes.
	ManagerHandshakes(namespace string) ManagerHandshakeNamespaceLister
	ManagerHandshakeListerExpansion
}

// managerHandshakeLister implements the ManagerHandshakeLister interface.
type managerHandshakeLister struct {
	indexer cache.Indexer
}

// NewManagerHandshakeLister returns a new ManagerHandshakeLister.
func NewManagerHandshakeLister(indexer cache.Indexer) ManagerHandshakeLister {
	return &managerHandshakeLister{indexer: indexer}
}

// List lists all ManagerHandshakes in the indexer.
func (s *managerHandshakeLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerHandshake, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerHandshake))
	})
	return ret, err
}

// ManagerHandshakes returns an object that can list and get ManagerHandshakes.
func (s *managerHandshakeLister) ManagerHandshakes(namespace string) ManagerHandshakeNamespaceLister {
	return managerHandshakeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerHandshakeNamespaceLister helps list and get ManagerHandshakes.
// All objects returned here must be treated as read-only.
type ManagerHandshakeNamespaceLister interface {
	// List lists all ManagerHandshakes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerHandshake, err error)
	// Get retrieves the ManagerHandshake from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerHandshake, error)
	ManagerHandshakeNamespaceListerExpansion
}

// managerHandshakeNamespaceLister implements the ManagerHandshakeNamespaceLister
// interface.
type managerHandshakeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerHandshakes in the indexer for a given namespace.
func (s managerHandshakeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerHandshake, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerHandshake))
	})
	return ret, err
}

// Get retrieves the ManagerHandshake from the indexer for a given namespace and name.
func (s managerHandshakeNamespaceLister) Get(name string) (*v1alpha1.ManagerHandshake, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managerhandshake"), name)
	}
	return obj.(*v1alpha1.ManagerHandshake), nil
}
