/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/resource/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerPolicyAttachmentLister helps list ManagerPolicyAttachments.
// All objects returned here must be treated as read-only.
type ManagerPolicyAttachmentLister interface {
	// List lists all ManagerPolicyAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerPolicyAttachment, err error)
	// ManagerPolicyAttachments returns an object that can list and get ManagerPolicyAttachments.
	ManagerPolicyAttachments(namespace string) ManagerPolicyAttachmentNamespaceLister
	ManagerPolicyAttachmentListerExpansion
}

// managerPolicyAttachmentLister implements the ManagerPolicyAttachmentLister interface.
type managerPolicyAttachmentLister struct {
	indexer cache.Indexer
}

// NewManagerPolicyAttachmentLister returns a new ManagerPolicyAttachmentLister.
func NewManagerPolicyAttachmentLister(indexer cache.Indexer) ManagerPolicyAttachmentLister {
	return &managerPolicyAttachmentLister{indexer: indexer}
}

// List lists all ManagerPolicyAttachments in the indexer.
func (s *managerPolicyAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerPolicyAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerPolicyAttachment))
	})
	return ret, err
}

// ManagerPolicyAttachments returns an object that can list and get ManagerPolicyAttachments.
func (s *managerPolicyAttachmentLister) ManagerPolicyAttachments(namespace string) ManagerPolicyAttachmentNamespaceLister {
	return managerPolicyAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerPolicyAttachmentNamespaceLister helps list and get ManagerPolicyAttachments.
// All objects returned here must be treated as read-only.
type ManagerPolicyAttachmentNamespaceLister interface {
	// List lists all ManagerPolicyAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerPolicyAttachment, err error)
	// Get retrieves the ManagerPolicyAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerPolicyAttachment, error)
	ManagerPolicyAttachmentNamespaceListerExpansion
}

// managerPolicyAttachmentNamespaceLister implements the ManagerPolicyAttachmentNamespaceLister
// interface.
type managerPolicyAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerPolicyAttachments in the indexer for a given namespace.
func (s managerPolicyAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerPolicyAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerPolicyAttachment))
	})
	return ret, err
}

// Get retrieves the ManagerPolicyAttachment from the indexer for a given namespace and name.
func (s managerPolicyAttachmentNamespaceLister) Get(name string) (*v1alpha1.ManagerPolicyAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managerpolicyattachment"), name)
	}
	return obj.(*v1alpha1.ManagerPolicyAttachment), nil
}
