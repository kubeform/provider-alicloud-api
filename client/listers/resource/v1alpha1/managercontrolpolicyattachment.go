/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/resource/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerControlPolicyAttachmentLister helps list ManagerControlPolicyAttachments.
// All objects returned here must be treated as read-only.
type ManagerControlPolicyAttachmentLister interface {
	// List lists all ManagerControlPolicyAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerControlPolicyAttachment, err error)
	// ManagerControlPolicyAttachments returns an object that can list and get ManagerControlPolicyAttachments.
	ManagerControlPolicyAttachments(namespace string) ManagerControlPolicyAttachmentNamespaceLister
	ManagerControlPolicyAttachmentListerExpansion
}

// managerControlPolicyAttachmentLister implements the ManagerControlPolicyAttachmentLister interface.
type managerControlPolicyAttachmentLister struct {
	indexer cache.Indexer
}

// NewManagerControlPolicyAttachmentLister returns a new ManagerControlPolicyAttachmentLister.
func NewManagerControlPolicyAttachmentLister(indexer cache.Indexer) ManagerControlPolicyAttachmentLister {
	return &managerControlPolicyAttachmentLister{indexer: indexer}
}

// List lists all ManagerControlPolicyAttachments in the indexer.
func (s *managerControlPolicyAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerControlPolicyAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerControlPolicyAttachment))
	})
	return ret, err
}

// ManagerControlPolicyAttachments returns an object that can list and get ManagerControlPolicyAttachments.
func (s *managerControlPolicyAttachmentLister) ManagerControlPolicyAttachments(namespace string) ManagerControlPolicyAttachmentNamespaceLister {
	return managerControlPolicyAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerControlPolicyAttachmentNamespaceLister helps list and get ManagerControlPolicyAttachments.
// All objects returned here must be treated as read-only.
type ManagerControlPolicyAttachmentNamespaceLister interface {
	// List lists all ManagerControlPolicyAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerControlPolicyAttachment, err error)
	// Get retrieves the ManagerControlPolicyAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerControlPolicyAttachment, error)
	ManagerControlPolicyAttachmentNamespaceListerExpansion
}

// managerControlPolicyAttachmentNamespaceLister implements the ManagerControlPolicyAttachmentNamespaceLister
// interface.
type managerControlPolicyAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerControlPolicyAttachments in the indexer for a given namespace.
func (s managerControlPolicyAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerControlPolicyAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerControlPolicyAttachment))
	})
	return ret, err
}

// Get retrieves the ManagerControlPolicyAttachment from the indexer for a given namespace and name.
func (s managerControlPolicyAttachmentNamespaceLister) Get(name string) (*v1alpha1.ManagerControlPolicyAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managercontrolpolicyattachment"), name)
	}
	return obj.(*v1alpha1.ManagerControlPolicyAttachment), nil
}
