/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/resource/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerAccountLister helps list ManagerAccounts.
// All objects returned here must be treated as read-only.
type ManagerAccountLister interface {
	// List lists all ManagerAccounts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerAccount, err error)
	// ManagerAccounts returns an object that can list and get ManagerAccounts.
	ManagerAccounts(namespace string) ManagerAccountNamespaceLister
	ManagerAccountListerExpansion
}

// managerAccountLister implements the ManagerAccountLister interface.
type managerAccountLister struct {
	indexer cache.Indexer
}

// NewManagerAccountLister returns a new ManagerAccountLister.
func NewManagerAccountLister(indexer cache.Indexer) ManagerAccountLister {
	return &managerAccountLister{indexer: indexer}
}

// List lists all ManagerAccounts in the indexer.
func (s *managerAccountLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerAccount))
	})
	return ret, err
}

// ManagerAccounts returns an object that can list and get ManagerAccounts.
func (s *managerAccountLister) ManagerAccounts(namespace string) ManagerAccountNamespaceLister {
	return managerAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerAccountNamespaceLister helps list and get ManagerAccounts.
// All objects returned here must be treated as read-only.
type ManagerAccountNamespaceLister interface {
	// List lists all ManagerAccounts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerAccount, err error)
	// Get retrieves the ManagerAccount from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerAccount, error)
	ManagerAccountNamespaceListerExpansion
}

// managerAccountNamespaceLister implements the ManagerAccountNamespaceLister
// interface.
type managerAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerAccounts in the indexer for a given namespace.
func (s managerAccountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerAccount))
	})
	return ret, err
}

// Get retrieves the ManagerAccount from the indexer for a given namespace and name.
func (s managerAccountNamespaceLister) Get(name string) (*v1alpha1.ManagerAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("manageraccount"), name)
	}
	return obj.(*v1alpha1.ManagerAccount), nil
}
