/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/vswitch/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VswitchLister helps list Vswitches.
// All objects returned here must be treated as read-only.
type VswitchLister interface {
	// List lists all Vswitches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Vswitch, err error)
	// Vswitches returns an object that can list and get Vswitches.
	Vswitches(namespace string) VswitchNamespaceLister
	VswitchListerExpansion
}

// vswitchLister implements the VswitchLister interface.
type vswitchLister struct {
	indexer cache.Indexer
}

// NewVswitchLister returns a new VswitchLister.
func NewVswitchLister(indexer cache.Indexer) VswitchLister {
	return &vswitchLister{indexer: indexer}
}

// List lists all Vswitches in the indexer.
func (s *vswitchLister) List(selector labels.Selector) (ret []*v1alpha1.Vswitch, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Vswitch))
	})
	return ret, err
}

// Vswitches returns an object that can list and get Vswitches.
func (s *vswitchLister) Vswitches(namespace string) VswitchNamespaceLister {
	return vswitchNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VswitchNamespaceLister helps list and get Vswitches.
// All objects returned here must be treated as read-only.
type VswitchNamespaceLister interface {
	// List lists all Vswitches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Vswitch, err error)
	// Get retrieves the Vswitch from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Vswitch, error)
	VswitchNamespaceListerExpansion
}

// vswitchNamespaceLister implements the VswitchNamespaceLister
// interface.
type vswitchNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Vswitches in the indexer for a given namespace.
func (s vswitchNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Vswitch, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Vswitch))
	})
	return ret, err
}

// Get retrieves the Vswitch from the indexer for a given namespace and name.
func (s vswitchNamespaceLister) Get(name string) (*v1alpha1.Vswitch, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vswitch"), name)
	}
	return obj.(*v1alpha1.Vswitch), nil
}
