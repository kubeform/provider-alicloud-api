/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/log/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OssShipperLister helps list OssShippers.
// All objects returned here must be treated as read-only.
type OssShipperLister interface {
	// List lists all OssShippers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OssShipper, err error)
	// OssShippers returns an object that can list and get OssShippers.
	OssShippers(namespace string) OssShipperNamespaceLister
	OssShipperListerExpansion
}

// ossShipperLister implements the OssShipperLister interface.
type ossShipperLister struct {
	indexer cache.Indexer
}

// NewOssShipperLister returns a new OssShipperLister.
func NewOssShipperLister(indexer cache.Indexer) OssShipperLister {
	return &ossShipperLister{indexer: indexer}
}

// List lists all OssShippers in the indexer.
func (s *ossShipperLister) List(selector labels.Selector) (ret []*v1alpha1.OssShipper, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OssShipper))
	})
	return ret, err
}

// OssShippers returns an object that can list and get OssShippers.
func (s *ossShipperLister) OssShippers(namespace string) OssShipperNamespaceLister {
	return ossShipperNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OssShipperNamespaceLister helps list and get OssShippers.
// All objects returned here must be treated as read-only.
type OssShipperNamespaceLister interface {
	// List lists all OssShippers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OssShipper, err error)
	// Get retrieves the OssShipper from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OssShipper, error)
	OssShipperNamespaceListerExpansion
}

// ossShipperNamespaceLister implements the OssShipperNamespaceLister
// interface.
type ossShipperNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OssShippers in the indexer for a given namespace.
func (s ossShipperNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OssShipper, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OssShipper))
	})
	return ret, err
}

// Get retrieves the OssShipper from the indexer for a given namespace and name.
func (s ossShipperNamespaceLister) Get(name string) (*v1alpha1.OssShipper, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ossshipper"), name)
	}
	return obj.(*v1alpha1.OssShipper), nil
}
