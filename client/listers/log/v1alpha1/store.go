/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/log/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StoreLister helps list Stores.
// All objects returned here must be treated as read-only.
type StoreLister interface {
	// List lists all Stores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Store, err error)
	// Stores returns an object that can list and get Stores.
	Stores(namespace string) StoreNamespaceLister
	StoreListerExpansion
}

// storeLister implements the StoreLister interface.
type storeLister struct {
	indexer cache.Indexer
}

// NewStoreLister returns a new StoreLister.
func NewStoreLister(indexer cache.Indexer) StoreLister {
	return &storeLister{indexer: indexer}
}

// List lists all Stores in the indexer.
func (s *storeLister) List(selector labels.Selector) (ret []*v1alpha1.Store, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Store))
	})
	return ret, err
}

// Stores returns an object that can list and get Stores.
func (s *storeLister) Stores(namespace string) StoreNamespaceLister {
	return storeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StoreNamespaceLister helps list and get Stores.
// All objects returned here must be treated as read-only.
type StoreNamespaceLister interface {
	// List lists all Stores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Store, err error)
	// Get retrieves the Store from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Store, error)
	StoreNamespaceListerExpansion
}

// storeNamespaceLister implements the StoreNamespaceLister
// interface.
type storeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Stores in the indexer for a given namespace.
func (s storeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Store, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Store))
	})
	return ret, err
}

// Get retrieves the Store from the indexer for a given namespace and name.
func (s storeNamespaceLister) Get(name string) (*v1alpha1.Store, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("store"), name)
	}
	return obj.(*v1alpha1.Store), nil
}
