/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/log/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuditLister helps list Audits.
// All objects returned here must be treated as read-only.
type AuditLister interface {
	// List lists all Audits in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Audit, err error)
	// Audits returns an object that can list and get Audits.
	Audits(namespace string) AuditNamespaceLister
	AuditListerExpansion
}

// auditLister implements the AuditLister interface.
type auditLister struct {
	indexer cache.Indexer
}

// NewAuditLister returns a new AuditLister.
func NewAuditLister(indexer cache.Indexer) AuditLister {
	return &auditLister{indexer: indexer}
}

// List lists all Audits in the indexer.
func (s *auditLister) List(selector labels.Selector) (ret []*v1alpha1.Audit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Audit))
	})
	return ret, err
}

// Audits returns an object that can list and get Audits.
func (s *auditLister) Audits(namespace string) AuditNamespaceLister {
	return auditNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuditNamespaceLister helps list and get Audits.
// All objects returned here must be treated as read-only.
type AuditNamespaceLister interface {
	// List lists all Audits in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Audit, err error)
	// Get retrieves the Audit from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Audit, error)
	AuditNamespaceListerExpansion
}

// auditNamespaceLister implements the AuditNamespaceLister
// interface.
type auditNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Audits in the indexer for a given namespace.
func (s auditNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Audit, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Audit))
	})
	return ret, err
}

// Get retrieves the Audit from the indexer for a given namespace and name.
func (s auditNamespaceLister) Get(name string) (*v1alpha1.Audit, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("audit"), name)
	}
	return obj.(*v1alpha1.Audit), nil
}
