/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/log/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StoreIndexLister helps list StoreIndexes.
// All objects returned here must be treated as read-only.
type StoreIndexLister interface {
	// List lists all StoreIndexes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StoreIndex, err error)
	// StoreIndexes returns an object that can list and get StoreIndexes.
	StoreIndexes(namespace string) StoreIndexNamespaceLister
	StoreIndexListerExpansion
}

// storeIndexLister implements the StoreIndexLister interface.
type storeIndexLister struct {
	indexer cache.Indexer
}

// NewStoreIndexLister returns a new StoreIndexLister.
func NewStoreIndexLister(indexer cache.Indexer) StoreIndexLister {
	return &storeIndexLister{indexer: indexer}
}

// List lists all StoreIndexes in the indexer.
func (s *storeIndexLister) List(selector labels.Selector) (ret []*v1alpha1.StoreIndex, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoreIndex))
	})
	return ret, err
}

// StoreIndexes returns an object that can list and get StoreIndexes.
func (s *storeIndexLister) StoreIndexes(namespace string) StoreIndexNamespaceLister {
	return storeIndexNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StoreIndexNamespaceLister helps list and get StoreIndexes.
// All objects returned here must be treated as read-only.
type StoreIndexNamespaceLister interface {
	// List lists all StoreIndexes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StoreIndex, err error)
	// Get retrieves the StoreIndex from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StoreIndex, error)
	StoreIndexNamespaceListerExpansion
}

// storeIndexNamespaceLister implements the StoreIndexNamespaceLister
// interface.
type storeIndexNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StoreIndexes in the indexer for a given namespace.
func (s storeIndexNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StoreIndex, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoreIndex))
	})
	return ret, err
}

// Get retrieves the StoreIndex from the indexer for a given namespace and name.
func (s storeIndexNamespaceLister) Get(name string) (*v1alpha1.StoreIndex, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storeindex"), name)
	}
	return obj.(*v1alpha1.StoreIndex), nil
}
