/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/log/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EtlLister helps list Etls.
// All objects returned here must be treated as read-only.
type EtlLister interface {
	// List lists all Etls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Etl, err error)
	// Etls returns an object that can list and get Etls.
	Etls(namespace string) EtlNamespaceLister
	EtlListerExpansion
}

// etlLister implements the EtlLister interface.
type etlLister struct {
	indexer cache.Indexer
}

// NewEtlLister returns a new EtlLister.
func NewEtlLister(indexer cache.Indexer) EtlLister {
	return &etlLister{indexer: indexer}
}

// List lists all Etls in the indexer.
func (s *etlLister) List(selector labels.Selector) (ret []*v1alpha1.Etl, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Etl))
	})
	return ret, err
}

// Etls returns an object that can list and get Etls.
func (s *etlLister) Etls(namespace string) EtlNamespaceLister {
	return etlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EtlNamespaceLister helps list and get Etls.
// All objects returned here must be treated as read-only.
type EtlNamespaceLister interface {
	// List lists all Etls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Etl, err error)
	// Get retrieves the Etl from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Etl, error)
	EtlNamespaceListerExpansion
}

// etlNamespaceLister implements the EtlNamespaceLister
// interface.
type etlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Etls in the indexer for a given namespace.
func (s etlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Etl, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Etl))
	})
	return ret, err
}

// Get retrieves the Etl from the indexer for a given namespace and name.
func (s etlNamespaceLister) Get(name string) (*v1alpha1.Etl, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("etl"), name)
	}
	return obj.(*v1alpha1.Etl), nil
}
