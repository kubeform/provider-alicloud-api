/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/kms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KeyVersionLister helps list KeyVersions.
// All objects returned here must be treated as read-only.
type KeyVersionLister interface {
	// List lists all KeyVersions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeyVersion, err error)
	// KeyVersions returns an object that can list and get KeyVersions.
	KeyVersions(namespace string) KeyVersionNamespaceLister
	KeyVersionListerExpansion
}

// keyVersionLister implements the KeyVersionLister interface.
type keyVersionLister struct {
	indexer cache.Indexer
}

// NewKeyVersionLister returns a new KeyVersionLister.
func NewKeyVersionLister(indexer cache.Indexer) KeyVersionLister {
	return &keyVersionLister{indexer: indexer}
}

// List lists all KeyVersions in the indexer.
func (s *keyVersionLister) List(selector labels.Selector) (ret []*v1alpha1.KeyVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyVersion))
	})
	return ret, err
}

// KeyVersions returns an object that can list and get KeyVersions.
func (s *keyVersionLister) KeyVersions(namespace string) KeyVersionNamespaceLister {
	return keyVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeyVersionNamespaceLister helps list and get KeyVersions.
// All objects returned here must be treated as read-only.
type KeyVersionNamespaceLister interface {
	// List lists all KeyVersions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeyVersion, err error)
	// Get retrieves the KeyVersion from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KeyVersion, error)
	KeyVersionNamespaceListerExpansion
}

// keyVersionNamespaceLister implements the KeyVersionNamespaceLister
// interface.
type keyVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeyVersions in the indexer for a given namespace.
func (s keyVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeyVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyVersion))
	})
	return ret, err
}

// Get retrieves the KeyVersion from the indexer for a given namespace and name.
func (s keyVersionNamespaceLister) Get(name string) (*v1alpha1.KeyVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keyversion"), name)
	}
	return obj.(*v1alpha1.KeyVersion), nil
}
