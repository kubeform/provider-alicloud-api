/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FirewallControlPolicyLister helps list FirewallControlPolicies.
// All objects returned here must be treated as read-only.
type FirewallControlPolicyLister interface {
	// List lists all FirewallControlPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FirewallControlPolicy, err error)
	// FirewallControlPolicies returns an object that can list and get FirewallControlPolicies.
	FirewallControlPolicies(namespace string) FirewallControlPolicyNamespaceLister
	FirewallControlPolicyListerExpansion
}

// firewallControlPolicyLister implements the FirewallControlPolicyLister interface.
type firewallControlPolicyLister struct {
	indexer cache.Indexer
}

// NewFirewallControlPolicyLister returns a new FirewallControlPolicyLister.
func NewFirewallControlPolicyLister(indexer cache.Indexer) FirewallControlPolicyLister {
	return &firewallControlPolicyLister{indexer: indexer}
}

// List lists all FirewallControlPolicies in the indexer.
func (s *firewallControlPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.FirewallControlPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FirewallControlPolicy))
	})
	return ret, err
}

// FirewallControlPolicies returns an object that can list and get FirewallControlPolicies.
func (s *firewallControlPolicyLister) FirewallControlPolicies(namespace string) FirewallControlPolicyNamespaceLister {
	return firewallControlPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FirewallControlPolicyNamespaceLister helps list and get FirewallControlPolicies.
// All objects returned here must be treated as read-only.
type FirewallControlPolicyNamespaceLister interface {
	// List lists all FirewallControlPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FirewallControlPolicy, err error)
	// Get retrieves the FirewallControlPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FirewallControlPolicy, error)
	FirewallControlPolicyNamespaceListerExpansion
}

// firewallControlPolicyNamespaceLister implements the FirewallControlPolicyNamespaceLister
// interface.
type firewallControlPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FirewallControlPolicies in the indexer for a given namespace.
func (s firewallControlPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FirewallControlPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FirewallControlPolicy))
	})
	return ret, err
}

// Get retrieves the FirewallControlPolicy from the indexer for a given namespace and name.
func (s firewallControlPolicyNamespaceLister) Get(name string) (*v1alpha1.FirewallControlPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("firewallcontrolpolicy"), name)
	}
	return obj.(*v1alpha1.FirewallControlPolicy), nil
}
