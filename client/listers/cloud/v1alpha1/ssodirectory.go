/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SsoDirectoryLister helps list SsoDirectories.
// All objects returned here must be treated as read-only.
type SsoDirectoryLister interface {
	// List lists all SsoDirectories in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SsoDirectory, err error)
	// SsoDirectories returns an object that can list and get SsoDirectories.
	SsoDirectories(namespace string) SsoDirectoryNamespaceLister
	SsoDirectoryListerExpansion
}

// ssoDirectoryLister implements the SsoDirectoryLister interface.
type ssoDirectoryLister struct {
	indexer cache.Indexer
}

// NewSsoDirectoryLister returns a new SsoDirectoryLister.
func NewSsoDirectoryLister(indexer cache.Indexer) SsoDirectoryLister {
	return &ssoDirectoryLister{indexer: indexer}
}

// List lists all SsoDirectories in the indexer.
func (s *ssoDirectoryLister) List(selector labels.Selector) (ret []*v1alpha1.SsoDirectory, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SsoDirectory))
	})
	return ret, err
}

// SsoDirectories returns an object that can list and get SsoDirectories.
func (s *ssoDirectoryLister) SsoDirectories(namespace string) SsoDirectoryNamespaceLister {
	return ssoDirectoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SsoDirectoryNamespaceLister helps list and get SsoDirectories.
// All objects returned here must be treated as read-only.
type SsoDirectoryNamespaceLister interface {
	// List lists all SsoDirectories in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SsoDirectory, err error)
	// Get retrieves the SsoDirectory from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SsoDirectory, error)
	SsoDirectoryNamespaceListerExpansion
}

// ssoDirectoryNamespaceLister implements the SsoDirectoryNamespaceLister
// interface.
type ssoDirectoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SsoDirectories in the indexer for a given namespace.
func (s ssoDirectoryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SsoDirectory, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SsoDirectory))
	})
	return ret, err
}

// Get retrieves the SsoDirectory from the indexer for a given namespace and name.
func (s ssoDirectoryNamespaceLister) Get(name string) (*v1alpha1.SsoDirectory, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ssodirectory"), name)
	}
	return obj.(*v1alpha1.SsoDirectory), nil
}
