/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SsoAccessAssignmentLister helps list SsoAccessAssignments.
// All objects returned here must be treated as read-only.
type SsoAccessAssignmentLister interface {
	// List lists all SsoAccessAssignments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SsoAccessAssignment, err error)
	// SsoAccessAssignments returns an object that can list and get SsoAccessAssignments.
	SsoAccessAssignments(namespace string) SsoAccessAssignmentNamespaceLister
	SsoAccessAssignmentListerExpansion
}

// ssoAccessAssignmentLister implements the SsoAccessAssignmentLister interface.
type ssoAccessAssignmentLister struct {
	indexer cache.Indexer
}

// NewSsoAccessAssignmentLister returns a new SsoAccessAssignmentLister.
func NewSsoAccessAssignmentLister(indexer cache.Indexer) SsoAccessAssignmentLister {
	return &ssoAccessAssignmentLister{indexer: indexer}
}

// List lists all SsoAccessAssignments in the indexer.
func (s *ssoAccessAssignmentLister) List(selector labels.Selector) (ret []*v1alpha1.SsoAccessAssignment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SsoAccessAssignment))
	})
	return ret, err
}

// SsoAccessAssignments returns an object that can list and get SsoAccessAssignments.
func (s *ssoAccessAssignmentLister) SsoAccessAssignments(namespace string) SsoAccessAssignmentNamespaceLister {
	return ssoAccessAssignmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SsoAccessAssignmentNamespaceLister helps list and get SsoAccessAssignments.
// All objects returned here must be treated as read-only.
type SsoAccessAssignmentNamespaceLister interface {
	// List lists all SsoAccessAssignments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SsoAccessAssignment, err error)
	// Get retrieves the SsoAccessAssignment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SsoAccessAssignment, error)
	SsoAccessAssignmentNamespaceListerExpansion
}

// ssoAccessAssignmentNamespaceLister implements the SsoAccessAssignmentNamespaceLister
// interface.
type ssoAccessAssignmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SsoAccessAssignments in the indexer for a given namespace.
func (s ssoAccessAssignmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SsoAccessAssignment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SsoAccessAssignment))
	})
	return ret, err
}

// Get retrieves the SsoAccessAssignment from the indexer for a given namespace and name.
func (s ssoAccessAssignmentNamespaceLister) Get(name string) (*v1alpha1.SsoAccessAssignment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ssoaccessassignment"), name)
	}
	return obj.(*v1alpha1.SsoAccessAssignment), nil
}
