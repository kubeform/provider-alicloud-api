/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SsoUserLister helps list SsoUsers.
// All objects returned here must be treated as read-only.
type SsoUserLister interface {
	// List lists all SsoUsers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SsoUser, err error)
	// SsoUsers returns an object that can list and get SsoUsers.
	SsoUsers(namespace string) SsoUserNamespaceLister
	SsoUserListerExpansion
}

// ssoUserLister implements the SsoUserLister interface.
type ssoUserLister struct {
	indexer cache.Indexer
}

// NewSsoUserLister returns a new SsoUserLister.
func NewSsoUserLister(indexer cache.Indexer) SsoUserLister {
	return &ssoUserLister{indexer: indexer}
}

// List lists all SsoUsers in the indexer.
func (s *ssoUserLister) List(selector labels.Selector) (ret []*v1alpha1.SsoUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SsoUser))
	})
	return ret, err
}

// SsoUsers returns an object that can list and get SsoUsers.
func (s *ssoUserLister) SsoUsers(namespace string) SsoUserNamespaceLister {
	return ssoUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SsoUserNamespaceLister helps list and get SsoUsers.
// All objects returned here must be treated as read-only.
type SsoUserNamespaceLister interface {
	// List lists all SsoUsers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SsoUser, err error)
	// Get retrieves the SsoUser from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SsoUser, error)
	SsoUserNamespaceListerExpansion
}

// ssoUserNamespaceLister implements the SsoUserNamespaceLister
// interface.
type ssoUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SsoUsers in the indexer for a given namespace.
func (s ssoUserNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SsoUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SsoUser))
	})
	return ret, err
}

// Get retrieves the SsoUser from the indexer for a given namespace and name.
func (s ssoUserNamespaceLister) Get(name string) (*v1alpha1.SsoUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ssouser"), name)
	}
	return obj.(*v1alpha1.SsoUser), nil
}
