/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConnectNetworkLister helps list ConnectNetworks.
// All objects returned here must be treated as read-only.
type ConnectNetworkLister interface {
	// List lists all ConnectNetworks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectNetwork, err error)
	// ConnectNetworks returns an object that can list and get ConnectNetworks.
	ConnectNetworks(namespace string) ConnectNetworkNamespaceLister
	ConnectNetworkListerExpansion
}

// connectNetworkLister implements the ConnectNetworkLister interface.
type connectNetworkLister struct {
	indexer cache.Indexer
}

// NewConnectNetworkLister returns a new ConnectNetworkLister.
func NewConnectNetworkLister(indexer cache.Indexer) ConnectNetworkLister {
	return &connectNetworkLister{indexer: indexer}
}

// List lists all ConnectNetworks in the indexer.
func (s *connectNetworkLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectNetwork, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectNetwork))
	})
	return ret, err
}

// ConnectNetworks returns an object that can list and get ConnectNetworks.
func (s *connectNetworkLister) ConnectNetworks(namespace string) ConnectNetworkNamespaceLister {
	return connectNetworkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectNetworkNamespaceLister helps list and get ConnectNetworks.
// All objects returned here must be treated as read-only.
type ConnectNetworkNamespaceLister interface {
	// List lists all ConnectNetworks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectNetwork, err error)
	// Get retrieves the ConnectNetwork from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConnectNetwork, error)
	ConnectNetworkNamespaceListerExpansion
}

// connectNetworkNamespaceLister implements the ConnectNetworkNamespaceLister
// interface.
type connectNetworkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectNetworks in the indexer for a given namespace.
func (s connectNetworkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectNetwork, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectNetwork))
	})
	return ret, err
}

// Get retrieves the ConnectNetwork from the indexer for a given namespace and name.
func (s connectNetworkNamespaceLister) Get(name string) (*v1alpha1.ConnectNetwork, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("connectnetwork"), name)
	}
	return obj.(*v1alpha1.ConnectNetwork), nil
}
