/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConnectNetworkAttachmentLister helps list ConnectNetworkAttachments.
// All objects returned here must be treated as read-only.
type ConnectNetworkAttachmentLister interface {
	// List lists all ConnectNetworkAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectNetworkAttachment, err error)
	// ConnectNetworkAttachments returns an object that can list and get ConnectNetworkAttachments.
	ConnectNetworkAttachments(namespace string) ConnectNetworkAttachmentNamespaceLister
	ConnectNetworkAttachmentListerExpansion
}

// connectNetworkAttachmentLister implements the ConnectNetworkAttachmentLister interface.
type connectNetworkAttachmentLister struct {
	indexer cache.Indexer
}

// NewConnectNetworkAttachmentLister returns a new ConnectNetworkAttachmentLister.
func NewConnectNetworkAttachmentLister(indexer cache.Indexer) ConnectNetworkAttachmentLister {
	return &connectNetworkAttachmentLister{indexer: indexer}
}

// List lists all ConnectNetworkAttachments in the indexer.
func (s *connectNetworkAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectNetworkAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectNetworkAttachment))
	})
	return ret, err
}

// ConnectNetworkAttachments returns an object that can list and get ConnectNetworkAttachments.
func (s *connectNetworkAttachmentLister) ConnectNetworkAttachments(namespace string) ConnectNetworkAttachmentNamespaceLister {
	return connectNetworkAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectNetworkAttachmentNamespaceLister helps list and get ConnectNetworkAttachments.
// All objects returned here must be treated as read-only.
type ConnectNetworkAttachmentNamespaceLister interface {
	// List lists all ConnectNetworkAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectNetworkAttachment, err error)
	// Get retrieves the ConnectNetworkAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConnectNetworkAttachment, error)
	ConnectNetworkAttachmentNamespaceListerExpansion
}

// connectNetworkAttachmentNamespaceLister implements the ConnectNetworkAttachmentNamespaceLister
// interface.
type connectNetworkAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectNetworkAttachments in the indexer for a given namespace.
func (s connectNetworkAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectNetworkAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectNetworkAttachment))
	})
	return ret, err
}

// Get retrieves the ConnectNetworkAttachment from the indexer for a given namespace and name.
func (s connectNetworkAttachmentNamespaceLister) Get(name string) (*v1alpha1.ConnectNetworkAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("connectnetworkattachment"), name)
	}
	return obj.(*v1alpha1.ConnectNetworkAttachment), nil
}
