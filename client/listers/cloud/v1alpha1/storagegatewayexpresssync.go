/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageGatewayExpressSyncLister helps list StorageGatewayExpressSyncs.
// All objects returned here must be treated as read-only.
type StorageGatewayExpressSyncLister interface {
	// List lists all StorageGatewayExpressSyncs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageGatewayExpressSync, err error)
	// StorageGatewayExpressSyncs returns an object that can list and get StorageGatewayExpressSyncs.
	StorageGatewayExpressSyncs(namespace string) StorageGatewayExpressSyncNamespaceLister
	StorageGatewayExpressSyncListerExpansion
}

// storageGatewayExpressSyncLister implements the StorageGatewayExpressSyncLister interface.
type storageGatewayExpressSyncLister struct {
	indexer cache.Indexer
}

// NewStorageGatewayExpressSyncLister returns a new StorageGatewayExpressSyncLister.
func NewStorageGatewayExpressSyncLister(indexer cache.Indexer) StorageGatewayExpressSyncLister {
	return &storageGatewayExpressSyncLister{indexer: indexer}
}

// List lists all StorageGatewayExpressSyncs in the indexer.
func (s *storageGatewayExpressSyncLister) List(selector labels.Selector) (ret []*v1alpha1.StorageGatewayExpressSync, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageGatewayExpressSync))
	})
	return ret, err
}

// StorageGatewayExpressSyncs returns an object that can list and get StorageGatewayExpressSyncs.
func (s *storageGatewayExpressSyncLister) StorageGatewayExpressSyncs(namespace string) StorageGatewayExpressSyncNamespaceLister {
	return storageGatewayExpressSyncNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageGatewayExpressSyncNamespaceLister helps list and get StorageGatewayExpressSyncs.
// All objects returned here must be treated as read-only.
type StorageGatewayExpressSyncNamespaceLister interface {
	// List lists all StorageGatewayExpressSyncs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageGatewayExpressSync, err error)
	// Get retrieves the StorageGatewayExpressSync from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StorageGatewayExpressSync, error)
	StorageGatewayExpressSyncNamespaceListerExpansion
}

// storageGatewayExpressSyncNamespaceLister implements the StorageGatewayExpressSyncNamespaceLister
// interface.
type storageGatewayExpressSyncNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageGatewayExpressSyncs in the indexer for a given namespace.
func (s storageGatewayExpressSyncNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageGatewayExpressSync, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageGatewayExpressSync))
	})
	return ret, err
}

// Get retrieves the StorageGatewayExpressSync from the indexer for a given namespace and name.
func (s storageGatewayExpressSyncNamespaceLister) Get(name string) (*v1alpha1.StorageGatewayExpressSync, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagegatewayexpresssync"), name)
	}
	return obj.(*v1alpha1.StorageGatewayExpressSync), nil
}
