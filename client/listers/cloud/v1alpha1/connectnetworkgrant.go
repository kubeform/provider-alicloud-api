/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConnectNetworkGrantLister helps list ConnectNetworkGrants.
// All objects returned here must be treated as read-only.
type ConnectNetworkGrantLister interface {
	// List lists all ConnectNetworkGrants in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectNetworkGrant, err error)
	// ConnectNetworkGrants returns an object that can list and get ConnectNetworkGrants.
	ConnectNetworkGrants(namespace string) ConnectNetworkGrantNamespaceLister
	ConnectNetworkGrantListerExpansion
}

// connectNetworkGrantLister implements the ConnectNetworkGrantLister interface.
type connectNetworkGrantLister struct {
	indexer cache.Indexer
}

// NewConnectNetworkGrantLister returns a new ConnectNetworkGrantLister.
func NewConnectNetworkGrantLister(indexer cache.Indexer) ConnectNetworkGrantLister {
	return &connectNetworkGrantLister{indexer: indexer}
}

// List lists all ConnectNetworkGrants in the indexer.
func (s *connectNetworkGrantLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectNetworkGrant, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectNetworkGrant))
	})
	return ret, err
}

// ConnectNetworkGrants returns an object that can list and get ConnectNetworkGrants.
func (s *connectNetworkGrantLister) ConnectNetworkGrants(namespace string) ConnectNetworkGrantNamespaceLister {
	return connectNetworkGrantNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectNetworkGrantNamespaceLister helps list and get ConnectNetworkGrants.
// All objects returned here must be treated as read-only.
type ConnectNetworkGrantNamespaceLister interface {
	// List lists all ConnectNetworkGrants in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectNetworkGrant, err error)
	// Get retrieves the ConnectNetworkGrant from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConnectNetworkGrant, error)
	ConnectNetworkGrantNamespaceListerExpansion
}

// connectNetworkGrantNamespaceLister implements the ConnectNetworkGrantNamespaceLister
// interface.
type connectNetworkGrantNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectNetworkGrants in the indexer for a given namespace.
func (s connectNetworkGrantNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectNetworkGrant, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectNetworkGrant))
	})
	return ret, err
}

// Get retrieves the ConnectNetworkGrant from the indexer for a given namespace and name.
func (s connectNetworkGrantNamespaceLister) Get(name string) (*v1alpha1.ConnectNetworkGrant, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("connectnetworkgrant"), name)
	}
	return obj.(*v1alpha1.ConnectNetworkGrant), nil
}
