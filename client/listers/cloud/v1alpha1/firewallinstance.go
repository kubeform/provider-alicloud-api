/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FirewallInstanceLister helps list FirewallInstances.
// All objects returned here must be treated as read-only.
type FirewallInstanceLister interface {
	// List lists all FirewallInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FirewallInstance, err error)
	// FirewallInstances returns an object that can list and get FirewallInstances.
	FirewallInstances(namespace string) FirewallInstanceNamespaceLister
	FirewallInstanceListerExpansion
}

// firewallInstanceLister implements the FirewallInstanceLister interface.
type firewallInstanceLister struct {
	indexer cache.Indexer
}

// NewFirewallInstanceLister returns a new FirewallInstanceLister.
func NewFirewallInstanceLister(indexer cache.Indexer) FirewallInstanceLister {
	return &firewallInstanceLister{indexer: indexer}
}

// List lists all FirewallInstances in the indexer.
func (s *firewallInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.FirewallInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FirewallInstance))
	})
	return ret, err
}

// FirewallInstances returns an object that can list and get FirewallInstances.
func (s *firewallInstanceLister) FirewallInstances(namespace string) FirewallInstanceNamespaceLister {
	return firewallInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FirewallInstanceNamespaceLister helps list and get FirewallInstances.
// All objects returned here must be treated as read-only.
type FirewallInstanceNamespaceLister interface {
	// List lists all FirewallInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FirewallInstance, err error)
	// Get retrieves the FirewallInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FirewallInstance, error)
	FirewallInstanceNamespaceListerExpansion
}

// firewallInstanceNamespaceLister implements the FirewallInstanceNamespaceLister
// interface.
type firewallInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FirewallInstances in the indexer for a given namespace.
func (s firewallInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FirewallInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FirewallInstance))
	})
	return ret, err
}

// Get retrieves the FirewallInstance from the indexer for a given namespace and name.
func (s firewallInstanceNamespaceLister) Get(name string) (*v1alpha1.FirewallInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("firewallinstance"), name)
	}
	return obj.(*v1alpha1.FirewallInstance), nil
}
