/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ess/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScheduledTaskLister helps list ScheduledTasks.
// All objects returned here must be treated as read-only.
type ScheduledTaskLister interface {
	// List lists all ScheduledTasks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScheduledTask, err error)
	// ScheduledTasks returns an object that can list and get ScheduledTasks.
	ScheduledTasks(namespace string) ScheduledTaskNamespaceLister
	ScheduledTaskListerExpansion
}

// scheduledTaskLister implements the ScheduledTaskLister interface.
type scheduledTaskLister struct {
	indexer cache.Indexer
}

// NewScheduledTaskLister returns a new ScheduledTaskLister.
func NewScheduledTaskLister(indexer cache.Indexer) ScheduledTaskLister {
	return &scheduledTaskLister{indexer: indexer}
}

// List lists all ScheduledTasks in the indexer.
func (s *scheduledTaskLister) List(selector labels.Selector) (ret []*v1alpha1.ScheduledTask, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScheduledTask))
	})
	return ret, err
}

// ScheduledTasks returns an object that can list and get ScheduledTasks.
func (s *scheduledTaskLister) ScheduledTasks(namespace string) ScheduledTaskNamespaceLister {
	return scheduledTaskNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScheduledTaskNamespaceLister helps list and get ScheduledTasks.
// All objects returned here must be treated as read-only.
type ScheduledTaskNamespaceLister interface {
	// List lists all ScheduledTasks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScheduledTask, err error)
	// Get retrieves the ScheduledTask from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScheduledTask, error)
	ScheduledTaskNamespaceListerExpansion
}

// scheduledTaskNamespaceLister implements the ScheduledTaskNamespaceLister
// interface.
type scheduledTaskNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScheduledTasks in the indexer for a given namespace.
func (s scheduledTaskNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScheduledTask, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScheduledTask))
	})
	return ret, err
}

// Get retrieves the ScheduledTask from the indexer for a given namespace and name.
func (s scheduledTaskNamespaceLister) Get(name string) (*v1alpha1.ScheduledTask, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scheduledtask"), name)
	}
	return obj.(*v1alpha1.ScheduledTask), nil
}
