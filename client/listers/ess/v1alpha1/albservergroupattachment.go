/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ess/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AlbServerGroupAttachmentLister helps list AlbServerGroupAttachments.
// All objects returned here must be treated as read-only.
type AlbServerGroupAttachmentLister interface {
	// List lists all AlbServerGroupAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlbServerGroupAttachment, err error)
	// AlbServerGroupAttachments returns an object that can list and get AlbServerGroupAttachments.
	AlbServerGroupAttachments(namespace string) AlbServerGroupAttachmentNamespaceLister
	AlbServerGroupAttachmentListerExpansion
}

// albServerGroupAttachmentLister implements the AlbServerGroupAttachmentLister interface.
type albServerGroupAttachmentLister struct {
	indexer cache.Indexer
}

// NewAlbServerGroupAttachmentLister returns a new AlbServerGroupAttachmentLister.
func NewAlbServerGroupAttachmentLister(indexer cache.Indexer) AlbServerGroupAttachmentLister {
	return &albServerGroupAttachmentLister{indexer: indexer}
}

// List lists all AlbServerGroupAttachments in the indexer.
func (s *albServerGroupAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.AlbServerGroupAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlbServerGroupAttachment))
	})
	return ret, err
}

// AlbServerGroupAttachments returns an object that can list and get AlbServerGroupAttachments.
func (s *albServerGroupAttachmentLister) AlbServerGroupAttachments(namespace string) AlbServerGroupAttachmentNamespaceLister {
	return albServerGroupAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AlbServerGroupAttachmentNamespaceLister helps list and get AlbServerGroupAttachments.
// All objects returned here must be treated as read-only.
type AlbServerGroupAttachmentNamespaceLister interface {
	// List lists all AlbServerGroupAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlbServerGroupAttachment, err error)
	// Get retrieves the AlbServerGroupAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AlbServerGroupAttachment, error)
	AlbServerGroupAttachmentNamespaceListerExpansion
}

// albServerGroupAttachmentNamespaceLister implements the AlbServerGroupAttachmentNamespaceLister
// interface.
type albServerGroupAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AlbServerGroupAttachments in the indexer for a given namespace.
func (s albServerGroupAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AlbServerGroupAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlbServerGroupAttachment))
	})
	return ret, err
}

// Get retrieves the AlbServerGroupAttachment from the indexer for a given namespace and name.
func (s albServerGroupAttachmentNamespaceLister) Get(name string) (*v1alpha1.AlbServerGroupAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("albservergroupattachment"), name)
	}
	return obj.(*v1alpha1.AlbServerGroupAttachment), nil
}
