/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ess/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScalingGroupLister helps list ScalingGroups.
// All objects returned here must be treated as read-only.
type ScalingGroupLister interface {
	// List lists all ScalingGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScalingGroup, err error)
	// ScalingGroups returns an object that can list and get ScalingGroups.
	ScalingGroups(namespace string) ScalingGroupNamespaceLister
	ScalingGroupListerExpansion
}

// scalingGroupLister implements the ScalingGroupLister interface.
type scalingGroupLister struct {
	indexer cache.Indexer
}

// NewScalingGroupLister returns a new ScalingGroupLister.
func NewScalingGroupLister(indexer cache.Indexer) ScalingGroupLister {
	return &scalingGroupLister{indexer: indexer}
}

// List lists all ScalingGroups in the indexer.
func (s *scalingGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ScalingGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScalingGroup))
	})
	return ret, err
}

// ScalingGroups returns an object that can list and get ScalingGroups.
func (s *scalingGroupLister) ScalingGroups(namespace string) ScalingGroupNamespaceLister {
	return scalingGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScalingGroupNamespaceLister helps list and get ScalingGroups.
// All objects returned here must be treated as read-only.
type ScalingGroupNamespaceLister interface {
	// List lists all ScalingGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScalingGroup, err error)
	// Get retrieves the ScalingGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScalingGroup, error)
	ScalingGroupNamespaceListerExpansion
}

// scalingGroupNamespaceLister implements the ScalingGroupNamespaceLister
// interface.
type scalingGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScalingGroups in the indexer for a given namespace.
func (s scalingGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScalingGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScalingGroup))
	})
	return ret, err
}

// Get retrieves the ScalingGroup from the indexer for a given namespace and name.
func (s scalingGroupNamespaceLister) Get(name string) (*v1alpha1.ScalingGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scalinggroup"), name)
	}
	return obj.(*v1alpha1.ScalingGroup), nil
}
