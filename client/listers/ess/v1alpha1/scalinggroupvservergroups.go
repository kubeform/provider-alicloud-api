/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ess/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScalinggroupVserverGroupsLister helps list ScalinggroupVserverGroupses.
// All objects returned here must be treated as read-only.
type ScalinggroupVserverGroupsLister interface {
	// List lists all ScalinggroupVserverGroupses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScalinggroupVserverGroups, err error)
	// ScalinggroupVserverGroupses returns an object that can list and get ScalinggroupVserverGroupses.
	ScalinggroupVserverGroupses(namespace string) ScalinggroupVserverGroupsNamespaceLister
	ScalinggroupVserverGroupsListerExpansion
}

// scalinggroupVserverGroupsLister implements the ScalinggroupVserverGroupsLister interface.
type scalinggroupVserverGroupsLister struct {
	indexer cache.Indexer
}

// NewScalinggroupVserverGroupsLister returns a new ScalinggroupVserverGroupsLister.
func NewScalinggroupVserverGroupsLister(indexer cache.Indexer) ScalinggroupVserverGroupsLister {
	return &scalinggroupVserverGroupsLister{indexer: indexer}
}

// List lists all ScalinggroupVserverGroupses in the indexer.
func (s *scalinggroupVserverGroupsLister) List(selector labels.Selector) (ret []*v1alpha1.ScalinggroupVserverGroups, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScalinggroupVserverGroups))
	})
	return ret, err
}

// ScalinggroupVserverGroupses returns an object that can list and get ScalinggroupVserverGroupses.
func (s *scalinggroupVserverGroupsLister) ScalinggroupVserverGroupses(namespace string) ScalinggroupVserverGroupsNamespaceLister {
	return scalinggroupVserverGroupsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScalinggroupVserverGroupsNamespaceLister helps list and get ScalinggroupVserverGroupses.
// All objects returned here must be treated as read-only.
type ScalinggroupVserverGroupsNamespaceLister interface {
	// List lists all ScalinggroupVserverGroupses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScalinggroupVserverGroups, err error)
	// Get retrieves the ScalinggroupVserverGroups from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScalinggroupVserverGroups, error)
	ScalinggroupVserverGroupsNamespaceListerExpansion
}

// scalinggroupVserverGroupsNamespaceLister implements the ScalinggroupVserverGroupsNamespaceLister
// interface.
type scalinggroupVserverGroupsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScalinggroupVserverGroupses in the indexer for a given namespace.
func (s scalinggroupVserverGroupsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScalinggroupVserverGroups, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScalinggroupVserverGroups))
	})
	return ret, err
}

// Get retrieves the ScalinggroupVserverGroups from the indexer for a given namespace and name.
func (s scalinggroupVserverGroupsNamespaceLister) Get(name string) (*v1alpha1.ScalinggroupVserverGroups, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scalinggroupvservergroups"), name)
	}
	return obj.(*v1alpha1.ScalinggroupVserverGroups), nil
}
