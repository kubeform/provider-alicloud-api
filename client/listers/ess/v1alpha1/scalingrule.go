/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ess/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScalingRuleLister helps list ScalingRules.
// All objects returned here must be treated as read-only.
type ScalingRuleLister interface {
	// List lists all ScalingRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScalingRule, err error)
	// ScalingRules returns an object that can list and get ScalingRules.
	ScalingRules(namespace string) ScalingRuleNamespaceLister
	ScalingRuleListerExpansion
}

// scalingRuleLister implements the ScalingRuleLister interface.
type scalingRuleLister struct {
	indexer cache.Indexer
}

// NewScalingRuleLister returns a new ScalingRuleLister.
func NewScalingRuleLister(indexer cache.Indexer) ScalingRuleLister {
	return &scalingRuleLister{indexer: indexer}
}

// List lists all ScalingRules in the indexer.
func (s *scalingRuleLister) List(selector labels.Selector) (ret []*v1alpha1.ScalingRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScalingRule))
	})
	return ret, err
}

// ScalingRules returns an object that can list and get ScalingRules.
func (s *scalingRuleLister) ScalingRules(namespace string) ScalingRuleNamespaceLister {
	return scalingRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScalingRuleNamespaceLister helps list and get ScalingRules.
// All objects returned here must be treated as read-only.
type ScalingRuleNamespaceLister interface {
	// List lists all ScalingRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScalingRule, err error)
	// Get retrieves the ScalingRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScalingRule, error)
	ScalingRuleNamespaceListerExpansion
}

// scalingRuleNamespaceLister implements the ScalingRuleNamespaceLister
// interface.
type scalingRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScalingRules in the indexer for a given namespace.
func (s scalingRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScalingRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScalingRule))
	})
	return ret, err
}

// Get retrieves the ScalingRule from the indexer for a given namespace and name.
func (s scalingRuleNamespaceLister) Get(name string) (*v1alpha1.ScalingRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scalingrule"), name)
	}
	return obj.(*v1alpha1.ScalingRule), nil
}
