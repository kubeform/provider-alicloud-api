/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ssl/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpnClientCertLister helps list VpnClientCerts.
// All objects returned here must be treated as read-only.
type VpnClientCertLister interface {
	// List lists all VpnClientCerts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpnClientCert, err error)
	// VpnClientCerts returns an object that can list and get VpnClientCerts.
	VpnClientCerts(namespace string) VpnClientCertNamespaceLister
	VpnClientCertListerExpansion
}

// vpnClientCertLister implements the VpnClientCertLister interface.
type vpnClientCertLister struct {
	indexer cache.Indexer
}

// NewVpnClientCertLister returns a new VpnClientCertLister.
func NewVpnClientCertLister(indexer cache.Indexer) VpnClientCertLister {
	return &vpnClientCertLister{indexer: indexer}
}

// List lists all VpnClientCerts in the indexer.
func (s *vpnClientCertLister) List(selector labels.Selector) (ret []*v1alpha1.VpnClientCert, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpnClientCert))
	})
	return ret, err
}

// VpnClientCerts returns an object that can list and get VpnClientCerts.
func (s *vpnClientCertLister) VpnClientCerts(namespace string) VpnClientCertNamespaceLister {
	return vpnClientCertNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpnClientCertNamespaceLister helps list and get VpnClientCerts.
// All objects returned here must be treated as read-only.
type VpnClientCertNamespaceLister interface {
	// List lists all VpnClientCerts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpnClientCert, err error)
	// Get retrieves the VpnClientCert from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpnClientCert, error)
	VpnClientCertNamespaceListerExpansion
}

// vpnClientCertNamespaceLister implements the VpnClientCertNamespaceLister
// interface.
type vpnClientCertNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpnClientCerts in the indexer for a given namespace.
func (s vpnClientCertNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpnClientCert, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpnClientCert))
	})
	return ret, err
}

// Get retrieves the VpnClientCert from the indexer for a given namespace and name.
func (s vpnClientCertNamespaceLister) Get(name string) (*v1alpha1.VpnClientCert, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpnclientcert"), name)
	}
	return obj.(*v1alpha1.VpnClientCert), nil
}
