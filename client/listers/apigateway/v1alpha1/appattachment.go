/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/apigateway/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppAttachmentLister helps list AppAttachments.
// All objects returned here must be treated as read-only.
type AppAttachmentLister interface {
	// List lists all AppAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppAttachment, err error)
	// AppAttachments returns an object that can list and get AppAttachments.
	AppAttachments(namespace string) AppAttachmentNamespaceLister
	AppAttachmentListerExpansion
}

// appAttachmentLister implements the AppAttachmentLister interface.
type appAttachmentLister struct {
	indexer cache.Indexer
}

// NewAppAttachmentLister returns a new AppAttachmentLister.
func NewAppAttachmentLister(indexer cache.Indexer) AppAttachmentLister {
	return &appAttachmentLister{indexer: indexer}
}

// List lists all AppAttachments in the indexer.
func (s *appAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.AppAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppAttachment))
	})
	return ret, err
}

// AppAttachments returns an object that can list and get AppAttachments.
func (s *appAttachmentLister) AppAttachments(namespace string) AppAttachmentNamespaceLister {
	return appAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppAttachmentNamespaceLister helps list and get AppAttachments.
// All objects returned here must be treated as read-only.
type AppAttachmentNamespaceLister interface {
	// List lists all AppAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppAttachment, err error)
	// Get retrieves the AppAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppAttachment, error)
	AppAttachmentNamespaceListerExpansion
}

// appAttachmentNamespaceLister implements the AppAttachmentNamespaceLister
// interface.
type appAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppAttachments in the indexer for a given namespace.
func (s appAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppAttachment))
	})
	return ret, err
}

// Get retrieves the AppAttachment from the indexer for a given namespace and name.
func (s appAttachmentNamespaceLister) Get(name string) (*v1alpha1.AppAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appattachment"), name)
	}
	return obj.(*v1alpha1.AppAttachment), nil
}
