/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/key/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PairAttachmentLister helps list PairAttachments.
// All objects returned here must be treated as read-only.
type PairAttachmentLister interface {
	// List lists all PairAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PairAttachment, err error)
	// PairAttachments returns an object that can list and get PairAttachments.
	PairAttachments(namespace string) PairAttachmentNamespaceLister
	PairAttachmentListerExpansion
}

// pairAttachmentLister implements the PairAttachmentLister interface.
type pairAttachmentLister struct {
	indexer cache.Indexer
}

// NewPairAttachmentLister returns a new PairAttachmentLister.
func NewPairAttachmentLister(indexer cache.Indexer) PairAttachmentLister {
	return &pairAttachmentLister{indexer: indexer}
}

// List lists all PairAttachments in the indexer.
func (s *pairAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.PairAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PairAttachment))
	})
	return ret, err
}

// PairAttachments returns an object that can list and get PairAttachments.
func (s *pairAttachmentLister) PairAttachments(namespace string) PairAttachmentNamespaceLister {
	return pairAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PairAttachmentNamespaceLister helps list and get PairAttachments.
// All objects returned here must be treated as read-only.
type PairAttachmentNamespaceLister interface {
	// List lists all PairAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PairAttachment, err error)
	// Get retrieves the PairAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PairAttachment, error)
	PairAttachmentNamespaceListerExpansion
}

// pairAttachmentNamespaceLister implements the PairAttachmentNamespaceLister
// interface.
type pairAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PairAttachments in the indexer for a given namespace.
func (s pairAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PairAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PairAttachment))
	})
	return ret, err
}

// Get retrieves the PairAttachment from the indexer for a given namespace and name.
func (s pairAttachmentNamespaceLister) Get(name string) (*v1alpha1.PairAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pairattachment"), name)
	}
	return obj.(*v1alpha1.PairAttachment), nil
}
