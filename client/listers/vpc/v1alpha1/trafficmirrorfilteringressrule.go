/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrafficMirrorFilterIngressRuleLister helps list TrafficMirrorFilterIngressRules.
// All objects returned here must be treated as read-only.
type TrafficMirrorFilterIngressRuleLister interface {
	// List lists all TrafficMirrorFilterIngressRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficMirrorFilterIngressRule, err error)
	// TrafficMirrorFilterIngressRules returns an object that can list and get TrafficMirrorFilterIngressRules.
	TrafficMirrorFilterIngressRules(namespace string) TrafficMirrorFilterIngressRuleNamespaceLister
	TrafficMirrorFilterIngressRuleListerExpansion
}

// trafficMirrorFilterIngressRuleLister implements the TrafficMirrorFilterIngressRuleLister interface.
type trafficMirrorFilterIngressRuleLister struct {
	indexer cache.Indexer
}

// NewTrafficMirrorFilterIngressRuleLister returns a new TrafficMirrorFilterIngressRuleLister.
func NewTrafficMirrorFilterIngressRuleLister(indexer cache.Indexer) TrafficMirrorFilterIngressRuleLister {
	return &trafficMirrorFilterIngressRuleLister{indexer: indexer}
}

// List lists all TrafficMirrorFilterIngressRules in the indexer.
func (s *trafficMirrorFilterIngressRuleLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficMirrorFilterIngressRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficMirrorFilterIngressRule))
	})
	return ret, err
}

// TrafficMirrorFilterIngressRules returns an object that can list and get TrafficMirrorFilterIngressRules.
func (s *trafficMirrorFilterIngressRuleLister) TrafficMirrorFilterIngressRules(namespace string) TrafficMirrorFilterIngressRuleNamespaceLister {
	return trafficMirrorFilterIngressRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrafficMirrorFilterIngressRuleNamespaceLister helps list and get TrafficMirrorFilterIngressRules.
// All objects returned here must be treated as read-only.
type TrafficMirrorFilterIngressRuleNamespaceLister interface {
	// List lists all TrafficMirrorFilterIngressRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficMirrorFilterIngressRule, err error)
	// Get retrieves the TrafficMirrorFilterIngressRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TrafficMirrorFilterIngressRule, error)
	TrafficMirrorFilterIngressRuleNamespaceListerExpansion
}

// trafficMirrorFilterIngressRuleNamespaceLister implements the TrafficMirrorFilterIngressRuleNamespaceLister
// interface.
type trafficMirrorFilterIngressRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TrafficMirrorFilterIngressRules in the indexer for a given namespace.
func (s trafficMirrorFilterIngressRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficMirrorFilterIngressRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficMirrorFilterIngressRule))
	})
	return ret, err
}

// Get retrieves the TrafficMirrorFilterIngressRule from the indexer for a given namespace and name.
func (s trafficMirrorFilterIngressRuleNamespaceLister) Get(name string) (*v1alpha1.TrafficMirrorFilterIngressRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("trafficmirrorfilteringressrule"), name)
	}
	return obj.(*v1alpha1.TrafficMirrorFilterIngressRule), nil
}
