/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrafficMirrorFilterEgressRuleLister helps list TrafficMirrorFilterEgressRules.
// All objects returned here must be treated as read-only.
type TrafficMirrorFilterEgressRuleLister interface {
	// List lists all TrafficMirrorFilterEgressRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficMirrorFilterEgressRule, err error)
	// TrafficMirrorFilterEgressRules returns an object that can list and get TrafficMirrorFilterEgressRules.
	TrafficMirrorFilterEgressRules(namespace string) TrafficMirrorFilterEgressRuleNamespaceLister
	TrafficMirrorFilterEgressRuleListerExpansion
}

// trafficMirrorFilterEgressRuleLister implements the TrafficMirrorFilterEgressRuleLister interface.
type trafficMirrorFilterEgressRuleLister struct {
	indexer cache.Indexer
}

// NewTrafficMirrorFilterEgressRuleLister returns a new TrafficMirrorFilterEgressRuleLister.
func NewTrafficMirrorFilterEgressRuleLister(indexer cache.Indexer) TrafficMirrorFilterEgressRuleLister {
	return &trafficMirrorFilterEgressRuleLister{indexer: indexer}
}

// List lists all TrafficMirrorFilterEgressRules in the indexer.
func (s *trafficMirrorFilterEgressRuleLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficMirrorFilterEgressRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficMirrorFilterEgressRule))
	})
	return ret, err
}

// TrafficMirrorFilterEgressRules returns an object that can list and get TrafficMirrorFilterEgressRules.
func (s *trafficMirrorFilterEgressRuleLister) TrafficMirrorFilterEgressRules(namespace string) TrafficMirrorFilterEgressRuleNamespaceLister {
	return trafficMirrorFilterEgressRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrafficMirrorFilterEgressRuleNamespaceLister helps list and get TrafficMirrorFilterEgressRules.
// All objects returned here must be treated as read-only.
type TrafficMirrorFilterEgressRuleNamespaceLister interface {
	// List lists all TrafficMirrorFilterEgressRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficMirrorFilterEgressRule, err error)
	// Get retrieves the TrafficMirrorFilterEgressRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TrafficMirrorFilterEgressRule, error)
	TrafficMirrorFilterEgressRuleNamespaceListerExpansion
}

// trafficMirrorFilterEgressRuleNamespaceLister implements the TrafficMirrorFilterEgressRuleNamespaceLister
// interface.
type trafficMirrorFilterEgressRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TrafficMirrorFilterEgressRules in the indexer for a given namespace.
func (s trafficMirrorFilterEgressRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficMirrorFilterEgressRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficMirrorFilterEgressRule))
	})
	return ret, err
}

// Get retrieves the TrafficMirrorFilterEgressRule from the indexer for a given namespace and name.
func (s trafficMirrorFilterEgressRuleNamespaceLister) Get(name string) (*v1alpha1.TrafficMirrorFilterEgressRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("trafficmirrorfilteregressrule"), name)
	}
	return obj.(*v1alpha1.TrafficMirrorFilterEgressRule), nil
}
