/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Ipv6EgressRuleLister helps list Ipv6EgressRules.
// All objects returned here must be treated as read-only.
type Ipv6EgressRuleLister interface {
	// List lists all Ipv6EgressRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv6EgressRule, err error)
	// Ipv6EgressRules returns an object that can list and get Ipv6EgressRules.
	Ipv6EgressRules(namespace string) Ipv6EgressRuleNamespaceLister
	Ipv6EgressRuleListerExpansion
}

// ipv6EgressRuleLister implements the Ipv6EgressRuleLister interface.
type ipv6EgressRuleLister struct {
	indexer cache.Indexer
}

// NewIpv6EgressRuleLister returns a new Ipv6EgressRuleLister.
func NewIpv6EgressRuleLister(indexer cache.Indexer) Ipv6EgressRuleLister {
	return &ipv6EgressRuleLister{indexer: indexer}
}

// List lists all Ipv6EgressRules in the indexer.
func (s *ipv6EgressRuleLister) List(selector labels.Selector) (ret []*v1alpha1.Ipv6EgressRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv6EgressRule))
	})
	return ret, err
}

// Ipv6EgressRules returns an object that can list and get Ipv6EgressRules.
func (s *ipv6EgressRuleLister) Ipv6EgressRules(namespace string) Ipv6EgressRuleNamespaceLister {
	return ipv6EgressRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Ipv6EgressRuleNamespaceLister helps list and get Ipv6EgressRules.
// All objects returned here must be treated as read-only.
type Ipv6EgressRuleNamespaceLister interface {
	// List lists all Ipv6EgressRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv6EgressRule, err error)
	// Get retrieves the Ipv6EgressRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ipv6EgressRule, error)
	Ipv6EgressRuleNamespaceListerExpansion
}

// ipv6EgressRuleNamespaceLister implements the Ipv6EgressRuleNamespaceLister
// interface.
type ipv6EgressRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ipv6EgressRules in the indexer for a given namespace.
func (s ipv6EgressRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ipv6EgressRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv6EgressRule))
	})
	return ret, err
}

// Get retrieves the Ipv6EgressRule from the indexer for a given namespace and name.
func (s ipv6EgressRuleNamespaceLister) Get(name string) (*v1alpha1.Ipv6EgressRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipv6egressrule"), name)
	}
	return obj.(*v1alpha1.Ipv6EgressRule), nil
}
