/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Ipv6InternetBandwidthLister helps list Ipv6InternetBandwidths.
// All objects returned here must be treated as read-only.
type Ipv6InternetBandwidthLister interface {
	// List lists all Ipv6InternetBandwidths in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv6InternetBandwidth, err error)
	// Ipv6InternetBandwidths returns an object that can list and get Ipv6InternetBandwidths.
	Ipv6InternetBandwidths(namespace string) Ipv6InternetBandwidthNamespaceLister
	Ipv6InternetBandwidthListerExpansion
}

// ipv6InternetBandwidthLister implements the Ipv6InternetBandwidthLister interface.
type ipv6InternetBandwidthLister struct {
	indexer cache.Indexer
}

// NewIpv6InternetBandwidthLister returns a new Ipv6InternetBandwidthLister.
func NewIpv6InternetBandwidthLister(indexer cache.Indexer) Ipv6InternetBandwidthLister {
	return &ipv6InternetBandwidthLister{indexer: indexer}
}

// List lists all Ipv6InternetBandwidths in the indexer.
func (s *ipv6InternetBandwidthLister) List(selector labels.Selector) (ret []*v1alpha1.Ipv6InternetBandwidth, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv6InternetBandwidth))
	})
	return ret, err
}

// Ipv6InternetBandwidths returns an object that can list and get Ipv6InternetBandwidths.
func (s *ipv6InternetBandwidthLister) Ipv6InternetBandwidths(namespace string) Ipv6InternetBandwidthNamespaceLister {
	return ipv6InternetBandwidthNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Ipv6InternetBandwidthNamespaceLister helps list and get Ipv6InternetBandwidths.
// All objects returned here must be treated as read-only.
type Ipv6InternetBandwidthNamespaceLister interface {
	// List lists all Ipv6InternetBandwidths in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv6InternetBandwidth, err error)
	// Get retrieves the Ipv6InternetBandwidth from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ipv6InternetBandwidth, error)
	Ipv6InternetBandwidthNamespaceListerExpansion
}

// ipv6InternetBandwidthNamespaceLister implements the Ipv6InternetBandwidthNamespaceLister
// interface.
type ipv6InternetBandwidthNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ipv6InternetBandwidths in the indexer for a given namespace.
func (s ipv6InternetBandwidthNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ipv6InternetBandwidth, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv6InternetBandwidth))
	})
	return ret, err
}

// Get retrieves the Ipv6InternetBandwidth from the indexer for a given namespace and name.
func (s ipv6InternetBandwidthNamespaceLister) Get(name string) (*v1alpha1.Ipv6InternetBandwidth, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipv6internetbandwidth"), name)
	}
	return obj.(*v1alpha1.Ipv6InternetBandwidth), nil
}
