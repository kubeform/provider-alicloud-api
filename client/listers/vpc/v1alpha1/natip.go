/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NatIPLister helps list NatIPs.
// All objects returned here must be treated as read-only.
type NatIPLister interface {
	// List lists all NatIPs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NatIP, err error)
	// NatIPs returns an object that can list and get NatIPs.
	NatIPs(namespace string) NatIPNamespaceLister
	NatIPListerExpansion
}

// natIPLister implements the NatIPLister interface.
type natIPLister struct {
	indexer cache.Indexer
}

// NewNatIPLister returns a new NatIPLister.
func NewNatIPLister(indexer cache.Indexer) NatIPLister {
	return &natIPLister{indexer: indexer}
}

// List lists all NatIPs in the indexer.
func (s *natIPLister) List(selector labels.Selector) (ret []*v1alpha1.NatIP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NatIP))
	})
	return ret, err
}

// NatIPs returns an object that can list and get NatIPs.
func (s *natIPLister) NatIPs(namespace string) NatIPNamespaceLister {
	return natIPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NatIPNamespaceLister helps list and get NatIPs.
// All objects returned here must be treated as read-only.
type NatIPNamespaceLister interface {
	// List lists all NatIPs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NatIP, err error)
	// Get retrieves the NatIP from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NatIP, error)
	NatIPNamespaceListerExpansion
}

// natIPNamespaceLister implements the NatIPNamespaceLister
// interface.
type natIPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NatIPs in the indexer for a given namespace.
func (s natIPNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NatIP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NatIP))
	})
	return ret, err
}

// Get retrieves the NatIP from the indexer for a given namespace and name.
func (s natIPNamespaceLister) Get(name string) (*v1alpha1.NatIP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("natip"), name)
	}
	return obj.(*v1alpha1.NatIP), nil
}
