/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DhcpOptionsSetLister helps list DhcpOptionsSets.
// All objects returned here must be treated as read-only.
type DhcpOptionsSetLister interface {
	// List lists all DhcpOptionsSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DhcpOptionsSet, err error)
	// DhcpOptionsSets returns an object that can list and get DhcpOptionsSets.
	DhcpOptionsSets(namespace string) DhcpOptionsSetNamespaceLister
	DhcpOptionsSetListerExpansion
}

// dhcpOptionsSetLister implements the DhcpOptionsSetLister interface.
type dhcpOptionsSetLister struct {
	indexer cache.Indexer
}

// NewDhcpOptionsSetLister returns a new DhcpOptionsSetLister.
func NewDhcpOptionsSetLister(indexer cache.Indexer) DhcpOptionsSetLister {
	return &dhcpOptionsSetLister{indexer: indexer}
}

// List lists all DhcpOptionsSets in the indexer.
func (s *dhcpOptionsSetLister) List(selector labels.Selector) (ret []*v1alpha1.DhcpOptionsSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DhcpOptionsSet))
	})
	return ret, err
}

// DhcpOptionsSets returns an object that can list and get DhcpOptionsSets.
func (s *dhcpOptionsSetLister) DhcpOptionsSets(namespace string) DhcpOptionsSetNamespaceLister {
	return dhcpOptionsSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DhcpOptionsSetNamespaceLister helps list and get DhcpOptionsSets.
// All objects returned here must be treated as read-only.
type DhcpOptionsSetNamespaceLister interface {
	// List lists all DhcpOptionsSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DhcpOptionsSet, err error)
	// Get retrieves the DhcpOptionsSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DhcpOptionsSet, error)
	DhcpOptionsSetNamespaceListerExpansion
}

// dhcpOptionsSetNamespaceLister implements the DhcpOptionsSetNamespaceLister
// interface.
type dhcpOptionsSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DhcpOptionsSets in the indexer for a given namespace.
func (s dhcpOptionsSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DhcpOptionsSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DhcpOptionsSet))
	})
	return ret, err
}

// Get retrieves the DhcpOptionsSet from the indexer for a given namespace and name.
func (s dhcpOptionsSetNamespaceLister) Get(name string) (*v1alpha1.DhcpOptionsSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dhcpoptionsset"), name)
	}
	return obj.(*v1alpha1.DhcpOptionsSet), nil
}
