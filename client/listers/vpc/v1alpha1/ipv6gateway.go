/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Ipv6GatewayLister helps list Ipv6Gateways.
// All objects returned here must be treated as read-only.
type Ipv6GatewayLister interface {
	// List lists all Ipv6Gateways in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv6Gateway, err error)
	// Ipv6Gateways returns an object that can list and get Ipv6Gateways.
	Ipv6Gateways(namespace string) Ipv6GatewayNamespaceLister
	Ipv6GatewayListerExpansion
}

// ipv6GatewayLister implements the Ipv6GatewayLister interface.
type ipv6GatewayLister struct {
	indexer cache.Indexer
}

// NewIpv6GatewayLister returns a new Ipv6GatewayLister.
func NewIpv6GatewayLister(indexer cache.Indexer) Ipv6GatewayLister {
	return &ipv6GatewayLister{indexer: indexer}
}

// List lists all Ipv6Gateways in the indexer.
func (s *ipv6GatewayLister) List(selector labels.Selector) (ret []*v1alpha1.Ipv6Gateway, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv6Gateway))
	})
	return ret, err
}

// Ipv6Gateways returns an object that can list and get Ipv6Gateways.
func (s *ipv6GatewayLister) Ipv6Gateways(namespace string) Ipv6GatewayNamespaceLister {
	return ipv6GatewayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Ipv6GatewayNamespaceLister helps list and get Ipv6Gateways.
// All objects returned here must be treated as read-only.
type Ipv6GatewayNamespaceLister interface {
	// List lists all Ipv6Gateways in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv6Gateway, err error)
	// Get retrieves the Ipv6Gateway from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ipv6Gateway, error)
	Ipv6GatewayNamespaceListerExpansion
}

// ipv6GatewayNamespaceLister implements the Ipv6GatewayNamespaceLister
// interface.
type ipv6GatewayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ipv6Gateways in the indexer for a given namespace.
func (s ipv6GatewayNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ipv6Gateway, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv6Gateway))
	})
	return ret, err
}

// Get retrieves the Ipv6Gateway from the indexer for a given namespace and name.
func (s ipv6GatewayNamespaceLister) Get(name string) (*v1alpha1.Ipv6Gateway, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipv6gateway"), name)
	}
	return obj.(*v1alpha1.Ipv6Gateway), nil
}
