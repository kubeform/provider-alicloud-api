/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/express/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConnectVirtualBorderRouterLister helps list ConnectVirtualBorderRouters.
// All objects returned here must be treated as read-only.
type ConnectVirtualBorderRouterLister interface {
	// List lists all ConnectVirtualBorderRouters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectVirtualBorderRouter, err error)
	// ConnectVirtualBorderRouters returns an object that can list and get ConnectVirtualBorderRouters.
	ConnectVirtualBorderRouters(namespace string) ConnectVirtualBorderRouterNamespaceLister
	ConnectVirtualBorderRouterListerExpansion
}

// connectVirtualBorderRouterLister implements the ConnectVirtualBorderRouterLister interface.
type connectVirtualBorderRouterLister struct {
	indexer cache.Indexer
}

// NewConnectVirtualBorderRouterLister returns a new ConnectVirtualBorderRouterLister.
func NewConnectVirtualBorderRouterLister(indexer cache.Indexer) ConnectVirtualBorderRouterLister {
	return &connectVirtualBorderRouterLister{indexer: indexer}
}

// List lists all ConnectVirtualBorderRouters in the indexer.
func (s *connectVirtualBorderRouterLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectVirtualBorderRouter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectVirtualBorderRouter))
	})
	return ret, err
}

// ConnectVirtualBorderRouters returns an object that can list and get ConnectVirtualBorderRouters.
func (s *connectVirtualBorderRouterLister) ConnectVirtualBorderRouters(namespace string) ConnectVirtualBorderRouterNamespaceLister {
	return connectVirtualBorderRouterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectVirtualBorderRouterNamespaceLister helps list and get ConnectVirtualBorderRouters.
// All objects returned here must be treated as read-only.
type ConnectVirtualBorderRouterNamespaceLister interface {
	// List lists all ConnectVirtualBorderRouters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectVirtualBorderRouter, err error)
	// Get retrieves the ConnectVirtualBorderRouter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConnectVirtualBorderRouter, error)
	ConnectVirtualBorderRouterNamespaceListerExpansion
}

// connectVirtualBorderRouterNamespaceLister implements the ConnectVirtualBorderRouterNamespaceLister
// interface.
type connectVirtualBorderRouterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectVirtualBorderRouters in the indexer for a given namespace.
func (s connectVirtualBorderRouterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectVirtualBorderRouter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectVirtualBorderRouter))
	})
	return ret, err
}

// Get retrieves the ConnectVirtualBorderRouter from the indexer for a given namespace and name.
func (s connectVirtualBorderRouterNamespaceLister) Get(name string) (*v1alpha1.ConnectVirtualBorderRouter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("connectvirtualborderrouter"), name)
	}
	return obj.(*v1alpha1.ConnectVirtualBorderRouter), nil
}
