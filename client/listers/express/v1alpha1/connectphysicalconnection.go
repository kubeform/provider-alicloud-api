/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/express/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConnectPhysicalConnectionLister helps list ConnectPhysicalConnections.
// All objects returned here must be treated as read-only.
type ConnectPhysicalConnectionLister interface {
	// List lists all ConnectPhysicalConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectPhysicalConnection, err error)
	// ConnectPhysicalConnections returns an object that can list and get ConnectPhysicalConnections.
	ConnectPhysicalConnections(namespace string) ConnectPhysicalConnectionNamespaceLister
	ConnectPhysicalConnectionListerExpansion
}

// connectPhysicalConnectionLister implements the ConnectPhysicalConnectionLister interface.
type connectPhysicalConnectionLister struct {
	indexer cache.Indexer
}

// NewConnectPhysicalConnectionLister returns a new ConnectPhysicalConnectionLister.
func NewConnectPhysicalConnectionLister(indexer cache.Indexer) ConnectPhysicalConnectionLister {
	return &connectPhysicalConnectionLister{indexer: indexer}
}

// List lists all ConnectPhysicalConnections in the indexer.
func (s *connectPhysicalConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectPhysicalConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectPhysicalConnection))
	})
	return ret, err
}

// ConnectPhysicalConnections returns an object that can list and get ConnectPhysicalConnections.
func (s *connectPhysicalConnectionLister) ConnectPhysicalConnections(namespace string) ConnectPhysicalConnectionNamespaceLister {
	return connectPhysicalConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectPhysicalConnectionNamespaceLister helps list and get ConnectPhysicalConnections.
// All objects returned here must be treated as read-only.
type ConnectPhysicalConnectionNamespaceLister interface {
	// List lists all ConnectPhysicalConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectPhysicalConnection, err error)
	// Get retrieves the ConnectPhysicalConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConnectPhysicalConnection, error)
	ConnectPhysicalConnectionNamespaceListerExpansion
}

// connectPhysicalConnectionNamespaceLister implements the ConnectPhysicalConnectionNamespaceLister
// interface.
type connectPhysicalConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectPhysicalConnections in the indexer for a given namespace.
func (s connectPhysicalConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectPhysicalConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectPhysicalConnection))
	})
	return ret, err
}

// Get retrieves the ConnectPhysicalConnection from the indexer for a given namespace and name.
func (s connectPhysicalConnectionNamespaceLister) Get(name string) (*v1alpha1.ConnectPhysicalConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("connectphysicalconnection"), name)
	}
	return obj.(*v1alpha1.ConnectPhysicalConnection), nil
}
