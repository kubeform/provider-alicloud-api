/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/eci/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ContainerGroupLister helps list ContainerGroups.
// All objects returned here must be treated as read-only.
type ContainerGroupLister interface {
	// List lists all ContainerGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ContainerGroup, err error)
	// ContainerGroups returns an object that can list and get ContainerGroups.
	ContainerGroups(namespace string) ContainerGroupNamespaceLister
	ContainerGroupListerExpansion
}

// containerGroupLister implements the ContainerGroupLister interface.
type containerGroupLister struct {
	indexer cache.Indexer
}

// NewContainerGroupLister returns a new ContainerGroupLister.
func NewContainerGroupLister(indexer cache.Indexer) ContainerGroupLister {
	return &containerGroupLister{indexer: indexer}
}

// List lists all ContainerGroups in the indexer.
func (s *containerGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ContainerGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ContainerGroup))
	})
	return ret, err
}

// ContainerGroups returns an object that can list and get ContainerGroups.
func (s *containerGroupLister) ContainerGroups(namespace string) ContainerGroupNamespaceLister {
	return containerGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ContainerGroupNamespaceLister helps list and get ContainerGroups.
// All objects returned here must be treated as read-only.
type ContainerGroupNamespaceLister interface {
	// List lists all ContainerGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ContainerGroup, err error)
	// Get retrieves the ContainerGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ContainerGroup, error)
	ContainerGroupNamespaceListerExpansion
}

// containerGroupNamespaceLister implements the ContainerGroupNamespaceLister
// interface.
type containerGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ContainerGroups in the indexer for a given namespace.
func (s containerGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ContainerGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ContainerGroup))
	})
	return ret, err
}

// Get retrieves the ContainerGroup from the indexer for a given namespace and name.
func (s containerGroupNamespaceLister) Get(name string) (*v1alpha1.ContainerGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("containergroup"), name)
	}
	return obj.(*v1alpha1.ContainerGroup), nil
}
