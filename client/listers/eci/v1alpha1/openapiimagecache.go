/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/eci/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenapiImageCacheLister helps list OpenapiImageCaches.
// All objects returned here must be treated as read-only.
type OpenapiImageCacheLister interface {
	// List lists all OpenapiImageCaches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpenapiImageCache, err error)
	// OpenapiImageCaches returns an object that can list and get OpenapiImageCaches.
	OpenapiImageCaches(namespace string) OpenapiImageCacheNamespaceLister
	OpenapiImageCacheListerExpansion
}

// openapiImageCacheLister implements the OpenapiImageCacheLister interface.
type openapiImageCacheLister struct {
	indexer cache.Indexer
}

// NewOpenapiImageCacheLister returns a new OpenapiImageCacheLister.
func NewOpenapiImageCacheLister(indexer cache.Indexer) OpenapiImageCacheLister {
	return &openapiImageCacheLister{indexer: indexer}
}

// List lists all OpenapiImageCaches in the indexer.
func (s *openapiImageCacheLister) List(selector labels.Selector) (ret []*v1alpha1.OpenapiImageCache, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenapiImageCache))
	})
	return ret, err
}

// OpenapiImageCaches returns an object that can list and get OpenapiImageCaches.
func (s *openapiImageCacheLister) OpenapiImageCaches(namespace string) OpenapiImageCacheNamespaceLister {
	return openapiImageCacheNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpenapiImageCacheNamespaceLister helps list and get OpenapiImageCaches.
// All objects returned here must be treated as read-only.
type OpenapiImageCacheNamespaceLister interface {
	// List lists all OpenapiImageCaches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpenapiImageCache, err error)
	// Get retrieves the OpenapiImageCache from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OpenapiImageCache, error)
	OpenapiImageCacheNamespaceListerExpansion
}

// openapiImageCacheNamespaceLister implements the OpenapiImageCacheNamespaceLister
// interface.
type openapiImageCacheNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpenapiImageCaches in the indexer for a given namespace.
func (s openapiImageCacheNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OpenapiImageCache, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenapiImageCache))
	})
	return ret, err
}

// Get retrieves the OpenapiImageCache from the indexer for a given namespace and name.
func (s openapiImageCacheNamespaceLister) Get(name string) (*v1alpha1.OpenapiImageCache, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("openapiimagecache"), name)
	}
	return obj.(*v1alpha1.OpenapiImageCache), nil
}
