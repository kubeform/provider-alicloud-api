/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/kvstore/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuditLogConfigLister helps list AuditLogConfigs.
// All objects returned here must be treated as read-only.
type AuditLogConfigLister interface {
	// List lists all AuditLogConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AuditLogConfig, err error)
	// AuditLogConfigs returns an object that can list and get AuditLogConfigs.
	AuditLogConfigs(namespace string) AuditLogConfigNamespaceLister
	AuditLogConfigListerExpansion
}

// auditLogConfigLister implements the AuditLogConfigLister interface.
type auditLogConfigLister struct {
	indexer cache.Indexer
}

// NewAuditLogConfigLister returns a new AuditLogConfigLister.
func NewAuditLogConfigLister(indexer cache.Indexer) AuditLogConfigLister {
	return &auditLogConfigLister{indexer: indexer}
}

// List lists all AuditLogConfigs in the indexer.
func (s *auditLogConfigLister) List(selector labels.Selector) (ret []*v1alpha1.AuditLogConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuditLogConfig))
	})
	return ret, err
}

// AuditLogConfigs returns an object that can list and get AuditLogConfigs.
func (s *auditLogConfigLister) AuditLogConfigs(namespace string) AuditLogConfigNamespaceLister {
	return auditLogConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuditLogConfigNamespaceLister helps list and get AuditLogConfigs.
// All objects returned here must be treated as read-only.
type AuditLogConfigNamespaceLister interface {
	// List lists all AuditLogConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AuditLogConfig, err error)
	// Get retrieves the AuditLogConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AuditLogConfig, error)
	AuditLogConfigNamespaceListerExpansion
}

// auditLogConfigNamespaceLister implements the AuditLogConfigNamespaceLister
// interface.
type auditLogConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AuditLogConfigs in the indexer for a given namespace.
func (s auditLogConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AuditLogConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuditLogConfig))
	})
	return ret, err
}

// Get retrieves the AuditLogConfig from the indexer for a given namespace and name.
func (s auditLogConfigNamespaceLister) Get(name string) (*v1alpha1.AuditLogConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("auditlogconfig"), name)
	}
	return obj.(*v1alpha1.AuditLogConfig), nil
}
