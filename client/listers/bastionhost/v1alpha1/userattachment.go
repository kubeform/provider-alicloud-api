/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/bastionhost/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserAttachmentLister helps list UserAttachments.
// All objects returned here must be treated as read-only.
type UserAttachmentLister interface {
	// List lists all UserAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserAttachment, err error)
	// UserAttachments returns an object that can list and get UserAttachments.
	UserAttachments(namespace string) UserAttachmentNamespaceLister
	UserAttachmentListerExpansion
}

// userAttachmentLister implements the UserAttachmentLister interface.
type userAttachmentLister struct {
	indexer cache.Indexer
}

// NewUserAttachmentLister returns a new UserAttachmentLister.
func NewUserAttachmentLister(indexer cache.Indexer) UserAttachmentLister {
	return &userAttachmentLister{indexer: indexer}
}

// List lists all UserAttachments in the indexer.
func (s *userAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.UserAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserAttachment))
	})
	return ret, err
}

// UserAttachments returns an object that can list and get UserAttachments.
func (s *userAttachmentLister) UserAttachments(namespace string) UserAttachmentNamespaceLister {
	return userAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserAttachmentNamespaceLister helps list and get UserAttachments.
// All objects returned here must be treated as read-only.
type UserAttachmentNamespaceLister interface {
	// List lists all UserAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserAttachment, err error)
	// Get retrieves the UserAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserAttachment, error)
	UserAttachmentNamespaceListerExpansion
}

// userAttachmentNamespaceLister implements the UserAttachmentNamespaceLister
// interface.
type userAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserAttachments in the indexer for a given namespace.
func (s userAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserAttachment))
	})
	return ret, err
}

// Get retrieves the UserAttachment from the indexer for a given namespace and name.
func (s userAttachmentNamespaceLister) Get(name string) (*v1alpha1.UserAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userattachment"), name)
	}
	return obj.(*v1alpha1.UserAttachment), nil
}
