/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/bastionhost/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HostAccountUserAttachmentLister helps list HostAccountUserAttachments.
// All objects returned here must be treated as read-only.
type HostAccountUserAttachmentLister interface {
	// List lists all HostAccountUserAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostAccountUserAttachment, err error)
	// HostAccountUserAttachments returns an object that can list and get HostAccountUserAttachments.
	HostAccountUserAttachments(namespace string) HostAccountUserAttachmentNamespaceLister
	HostAccountUserAttachmentListerExpansion
}

// hostAccountUserAttachmentLister implements the HostAccountUserAttachmentLister interface.
type hostAccountUserAttachmentLister struct {
	indexer cache.Indexer
}

// NewHostAccountUserAttachmentLister returns a new HostAccountUserAttachmentLister.
func NewHostAccountUserAttachmentLister(indexer cache.Indexer) HostAccountUserAttachmentLister {
	return &hostAccountUserAttachmentLister{indexer: indexer}
}

// List lists all HostAccountUserAttachments in the indexer.
func (s *hostAccountUserAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.HostAccountUserAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostAccountUserAttachment))
	})
	return ret, err
}

// HostAccountUserAttachments returns an object that can list and get HostAccountUserAttachments.
func (s *hostAccountUserAttachmentLister) HostAccountUserAttachments(namespace string) HostAccountUserAttachmentNamespaceLister {
	return hostAccountUserAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HostAccountUserAttachmentNamespaceLister helps list and get HostAccountUserAttachments.
// All objects returned here must be treated as read-only.
type HostAccountUserAttachmentNamespaceLister interface {
	// List lists all HostAccountUserAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostAccountUserAttachment, err error)
	// Get retrieves the HostAccountUserAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HostAccountUserAttachment, error)
	HostAccountUserAttachmentNamespaceListerExpansion
}

// hostAccountUserAttachmentNamespaceLister implements the HostAccountUserAttachmentNamespaceLister
// interface.
type hostAccountUserAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HostAccountUserAttachments in the indexer for a given namespace.
func (s hostAccountUserAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HostAccountUserAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostAccountUserAttachment))
	})
	return ret, err
}

// Get retrieves the HostAccountUserAttachment from the indexer for a given namespace and name.
func (s hostAccountUserAttachmentNamespaceLister) Get(name string) (*v1alpha1.HostAccountUserAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hostaccountuserattachment"), name)
	}
	return obj.(*v1alpha1.HostAccountUserAttachment), nil
}
