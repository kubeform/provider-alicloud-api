/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/bastionhost/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HostAttachmentLister helps list HostAttachments.
// All objects returned here must be treated as read-only.
type HostAttachmentLister interface {
	// List lists all HostAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostAttachment, err error)
	// HostAttachments returns an object that can list and get HostAttachments.
	HostAttachments(namespace string) HostAttachmentNamespaceLister
	HostAttachmentListerExpansion
}

// hostAttachmentLister implements the HostAttachmentLister interface.
type hostAttachmentLister struct {
	indexer cache.Indexer
}

// NewHostAttachmentLister returns a new HostAttachmentLister.
func NewHostAttachmentLister(indexer cache.Indexer) HostAttachmentLister {
	return &hostAttachmentLister{indexer: indexer}
}

// List lists all HostAttachments in the indexer.
func (s *hostAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.HostAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostAttachment))
	})
	return ret, err
}

// HostAttachments returns an object that can list and get HostAttachments.
func (s *hostAttachmentLister) HostAttachments(namespace string) HostAttachmentNamespaceLister {
	return hostAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HostAttachmentNamespaceLister helps list and get HostAttachments.
// All objects returned here must be treated as read-only.
type HostAttachmentNamespaceLister interface {
	// List lists all HostAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostAttachment, err error)
	// Get retrieves the HostAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HostAttachment, error)
	HostAttachmentNamespaceListerExpansion
}

// hostAttachmentNamespaceLister implements the HostAttachmentNamespaceLister
// interface.
type hostAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HostAttachments in the indexer for a given namespace.
func (s hostAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HostAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostAttachment))
	})
	return ret, err
}

// Get retrieves the HostAttachment from the indexer for a given namespace and name.
func (s hostAttachmentNamespaceLister) Get(name string) (*v1alpha1.HostAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hostattachment"), name)
	}
	return obj.(*v1alpha1.HostAttachment), nil
}
