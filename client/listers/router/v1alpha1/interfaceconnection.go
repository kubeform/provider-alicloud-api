/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/router/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InterfaceConnectionLister helps list InterfaceConnections.
// All objects returned here must be treated as read-only.
type InterfaceConnectionLister interface {
	// List lists all InterfaceConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InterfaceConnection, err error)
	// InterfaceConnections returns an object that can list and get InterfaceConnections.
	InterfaceConnections(namespace string) InterfaceConnectionNamespaceLister
	InterfaceConnectionListerExpansion
}

// interfaceConnectionLister implements the InterfaceConnectionLister interface.
type interfaceConnectionLister struct {
	indexer cache.Indexer
}

// NewInterfaceConnectionLister returns a new InterfaceConnectionLister.
func NewInterfaceConnectionLister(indexer cache.Indexer) InterfaceConnectionLister {
	return &interfaceConnectionLister{indexer: indexer}
}

// List lists all InterfaceConnections in the indexer.
func (s *interfaceConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.InterfaceConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InterfaceConnection))
	})
	return ret, err
}

// InterfaceConnections returns an object that can list and get InterfaceConnections.
func (s *interfaceConnectionLister) InterfaceConnections(namespace string) InterfaceConnectionNamespaceLister {
	return interfaceConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InterfaceConnectionNamespaceLister helps list and get InterfaceConnections.
// All objects returned here must be treated as read-only.
type InterfaceConnectionNamespaceLister interface {
	// List lists all InterfaceConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InterfaceConnection, err error)
	// Get retrieves the InterfaceConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InterfaceConnection, error)
	InterfaceConnectionNamespaceListerExpansion
}

// interfaceConnectionNamespaceLister implements the InterfaceConnectionNamespaceLister
// interface.
type interfaceConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InterfaceConnections in the indexer for a given namespace.
func (s interfaceConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InterfaceConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InterfaceConnection))
	})
	return ret, err
}

// Get retrieves the InterfaceConnection from the indexer for a given namespace and name.
func (s interfaceConnectionNamespaceLister) Get(name string) (*v1alpha1.InterfaceConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("interfaceconnection"), name)
	}
	return obj.(*v1alpha1.InterfaceConnection), nil
}
