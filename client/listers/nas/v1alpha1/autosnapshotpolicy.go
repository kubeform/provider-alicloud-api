/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/nas/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AutoSnapshotPolicyLister helps list AutoSnapshotPolicies.
// All objects returned here must be treated as read-only.
type AutoSnapshotPolicyLister interface {
	// List lists all AutoSnapshotPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AutoSnapshotPolicy, err error)
	// AutoSnapshotPolicies returns an object that can list and get AutoSnapshotPolicies.
	AutoSnapshotPolicies(namespace string) AutoSnapshotPolicyNamespaceLister
	AutoSnapshotPolicyListerExpansion
}

// autoSnapshotPolicyLister implements the AutoSnapshotPolicyLister interface.
type autoSnapshotPolicyLister struct {
	indexer cache.Indexer
}

// NewAutoSnapshotPolicyLister returns a new AutoSnapshotPolicyLister.
func NewAutoSnapshotPolicyLister(indexer cache.Indexer) AutoSnapshotPolicyLister {
	return &autoSnapshotPolicyLister{indexer: indexer}
}

// List lists all AutoSnapshotPolicies in the indexer.
func (s *autoSnapshotPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.AutoSnapshotPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutoSnapshotPolicy))
	})
	return ret, err
}

// AutoSnapshotPolicies returns an object that can list and get AutoSnapshotPolicies.
func (s *autoSnapshotPolicyLister) AutoSnapshotPolicies(namespace string) AutoSnapshotPolicyNamespaceLister {
	return autoSnapshotPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AutoSnapshotPolicyNamespaceLister helps list and get AutoSnapshotPolicies.
// All objects returned here must be treated as read-only.
type AutoSnapshotPolicyNamespaceLister interface {
	// List lists all AutoSnapshotPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AutoSnapshotPolicy, err error)
	// Get retrieves the AutoSnapshotPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AutoSnapshotPolicy, error)
	AutoSnapshotPolicyNamespaceListerExpansion
}

// autoSnapshotPolicyNamespaceLister implements the AutoSnapshotPolicyNamespaceLister
// interface.
type autoSnapshotPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AutoSnapshotPolicies in the indexer for a given namespace.
func (s autoSnapshotPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AutoSnapshotPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutoSnapshotPolicy))
	})
	return ret, err
}

// Get retrieves the AutoSnapshotPolicy from the indexer for a given namespace and name.
func (s autoSnapshotPolicyNamespaceLister) Get(name string) (*v1alpha1.AutoSnapshotPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("autosnapshotpolicy"), name)
	}
	return obj.(*v1alpha1.AutoSnapshotPolicy), nil
}
