/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/nas/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FilesetLister helps list Filesets.
// All objects returned here must be treated as read-only.
type FilesetLister interface {
	// List lists all Filesets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Fileset, err error)
	// Filesets returns an object that can list and get Filesets.
	Filesets(namespace string) FilesetNamespaceLister
	FilesetListerExpansion
}

// filesetLister implements the FilesetLister interface.
type filesetLister struct {
	indexer cache.Indexer
}

// NewFilesetLister returns a new FilesetLister.
func NewFilesetLister(indexer cache.Indexer) FilesetLister {
	return &filesetLister{indexer: indexer}
}

// List lists all Filesets in the indexer.
func (s *filesetLister) List(selector labels.Selector) (ret []*v1alpha1.Fileset, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Fileset))
	})
	return ret, err
}

// Filesets returns an object that can list and get Filesets.
func (s *filesetLister) Filesets(namespace string) FilesetNamespaceLister {
	return filesetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FilesetNamespaceLister helps list and get Filesets.
// All objects returned here must be treated as read-only.
type FilesetNamespaceLister interface {
	// List lists all Filesets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Fileset, err error)
	// Get retrieves the Fileset from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Fileset, error)
	FilesetNamespaceListerExpansion
}

// filesetNamespaceLister implements the FilesetNamespaceLister
// interface.
type filesetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Filesets in the indexer for a given namespace.
func (s filesetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Fileset, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Fileset))
	})
	return ret, err
}

// Get retrieves the Fileset from the indexer for a given namespace and name.
func (s filesetNamespaceLister) Get(name string) (*v1alpha1.Fileset, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fileset"), name)
	}
	return obj.(*v1alpha1.Fileset), nil
}
