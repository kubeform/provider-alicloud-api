/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ecs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KeyPairAttachmentLister helps list KeyPairAttachments.
// All objects returned here must be treated as read-only.
type KeyPairAttachmentLister interface {
	// List lists all KeyPairAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeyPairAttachment, err error)
	// KeyPairAttachments returns an object that can list and get KeyPairAttachments.
	KeyPairAttachments(namespace string) KeyPairAttachmentNamespaceLister
	KeyPairAttachmentListerExpansion
}

// keyPairAttachmentLister implements the KeyPairAttachmentLister interface.
type keyPairAttachmentLister struct {
	indexer cache.Indexer
}

// NewKeyPairAttachmentLister returns a new KeyPairAttachmentLister.
func NewKeyPairAttachmentLister(indexer cache.Indexer) KeyPairAttachmentLister {
	return &keyPairAttachmentLister{indexer: indexer}
}

// List lists all KeyPairAttachments in the indexer.
func (s *keyPairAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.KeyPairAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyPairAttachment))
	})
	return ret, err
}

// KeyPairAttachments returns an object that can list and get KeyPairAttachments.
func (s *keyPairAttachmentLister) KeyPairAttachments(namespace string) KeyPairAttachmentNamespaceLister {
	return keyPairAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeyPairAttachmentNamespaceLister helps list and get KeyPairAttachments.
// All objects returned here must be treated as read-only.
type KeyPairAttachmentNamespaceLister interface {
	// List lists all KeyPairAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeyPairAttachment, err error)
	// Get retrieves the KeyPairAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KeyPairAttachment, error)
	KeyPairAttachmentNamespaceListerExpansion
}

// keyPairAttachmentNamespaceLister implements the KeyPairAttachmentNamespaceLister
// interface.
type keyPairAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeyPairAttachments in the indexer for a given namespace.
func (s keyPairAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeyPairAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyPairAttachment))
	})
	return ret, err
}

// Get retrieves the KeyPairAttachment from the indexer for a given namespace and name.
func (s keyPairAttachmentNamespaceLister) Get(name string) (*v1alpha1.KeyPairAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keypairattachment"), name)
	}
	return obj.(*v1alpha1.KeyPairAttachment), nil
}
