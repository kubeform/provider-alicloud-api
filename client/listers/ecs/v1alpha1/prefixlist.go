/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ecs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrefixListLister helps list PrefixLists.
// All objects returned here must be treated as read-only.
type PrefixListLister interface {
	// List lists all PrefixLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrefixList, err error)
	// PrefixLists returns an object that can list and get PrefixLists.
	PrefixLists(namespace string) PrefixListNamespaceLister
	PrefixListListerExpansion
}

// prefixListLister implements the PrefixListLister interface.
type prefixListLister struct {
	indexer cache.Indexer
}

// NewPrefixListLister returns a new PrefixListLister.
func NewPrefixListLister(indexer cache.Indexer) PrefixListLister {
	return &prefixListLister{indexer: indexer}
}

// List lists all PrefixLists in the indexer.
func (s *prefixListLister) List(selector labels.Selector) (ret []*v1alpha1.PrefixList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrefixList))
	})
	return ret, err
}

// PrefixLists returns an object that can list and get PrefixLists.
func (s *prefixListLister) PrefixLists(namespace string) PrefixListNamespaceLister {
	return prefixListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrefixListNamespaceLister helps list and get PrefixLists.
// All objects returned here must be treated as read-only.
type PrefixListNamespaceLister interface {
	// List lists all PrefixLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrefixList, err error)
	// Get retrieves the PrefixList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PrefixList, error)
	PrefixListNamespaceListerExpansion
}

// prefixListNamespaceLister implements the PrefixListNamespaceLister
// interface.
type prefixListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrefixLists in the indexer for a given namespace.
func (s prefixListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrefixList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrefixList))
	})
	return ret, err
}

// Get retrieves the PrefixList from the indexer for a given namespace and name.
func (s prefixListNamespaceLister) Get(name string) (*v1alpha1.PrefixList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("prefixlist"), name)
	}
	return obj.(*v1alpha1.PrefixList), nil
}
