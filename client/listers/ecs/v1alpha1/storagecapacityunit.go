/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ecs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageCapacityUnitLister helps list StorageCapacityUnits.
// All objects returned here must be treated as read-only.
type StorageCapacityUnitLister interface {
	// List lists all StorageCapacityUnits in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageCapacityUnit, err error)
	// StorageCapacityUnits returns an object that can list and get StorageCapacityUnits.
	StorageCapacityUnits(namespace string) StorageCapacityUnitNamespaceLister
	StorageCapacityUnitListerExpansion
}

// storageCapacityUnitLister implements the StorageCapacityUnitLister interface.
type storageCapacityUnitLister struct {
	indexer cache.Indexer
}

// NewStorageCapacityUnitLister returns a new StorageCapacityUnitLister.
func NewStorageCapacityUnitLister(indexer cache.Indexer) StorageCapacityUnitLister {
	return &storageCapacityUnitLister{indexer: indexer}
}

// List lists all StorageCapacityUnits in the indexer.
func (s *storageCapacityUnitLister) List(selector labels.Selector) (ret []*v1alpha1.StorageCapacityUnit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageCapacityUnit))
	})
	return ret, err
}

// StorageCapacityUnits returns an object that can list and get StorageCapacityUnits.
func (s *storageCapacityUnitLister) StorageCapacityUnits(namespace string) StorageCapacityUnitNamespaceLister {
	return storageCapacityUnitNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageCapacityUnitNamespaceLister helps list and get StorageCapacityUnits.
// All objects returned here must be treated as read-only.
type StorageCapacityUnitNamespaceLister interface {
	// List lists all StorageCapacityUnits in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageCapacityUnit, err error)
	// Get retrieves the StorageCapacityUnit from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StorageCapacityUnit, error)
	StorageCapacityUnitNamespaceListerExpansion
}

// storageCapacityUnitNamespaceLister implements the StorageCapacityUnitNamespaceLister
// interface.
type storageCapacityUnitNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageCapacityUnits in the indexer for a given namespace.
func (s storageCapacityUnitNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageCapacityUnit, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageCapacityUnit))
	})
	return ret, err
}

// Get retrieves the StorageCapacityUnit from the indexer for a given namespace and name.
func (s storageCapacityUnitNamespaceLister) Get(name string) (*v1alpha1.StorageCapacityUnit, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagecapacityunit"), name)
	}
	return obj.(*v1alpha1.StorageCapacityUnit), nil
}
