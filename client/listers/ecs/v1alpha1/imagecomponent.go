/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ecs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImageComponentLister helps list ImageComponents.
// All objects returned here must be treated as read-only.
type ImageComponentLister interface {
	// List lists all ImageComponents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageComponent, err error)
	// ImageComponents returns an object that can list and get ImageComponents.
	ImageComponents(namespace string) ImageComponentNamespaceLister
	ImageComponentListerExpansion
}

// imageComponentLister implements the ImageComponentLister interface.
type imageComponentLister struct {
	indexer cache.Indexer
}

// NewImageComponentLister returns a new ImageComponentLister.
func NewImageComponentLister(indexer cache.Indexer) ImageComponentLister {
	return &imageComponentLister{indexer: indexer}
}

// List lists all ImageComponents in the indexer.
func (s *imageComponentLister) List(selector labels.Selector) (ret []*v1alpha1.ImageComponent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageComponent))
	})
	return ret, err
}

// ImageComponents returns an object that can list and get ImageComponents.
func (s *imageComponentLister) ImageComponents(namespace string) ImageComponentNamespaceLister {
	return imageComponentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImageComponentNamespaceLister helps list and get ImageComponents.
// All objects returned here must be treated as read-only.
type ImageComponentNamespaceLister interface {
	// List lists all ImageComponents in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageComponent, err error)
	// Get retrieves the ImageComponent from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ImageComponent, error)
	ImageComponentNamespaceListerExpansion
}

// imageComponentNamespaceLister implements the ImageComponentNamespaceLister
// interface.
type imageComponentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImageComponents in the indexer for a given namespace.
func (s imageComponentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ImageComponent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageComponent))
	})
	return ret, err
}

// Get retrieves the ImageComponent from the indexer for a given namespace and name.
func (s imageComponentNamespaceLister) Get(name string) (*v1alpha1.ImageComponent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("imagecomponent"), name)
	}
	return obj.(*v1alpha1.ImageComponent), nil
}
