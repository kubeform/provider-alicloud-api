/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ecs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DiskAttachmentLister helps list DiskAttachments.
// All objects returned here must be treated as read-only.
type DiskAttachmentLister interface {
	// List lists all DiskAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DiskAttachment, err error)
	// DiskAttachments returns an object that can list and get DiskAttachments.
	DiskAttachments(namespace string) DiskAttachmentNamespaceLister
	DiskAttachmentListerExpansion
}

// diskAttachmentLister implements the DiskAttachmentLister interface.
type diskAttachmentLister struct {
	indexer cache.Indexer
}

// NewDiskAttachmentLister returns a new DiskAttachmentLister.
func NewDiskAttachmentLister(indexer cache.Indexer) DiskAttachmentLister {
	return &diskAttachmentLister{indexer: indexer}
}

// List lists all DiskAttachments in the indexer.
func (s *diskAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.DiskAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DiskAttachment))
	})
	return ret, err
}

// DiskAttachments returns an object that can list and get DiskAttachments.
func (s *diskAttachmentLister) DiskAttachments(namespace string) DiskAttachmentNamespaceLister {
	return diskAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DiskAttachmentNamespaceLister helps list and get DiskAttachments.
// All objects returned here must be treated as read-only.
type DiskAttachmentNamespaceLister interface {
	// List lists all DiskAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DiskAttachment, err error)
	// Get retrieves the DiskAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DiskAttachment, error)
	DiskAttachmentNamespaceListerExpansion
}

// diskAttachmentNamespaceLister implements the DiskAttachmentNamespaceLister
// interface.
type diskAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DiskAttachments in the indexer for a given namespace.
func (s diskAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DiskAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DiskAttachment))
	})
	return ret, err
}

// Get retrieves the DiskAttachment from the indexer for a given namespace and name.
func (s diskAttachmentNamespaceLister) Get(name string) (*v1alpha1.DiskAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("diskattachment"), name)
	}
	return obj.(*v1alpha1.DiskAttachment), nil
}
