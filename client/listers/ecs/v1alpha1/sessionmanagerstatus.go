/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ecs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SessionManagerStatusLister helps list SessionManagerStatuses.
// All objects returned here must be treated as read-only.
type SessionManagerStatusLister interface {
	// List lists all SessionManagerStatuses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SessionManagerStatus, err error)
	// SessionManagerStatuses returns an object that can list and get SessionManagerStatuses.
	SessionManagerStatuses(namespace string) SessionManagerStatusNamespaceLister
	SessionManagerStatusListerExpansion
}

// sessionManagerStatusLister implements the SessionManagerStatusLister interface.
type sessionManagerStatusLister struct {
	indexer cache.Indexer
}

// NewSessionManagerStatusLister returns a new SessionManagerStatusLister.
func NewSessionManagerStatusLister(indexer cache.Indexer) SessionManagerStatusLister {
	return &sessionManagerStatusLister{indexer: indexer}
}

// List lists all SessionManagerStatuses in the indexer.
func (s *sessionManagerStatusLister) List(selector labels.Selector) (ret []*v1alpha1.SessionManagerStatus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SessionManagerStatus))
	})
	return ret, err
}

// SessionManagerStatuses returns an object that can list and get SessionManagerStatuses.
func (s *sessionManagerStatusLister) SessionManagerStatuses(namespace string) SessionManagerStatusNamespaceLister {
	return sessionManagerStatusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SessionManagerStatusNamespaceLister helps list and get SessionManagerStatuses.
// All objects returned here must be treated as read-only.
type SessionManagerStatusNamespaceLister interface {
	// List lists all SessionManagerStatuses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SessionManagerStatus, err error)
	// Get retrieves the SessionManagerStatus from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SessionManagerStatus, error)
	SessionManagerStatusNamespaceListerExpansion
}

// sessionManagerStatusNamespaceLister implements the SessionManagerStatusNamespaceLister
// interface.
type sessionManagerStatusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SessionManagerStatuses in the indexer for a given namespace.
func (s sessionManagerStatusNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SessionManagerStatus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SessionManagerStatus))
	})
	return ret, err
}

// Get retrieves the SessionManagerStatus from the indexer for a given namespace and name.
func (s sessionManagerStatusNamespaceLister) Get(name string) (*v1alpha1.SessionManagerStatus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sessionmanagerstatus"), name)
	}
	return obj.(*v1alpha1.SessionManagerStatus), nil
}
