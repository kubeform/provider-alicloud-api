/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ecs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DedicatedHostClusterLister helps list DedicatedHostClusters.
// All objects returned here must be treated as read-only.
type DedicatedHostClusterLister interface {
	// List lists all DedicatedHostClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedHostCluster, err error)
	// DedicatedHostClusters returns an object that can list and get DedicatedHostClusters.
	DedicatedHostClusters(namespace string) DedicatedHostClusterNamespaceLister
	DedicatedHostClusterListerExpansion
}

// dedicatedHostClusterLister implements the DedicatedHostClusterLister interface.
type dedicatedHostClusterLister struct {
	indexer cache.Indexer
}

// NewDedicatedHostClusterLister returns a new DedicatedHostClusterLister.
func NewDedicatedHostClusterLister(indexer cache.Indexer) DedicatedHostClusterLister {
	return &dedicatedHostClusterLister{indexer: indexer}
}

// List lists all DedicatedHostClusters in the indexer.
func (s *dedicatedHostClusterLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedHostCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedHostCluster))
	})
	return ret, err
}

// DedicatedHostClusters returns an object that can list and get DedicatedHostClusters.
func (s *dedicatedHostClusterLister) DedicatedHostClusters(namespace string) DedicatedHostClusterNamespaceLister {
	return dedicatedHostClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DedicatedHostClusterNamespaceLister helps list and get DedicatedHostClusters.
// All objects returned here must be treated as read-only.
type DedicatedHostClusterNamespaceLister interface {
	// List lists all DedicatedHostClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedHostCluster, err error)
	// Get retrieves the DedicatedHostCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DedicatedHostCluster, error)
	DedicatedHostClusterNamespaceListerExpansion
}

// dedicatedHostClusterNamespaceLister implements the DedicatedHostClusterNamespaceLister
// interface.
type dedicatedHostClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DedicatedHostClusters in the indexer for a given namespace.
func (s dedicatedHostClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedHostCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedHostCluster))
	})
	return ret, err
}

// Get retrieves the DedicatedHostCluster from the indexer for a given namespace and name.
func (s dedicatedHostClusterNamespaceLister) Get(name string) (*v1alpha1.DedicatedHostCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dedicatedhostcluster"), name)
	}
	return obj.(*v1alpha1.DedicatedHostCluster), nil
}
