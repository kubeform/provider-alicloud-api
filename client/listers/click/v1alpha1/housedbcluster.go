/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/click/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HouseDbClusterLister helps list HouseDbClusters.
// All objects returned here must be treated as read-only.
type HouseDbClusterLister interface {
	// List lists all HouseDbClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HouseDbCluster, err error)
	// HouseDbClusters returns an object that can list and get HouseDbClusters.
	HouseDbClusters(namespace string) HouseDbClusterNamespaceLister
	HouseDbClusterListerExpansion
}

// houseDbClusterLister implements the HouseDbClusterLister interface.
type houseDbClusterLister struct {
	indexer cache.Indexer
}

// NewHouseDbClusterLister returns a new HouseDbClusterLister.
func NewHouseDbClusterLister(indexer cache.Indexer) HouseDbClusterLister {
	return &houseDbClusterLister{indexer: indexer}
}

// List lists all HouseDbClusters in the indexer.
func (s *houseDbClusterLister) List(selector labels.Selector) (ret []*v1alpha1.HouseDbCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HouseDbCluster))
	})
	return ret, err
}

// HouseDbClusters returns an object that can list and get HouseDbClusters.
func (s *houseDbClusterLister) HouseDbClusters(namespace string) HouseDbClusterNamespaceLister {
	return houseDbClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HouseDbClusterNamespaceLister helps list and get HouseDbClusters.
// All objects returned here must be treated as read-only.
type HouseDbClusterNamespaceLister interface {
	// List lists all HouseDbClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HouseDbCluster, err error)
	// Get retrieves the HouseDbCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HouseDbCluster, error)
	HouseDbClusterNamespaceListerExpansion
}

// houseDbClusterNamespaceLister implements the HouseDbClusterNamespaceLister
// interface.
type houseDbClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HouseDbClusters in the indexer for a given namespace.
func (s houseDbClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HouseDbCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HouseDbCluster))
	})
	return ret, err
}

// Get retrieves the HouseDbCluster from the indexer for a given namespace and name.
func (s houseDbClusterNamespaceLister) Get(name string) (*v1alpha1.HouseDbCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("housedbcluster"), name)
	}
	return obj.(*v1alpha1.HouseDbCluster), nil
}
