/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/db/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReadWriteSplittingConnectionLister helps list ReadWriteSplittingConnections.
// All objects returned here must be treated as read-only.
type ReadWriteSplittingConnectionLister interface {
	// List lists all ReadWriteSplittingConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReadWriteSplittingConnection, err error)
	// ReadWriteSplittingConnections returns an object that can list and get ReadWriteSplittingConnections.
	ReadWriteSplittingConnections(namespace string) ReadWriteSplittingConnectionNamespaceLister
	ReadWriteSplittingConnectionListerExpansion
}

// readWriteSplittingConnectionLister implements the ReadWriteSplittingConnectionLister interface.
type readWriteSplittingConnectionLister struct {
	indexer cache.Indexer
}

// NewReadWriteSplittingConnectionLister returns a new ReadWriteSplittingConnectionLister.
func NewReadWriteSplittingConnectionLister(indexer cache.Indexer) ReadWriteSplittingConnectionLister {
	return &readWriteSplittingConnectionLister{indexer: indexer}
}

// List lists all ReadWriteSplittingConnections in the indexer.
func (s *readWriteSplittingConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.ReadWriteSplittingConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReadWriteSplittingConnection))
	})
	return ret, err
}

// ReadWriteSplittingConnections returns an object that can list and get ReadWriteSplittingConnections.
func (s *readWriteSplittingConnectionLister) ReadWriteSplittingConnections(namespace string) ReadWriteSplittingConnectionNamespaceLister {
	return readWriteSplittingConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReadWriteSplittingConnectionNamespaceLister helps list and get ReadWriteSplittingConnections.
// All objects returned here must be treated as read-only.
type ReadWriteSplittingConnectionNamespaceLister interface {
	// List lists all ReadWriteSplittingConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReadWriteSplittingConnection, err error)
	// Get retrieves the ReadWriteSplittingConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ReadWriteSplittingConnection, error)
	ReadWriteSplittingConnectionNamespaceListerExpansion
}

// readWriteSplittingConnectionNamespaceLister implements the ReadWriteSplittingConnectionNamespaceLister
// interface.
type readWriteSplittingConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReadWriteSplittingConnections in the indexer for a given namespace.
func (s readWriteSplittingConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ReadWriteSplittingConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReadWriteSplittingConnection))
	})
	return ret, err
}

// Get retrieves the ReadWriteSplittingConnection from the indexer for a given namespace and name.
func (s readWriteSplittingConnectionNamespaceLister) Get(name string) (*v1alpha1.ReadWriteSplittingConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("readwritesplittingconnection"), name)
	}
	return obj.(*v1alpha1.ReadWriteSplittingConnection), nil
}
