/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/alb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HealthCheckTemplateLister helps list HealthCheckTemplates.
// All objects returned here must be treated as read-only.
type HealthCheckTemplateLister interface {
	// List lists all HealthCheckTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HealthCheckTemplate, err error)
	// HealthCheckTemplates returns an object that can list and get HealthCheckTemplates.
	HealthCheckTemplates(namespace string) HealthCheckTemplateNamespaceLister
	HealthCheckTemplateListerExpansion
}

// healthCheckTemplateLister implements the HealthCheckTemplateLister interface.
type healthCheckTemplateLister struct {
	indexer cache.Indexer
}

// NewHealthCheckTemplateLister returns a new HealthCheckTemplateLister.
func NewHealthCheckTemplateLister(indexer cache.Indexer) HealthCheckTemplateLister {
	return &healthCheckTemplateLister{indexer: indexer}
}

// List lists all HealthCheckTemplates in the indexer.
func (s *healthCheckTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.HealthCheckTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HealthCheckTemplate))
	})
	return ret, err
}

// HealthCheckTemplates returns an object that can list and get HealthCheckTemplates.
func (s *healthCheckTemplateLister) HealthCheckTemplates(namespace string) HealthCheckTemplateNamespaceLister {
	return healthCheckTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HealthCheckTemplateNamespaceLister helps list and get HealthCheckTemplates.
// All objects returned here must be treated as read-only.
type HealthCheckTemplateNamespaceLister interface {
	// List lists all HealthCheckTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HealthCheckTemplate, err error)
	// Get retrieves the HealthCheckTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HealthCheckTemplate, error)
	HealthCheckTemplateNamespaceListerExpansion
}

// healthCheckTemplateNamespaceLister implements the HealthCheckTemplateNamespaceLister
// interface.
type healthCheckTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HealthCheckTemplates in the indexer for a given namespace.
func (s healthCheckTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HealthCheckTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HealthCheckTemplate))
	})
	return ret, err
}

// Get retrieves the HealthCheckTemplate from the indexer for a given namespace and name.
func (s healthCheckTemplateNamespaceLister) Get(name string) (*v1alpha1.HealthCheckTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("healthchecktemplate"), name)
	}
	return obj.(*v1alpha1.HealthCheckTemplate), nil
}
