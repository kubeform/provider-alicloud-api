/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/edas/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationDeploymentLister helps list ApplicationDeployments.
// All objects returned here must be treated as read-only.
type ApplicationDeploymentLister interface {
	// List lists all ApplicationDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationDeployment, err error)
	// ApplicationDeployments returns an object that can list and get ApplicationDeployments.
	ApplicationDeployments(namespace string) ApplicationDeploymentNamespaceLister
	ApplicationDeploymentListerExpansion
}

// applicationDeploymentLister implements the ApplicationDeploymentLister interface.
type applicationDeploymentLister struct {
	indexer cache.Indexer
}

// NewApplicationDeploymentLister returns a new ApplicationDeploymentLister.
func NewApplicationDeploymentLister(indexer cache.Indexer) ApplicationDeploymentLister {
	return &applicationDeploymentLister{indexer: indexer}
}

// List lists all ApplicationDeployments in the indexer.
func (s *applicationDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationDeployment))
	})
	return ret, err
}

// ApplicationDeployments returns an object that can list and get ApplicationDeployments.
func (s *applicationDeploymentLister) ApplicationDeployments(namespace string) ApplicationDeploymentNamespaceLister {
	return applicationDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationDeploymentNamespaceLister helps list and get ApplicationDeployments.
// All objects returned here must be treated as read-only.
type ApplicationDeploymentNamespaceLister interface {
	// List lists all ApplicationDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationDeployment, err error)
	// Get retrieves the ApplicationDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApplicationDeployment, error)
	ApplicationDeploymentNamespaceListerExpansion
}

// applicationDeploymentNamespaceLister implements the ApplicationDeploymentNamespaceLister
// interface.
type applicationDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationDeployments in the indexer for a given namespace.
func (s applicationDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationDeployment))
	})
	return ret, err
}

// Get retrieves the ApplicationDeployment from the indexer for a given namespace and name.
func (s applicationDeploymentNamespaceLister) Get(name string) (*v1alpha1.ApplicationDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationdeployment"), name)
	}
	return obj.(*v1alpha1.ApplicationDeployment), nil
}
