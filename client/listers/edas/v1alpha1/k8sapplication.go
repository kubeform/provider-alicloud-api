/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/edas/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// K8sApplicationLister helps list K8sApplications.
// All objects returned here must be treated as read-only.
type K8sApplicationLister interface {
	// List lists all K8sApplications in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.K8sApplication, err error)
	// K8sApplications returns an object that can list and get K8sApplications.
	K8sApplications(namespace string) K8sApplicationNamespaceLister
	K8sApplicationListerExpansion
}

// k8sApplicationLister implements the K8sApplicationLister interface.
type k8sApplicationLister struct {
	indexer cache.Indexer
}

// NewK8sApplicationLister returns a new K8sApplicationLister.
func NewK8sApplicationLister(indexer cache.Indexer) K8sApplicationLister {
	return &k8sApplicationLister{indexer: indexer}
}

// List lists all K8sApplications in the indexer.
func (s *k8sApplicationLister) List(selector labels.Selector) (ret []*v1alpha1.K8sApplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.K8sApplication))
	})
	return ret, err
}

// K8sApplications returns an object that can list and get K8sApplications.
func (s *k8sApplicationLister) K8sApplications(namespace string) K8sApplicationNamespaceLister {
	return k8sApplicationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// K8sApplicationNamespaceLister helps list and get K8sApplications.
// All objects returned here must be treated as read-only.
type K8sApplicationNamespaceLister interface {
	// List lists all K8sApplications in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.K8sApplication, err error)
	// Get retrieves the K8sApplication from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.K8sApplication, error)
	K8sApplicationNamespaceListerExpansion
}

// k8sApplicationNamespaceLister implements the K8sApplicationNamespaceLister
// interface.
type k8sApplicationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all K8sApplications in the indexer for a given namespace.
func (s k8sApplicationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.K8sApplication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.K8sApplication))
	})
	return ret, err
}

// Get retrieves the K8sApplication from the indexer for a given namespace and name.
func (s k8sApplicationNamespaceLister) Get(name string) (*v1alpha1.K8sApplication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("k8sapplication"), name)
	}
	return obj.(*v1alpha1.K8sApplication), nil
}
