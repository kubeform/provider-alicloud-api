/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ecd/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkPackageLister helps list NetworkPackages.
// All objects returned here must be treated as read-only.
type NetworkPackageLister interface {
	// List lists all NetworkPackages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkPackage, err error)
	// NetworkPackages returns an object that can list and get NetworkPackages.
	NetworkPackages(namespace string) NetworkPackageNamespaceLister
	NetworkPackageListerExpansion
}

// networkPackageLister implements the NetworkPackageLister interface.
type networkPackageLister struct {
	indexer cache.Indexer
}

// NewNetworkPackageLister returns a new NetworkPackageLister.
func NewNetworkPackageLister(indexer cache.Indexer) NetworkPackageLister {
	return &networkPackageLister{indexer: indexer}
}

// List lists all NetworkPackages in the indexer.
func (s *networkPackageLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkPackage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkPackage))
	})
	return ret, err
}

// NetworkPackages returns an object that can list and get NetworkPackages.
func (s *networkPackageLister) NetworkPackages(namespace string) NetworkPackageNamespaceLister {
	return networkPackageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkPackageNamespaceLister helps list and get NetworkPackages.
// All objects returned here must be treated as read-only.
type NetworkPackageNamespaceLister interface {
	// List lists all NetworkPackages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkPackage, err error)
	// Get retrieves the NetworkPackage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkPackage, error)
	NetworkPackageNamespaceListerExpansion
}

// networkPackageNamespaceLister implements the NetworkPackageNamespaceLister
// interface.
type networkPackageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkPackages in the indexer for a given namespace.
func (s networkPackageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkPackage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkPackage))
	})
	return ret, err
}

// Get retrieves the NetworkPackage from the indexer for a given namespace and name.
func (s networkPackageNamespaceLister) Get(name string) (*v1alpha1.NetworkPackage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkpackage"), name)
	}
	return obj.(*v1alpha1.NetworkPackage), nil
}
