/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/dms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EnterpriseInstanceLister helps list EnterpriseInstances.
// All objects returned here must be treated as read-only.
type EnterpriseInstanceLister interface {
	// List lists all EnterpriseInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnterpriseInstance, err error)
	// EnterpriseInstances returns an object that can list and get EnterpriseInstances.
	EnterpriseInstances(namespace string) EnterpriseInstanceNamespaceLister
	EnterpriseInstanceListerExpansion
}

// enterpriseInstanceLister implements the EnterpriseInstanceLister interface.
type enterpriseInstanceLister struct {
	indexer cache.Indexer
}

// NewEnterpriseInstanceLister returns a new EnterpriseInstanceLister.
func NewEnterpriseInstanceLister(indexer cache.Indexer) EnterpriseInstanceLister {
	return &enterpriseInstanceLister{indexer: indexer}
}

// List lists all EnterpriseInstances in the indexer.
func (s *enterpriseInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.EnterpriseInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnterpriseInstance))
	})
	return ret, err
}

// EnterpriseInstances returns an object that can list and get EnterpriseInstances.
func (s *enterpriseInstanceLister) EnterpriseInstances(namespace string) EnterpriseInstanceNamespaceLister {
	return enterpriseInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EnterpriseInstanceNamespaceLister helps list and get EnterpriseInstances.
// All objects returned here must be treated as read-only.
type EnterpriseInstanceNamespaceLister interface {
	// List lists all EnterpriseInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnterpriseInstance, err error)
	// Get retrieves the EnterpriseInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EnterpriseInstance, error)
	EnterpriseInstanceNamespaceListerExpansion
}

// enterpriseInstanceNamespaceLister implements the EnterpriseInstanceNamespaceLister
// interface.
type enterpriseInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EnterpriseInstances in the indexer for a given namespace.
func (s enterpriseInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EnterpriseInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnterpriseInstance))
	})
	return ret, err
}

// Get retrieves the EnterpriseInstance from the indexer for a given namespace and name.
func (s enterpriseInstanceNamespaceLister) Get(name string) (*v1alpha1.EnterpriseInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("enterpriseinstance"), name)
	}
	return obj.(*v1alpha1.EnterpriseInstance), nil
}
