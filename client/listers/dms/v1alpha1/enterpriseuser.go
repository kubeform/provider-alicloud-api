/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/dms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EnterpriseUserLister helps list EnterpriseUsers.
// All objects returned here must be treated as read-only.
type EnterpriseUserLister interface {
	// List lists all EnterpriseUsers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnterpriseUser, err error)
	// EnterpriseUsers returns an object that can list and get EnterpriseUsers.
	EnterpriseUsers(namespace string) EnterpriseUserNamespaceLister
	EnterpriseUserListerExpansion
}

// enterpriseUserLister implements the EnterpriseUserLister interface.
type enterpriseUserLister struct {
	indexer cache.Indexer
}

// NewEnterpriseUserLister returns a new EnterpriseUserLister.
func NewEnterpriseUserLister(indexer cache.Indexer) EnterpriseUserLister {
	return &enterpriseUserLister{indexer: indexer}
}

// List lists all EnterpriseUsers in the indexer.
func (s *enterpriseUserLister) List(selector labels.Selector) (ret []*v1alpha1.EnterpriseUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnterpriseUser))
	})
	return ret, err
}

// EnterpriseUsers returns an object that can list and get EnterpriseUsers.
func (s *enterpriseUserLister) EnterpriseUsers(namespace string) EnterpriseUserNamespaceLister {
	return enterpriseUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EnterpriseUserNamespaceLister helps list and get EnterpriseUsers.
// All objects returned here must be treated as read-only.
type EnterpriseUserNamespaceLister interface {
	// List lists all EnterpriseUsers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnterpriseUser, err error)
	// Get retrieves the EnterpriseUser from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EnterpriseUser, error)
	EnterpriseUserNamespaceListerExpansion
}

// enterpriseUserNamespaceLister implements the EnterpriseUserNamespaceLister
// interface.
type enterpriseUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EnterpriseUsers in the indexer for a given namespace.
func (s enterpriseUserNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EnterpriseUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnterpriseUser))
	})
	return ret, err
}

// Get retrieves the EnterpriseUser from the indexer for a given namespace and name.
func (s enterpriseUserNamespaceLister) Get(name string) (*v1alpha1.EnterpriseUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("enterpriseuser"), name)
	}
	return obj.(*v1alpha1.EnterpriseUser), nil
}
