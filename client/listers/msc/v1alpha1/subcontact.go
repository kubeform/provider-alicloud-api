/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/msc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubContactLister helps list SubContacts.
// All objects returned here must be treated as read-only.
type SubContactLister interface {
	// List lists all SubContacts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubContact, err error)
	// SubContacts returns an object that can list and get SubContacts.
	SubContacts(namespace string) SubContactNamespaceLister
	SubContactListerExpansion
}

// subContactLister implements the SubContactLister interface.
type subContactLister struct {
	indexer cache.Indexer
}

// NewSubContactLister returns a new SubContactLister.
func NewSubContactLister(indexer cache.Indexer) SubContactLister {
	return &subContactLister{indexer: indexer}
}

// List lists all SubContacts in the indexer.
func (s *subContactLister) List(selector labels.Selector) (ret []*v1alpha1.SubContact, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubContact))
	})
	return ret, err
}

// SubContacts returns an object that can list and get SubContacts.
func (s *subContactLister) SubContacts(namespace string) SubContactNamespaceLister {
	return subContactNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubContactNamespaceLister helps list and get SubContacts.
// All objects returned here must be treated as read-only.
type SubContactNamespaceLister interface {
	// List lists all SubContacts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubContact, err error)
	// Get retrieves the SubContact from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SubContact, error)
	SubContactNamespaceListerExpansion
}

// subContactNamespaceLister implements the SubContactNamespaceLister
// interface.
type subContactNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubContacts in the indexer for a given namespace.
func (s subContactNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubContact, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubContact))
	})
	return ret, err
}

// Get retrieves the SubContact from the indexer for a given namespace and name.
func (s subContactNamespaceLister) Get(name string) (*v1alpha1.SubContact, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subcontact"), name)
	}
	return obj.(*v1alpha1.SubContact), nil
}
