/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/brain/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IndustrialPidOrganizationLister helps list IndustrialPidOrganizations.
// All objects returned here must be treated as read-only.
type IndustrialPidOrganizationLister interface {
	// List lists all IndustrialPidOrganizations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IndustrialPidOrganization, err error)
	// IndustrialPidOrganizations returns an object that can list and get IndustrialPidOrganizations.
	IndustrialPidOrganizations(namespace string) IndustrialPidOrganizationNamespaceLister
	IndustrialPidOrganizationListerExpansion
}

// industrialPidOrganizationLister implements the IndustrialPidOrganizationLister interface.
type industrialPidOrganizationLister struct {
	indexer cache.Indexer
}

// NewIndustrialPidOrganizationLister returns a new IndustrialPidOrganizationLister.
func NewIndustrialPidOrganizationLister(indexer cache.Indexer) IndustrialPidOrganizationLister {
	return &industrialPidOrganizationLister{indexer: indexer}
}

// List lists all IndustrialPidOrganizations in the indexer.
func (s *industrialPidOrganizationLister) List(selector labels.Selector) (ret []*v1alpha1.IndustrialPidOrganization, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IndustrialPidOrganization))
	})
	return ret, err
}

// IndustrialPidOrganizations returns an object that can list and get IndustrialPidOrganizations.
func (s *industrialPidOrganizationLister) IndustrialPidOrganizations(namespace string) IndustrialPidOrganizationNamespaceLister {
	return industrialPidOrganizationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IndustrialPidOrganizationNamespaceLister helps list and get IndustrialPidOrganizations.
// All objects returned here must be treated as read-only.
type IndustrialPidOrganizationNamespaceLister interface {
	// List lists all IndustrialPidOrganizations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IndustrialPidOrganization, err error)
	// Get retrieves the IndustrialPidOrganization from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IndustrialPidOrganization, error)
	IndustrialPidOrganizationNamespaceListerExpansion
}

// industrialPidOrganizationNamespaceLister implements the IndustrialPidOrganizationNamespaceLister
// interface.
type industrialPidOrganizationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IndustrialPidOrganizations in the indexer for a given namespace.
func (s industrialPidOrganizationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IndustrialPidOrganization, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IndustrialPidOrganization))
	})
	return ret, err
}

// Get retrieves the IndustrialPidOrganization from the indexer for a given namespace and name.
func (s industrialPidOrganizationNamespaceLister) Get(name string) (*v1alpha1.IndustrialPidOrganization, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("industrialpidorganization"), name)
	}
	return obj.(*v1alpha1.IndustrialPidOrganization), nil
}
