/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/brain/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IndustrialPidLoopLister helps list IndustrialPidLoops.
// All objects returned here must be treated as read-only.
type IndustrialPidLoopLister interface {
	// List lists all IndustrialPidLoops in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IndustrialPidLoop, err error)
	// IndustrialPidLoops returns an object that can list and get IndustrialPidLoops.
	IndustrialPidLoops(namespace string) IndustrialPidLoopNamespaceLister
	IndustrialPidLoopListerExpansion
}

// industrialPidLoopLister implements the IndustrialPidLoopLister interface.
type industrialPidLoopLister struct {
	indexer cache.Indexer
}

// NewIndustrialPidLoopLister returns a new IndustrialPidLoopLister.
func NewIndustrialPidLoopLister(indexer cache.Indexer) IndustrialPidLoopLister {
	return &industrialPidLoopLister{indexer: indexer}
}

// List lists all IndustrialPidLoops in the indexer.
func (s *industrialPidLoopLister) List(selector labels.Selector) (ret []*v1alpha1.IndustrialPidLoop, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IndustrialPidLoop))
	})
	return ret, err
}

// IndustrialPidLoops returns an object that can list and get IndustrialPidLoops.
func (s *industrialPidLoopLister) IndustrialPidLoops(namespace string) IndustrialPidLoopNamespaceLister {
	return industrialPidLoopNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IndustrialPidLoopNamespaceLister helps list and get IndustrialPidLoops.
// All objects returned here must be treated as read-only.
type IndustrialPidLoopNamespaceLister interface {
	// List lists all IndustrialPidLoops in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IndustrialPidLoop, err error)
	// Get retrieves the IndustrialPidLoop from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IndustrialPidLoop, error)
	IndustrialPidLoopNamespaceListerExpansion
}

// industrialPidLoopNamespaceLister implements the IndustrialPidLoopNamespaceLister
// interface.
type industrialPidLoopNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IndustrialPidLoops in the indexer for a given namespace.
func (s industrialPidLoopNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IndustrialPidLoop, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IndustrialPidLoop))
	})
	return ret, err
}

// Get retrieves the IndustrialPidLoop from the indexer for a given namespace and name.
func (s industrialPidLoopNamespaceLister) Get(name string) (*v1alpha1.IndustrialPidLoop, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("industrialpidloop"), name)
	}
	return obj.(*v1alpha1.IndustrialPidLoop), nil
}
