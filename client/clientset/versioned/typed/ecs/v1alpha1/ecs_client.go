/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ecs/v1alpha1"
	"kubeform.dev/provider-alicloud-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type EcsV1alpha1Interface interface {
	RESTClient() rest.Interface
	AutoSnapshotPoliciesGetter
	AutoSnapshotPolicyAttachmentsGetter
	CommandsGetter
	DedicatedHostsGetter
	DedicatedHostClustersGetter
	DeploymentSetsGetter
	DisksGetter
	DiskAttachmentsGetter
	HpcClustersGetter
	ImageComponentsGetter
	KeyPairsGetter
	KeyPairAttachmentsGetter
	LaunchTemplatesGetter
	NetworkInterfacesGetter
	NetworkInterfaceAttachmentsGetter
	PrefixListsGetter
	SessionManagerStatusesGetter
	SnapshotsGetter
	StorageCapacityUnitsGetter
}

// EcsV1alpha1Client is used to interact with features provided by the ecs.alicloud.kubeform.com group.
type EcsV1alpha1Client struct {
	restClient rest.Interface
}

func (c *EcsV1alpha1Client) AutoSnapshotPolicies(namespace string) AutoSnapshotPolicyInterface {
	return newAutoSnapshotPolicies(c, namespace)
}

func (c *EcsV1alpha1Client) AutoSnapshotPolicyAttachments(namespace string) AutoSnapshotPolicyAttachmentInterface {
	return newAutoSnapshotPolicyAttachments(c, namespace)
}

func (c *EcsV1alpha1Client) Commands(namespace string) CommandInterface {
	return newCommands(c, namespace)
}

func (c *EcsV1alpha1Client) DedicatedHosts(namespace string) DedicatedHostInterface {
	return newDedicatedHosts(c, namespace)
}

func (c *EcsV1alpha1Client) DedicatedHostClusters(namespace string) DedicatedHostClusterInterface {
	return newDedicatedHostClusters(c, namespace)
}

func (c *EcsV1alpha1Client) DeploymentSets(namespace string) DeploymentSetInterface {
	return newDeploymentSets(c, namespace)
}

func (c *EcsV1alpha1Client) Disks(namespace string) DiskInterface {
	return newDisks(c, namespace)
}

func (c *EcsV1alpha1Client) DiskAttachments(namespace string) DiskAttachmentInterface {
	return newDiskAttachments(c, namespace)
}

func (c *EcsV1alpha1Client) HpcClusters(namespace string) HpcClusterInterface {
	return newHpcClusters(c, namespace)
}

func (c *EcsV1alpha1Client) ImageComponents(namespace string) ImageComponentInterface {
	return newImageComponents(c, namespace)
}

func (c *EcsV1alpha1Client) KeyPairs(namespace string) KeyPairInterface {
	return newKeyPairs(c, namespace)
}

func (c *EcsV1alpha1Client) KeyPairAttachments(namespace string) KeyPairAttachmentInterface {
	return newKeyPairAttachments(c, namespace)
}

func (c *EcsV1alpha1Client) LaunchTemplates(namespace string) LaunchTemplateInterface {
	return newLaunchTemplates(c, namespace)
}

func (c *EcsV1alpha1Client) NetworkInterfaces(namespace string) NetworkInterfaceInterface {
	return newNetworkInterfaces(c, namespace)
}

func (c *EcsV1alpha1Client) NetworkInterfaceAttachments(namespace string) NetworkInterfaceAttachmentInterface {
	return newNetworkInterfaceAttachments(c, namespace)
}

func (c *EcsV1alpha1Client) PrefixLists(namespace string) PrefixListInterface {
	return newPrefixLists(c, namespace)
}

func (c *EcsV1alpha1Client) SessionManagerStatuses(namespace string) SessionManagerStatusInterface {
	return newSessionManagerStatuses(c, namespace)
}

func (c *EcsV1alpha1Client) Snapshots(namespace string) SnapshotInterface {
	return newSnapshots(c, namespace)
}

func (c *EcsV1alpha1Client) StorageCapacityUnits(namespace string) StorageCapacityUnitInterface {
	return newStorageCapacityUnits(c, namespace)
}

// NewForConfig creates a new EcsV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*EcsV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &EcsV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new EcsV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *EcsV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new EcsV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *EcsV1alpha1Client {
	return &EcsV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *EcsV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
