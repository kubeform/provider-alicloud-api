/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/ga/v1alpha1"
	"kubeform.dev/provider-alicloud-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type GaV1alpha1Interface interface {
	RESTClient() rest.Interface
	AcceleratorsGetter
	AclsGetter
	AclAttachmentsGetter
	AdditionalCertificatesGetter
	BandwidthPackagesGetter
	BandwidthPackageAttachmentsGetter
	EndpointGroupsGetter
	ForwardingRulesGetter
	IpSetsGetter
	ListenersGetter
}

// GaV1alpha1Client is used to interact with features provided by the ga.alicloud.kubeform.com group.
type GaV1alpha1Client struct {
	restClient rest.Interface
}

func (c *GaV1alpha1Client) Accelerators(namespace string) AcceleratorInterface {
	return newAccelerators(c, namespace)
}

func (c *GaV1alpha1Client) Acls(namespace string) AclInterface {
	return newAcls(c, namespace)
}

func (c *GaV1alpha1Client) AclAttachments(namespace string) AclAttachmentInterface {
	return newAclAttachments(c, namespace)
}

func (c *GaV1alpha1Client) AdditionalCertificates(namespace string) AdditionalCertificateInterface {
	return newAdditionalCertificates(c, namespace)
}

func (c *GaV1alpha1Client) BandwidthPackages(namespace string) BandwidthPackageInterface {
	return newBandwidthPackages(c, namespace)
}

func (c *GaV1alpha1Client) BandwidthPackageAttachments(namespace string) BandwidthPackageAttachmentInterface {
	return newBandwidthPackageAttachments(c, namespace)
}

func (c *GaV1alpha1Client) EndpointGroups(namespace string) EndpointGroupInterface {
	return newEndpointGroups(c, namespace)
}

func (c *GaV1alpha1Client) ForwardingRules(namespace string) ForwardingRuleInterface {
	return newForwardingRules(c, namespace)
}

func (c *GaV1alpha1Client) IpSets(namespace string) IpSetInterface {
	return newIpSets(c, namespace)
}

func (c *GaV1alpha1Client) Listeners(namespace string) ListenerInterface {
	return newListeners(c, namespace)
}

// NewForConfig creates a new GaV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*GaV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &GaV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new GaV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *GaV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new GaV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *GaV1alpha1Client {
	return &GaV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *GaV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
