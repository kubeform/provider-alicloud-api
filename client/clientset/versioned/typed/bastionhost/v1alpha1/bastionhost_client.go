/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/bastionhost/v1alpha1"
	"kubeform.dev/provider-alicloud-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type BastionhostV1alpha1Interface interface {
	RESTClient() rest.Interface
	HostsGetter
	HostAccountsGetter
	HostAccountUserAttachmentsGetter
	HostAccountUserGroupAttachmentsGetter
	HostAttachmentsGetter
	HostGroupsGetter
	HostGroupAccountUserAttachmentsGetter
	HostGroupAccountUserGroupAttachmentsGetter
	InstancesGetter
	UsersGetter
	UserAttachmentsGetter
	UserGroupsGetter
}

// BastionhostV1alpha1Client is used to interact with features provided by the bastionhost.alicloud.kubeform.com group.
type BastionhostV1alpha1Client struct {
	restClient rest.Interface
}

func (c *BastionhostV1alpha1Client) Hosts(namespace string) HostInterface {
	return newHosts(c, namespace)
}

func (c *BastionhostV1alpha1Client) HostAccounts(namespace string) HostAccountInterface {
	return newHostAccounts(c, namespace)
}

func (c *BastionhostV1alpha1Client) HostAccountUserAttachments(namespace string) HostAccountUserAttachmentInterface {
	return newHostAccountUserAttachments(c, namespace)
}

func (c *BastionhostV1alpha1Client) HostAccountUserGroupAttachments(namespace string) HostAccountUserGroupAttachmentInterface {
	return newHostAccountUserGroupAttachments(c, namespace)
}

func (c *BastionhostV1alpha1Client) HostAttachments(namespace string) HostAttachmentInterface {
	return newHostAttachments(c, namespace)
}

func (c *BastionhostV1alpha1Client) HostGroups(namespace string) HostGroupInterface {
	return newHostGroups(c, namespace)
}

func (c *BastionhostV1alpha1Client) HostGroupAccountUserAttachments(namespace string) HostGroupAccountUserAttachmentInterface {
	return newHostGroupAccountUserAttachments(c, namespace)
}

func (c *BastionhostV1alpha1Client) HostGroupAccountUserGroupAttachments(namespace string) HostGroupAccountUserGroupAttachmentInterface {
	return newHostGroupAccountUserGroupAttachments(c, namespace)
}

func (c *BastionhostV1alpha1Client) Instances(namespace string) InstanceInterface {
	return newInstances(c, namespace)
}

func (c *BastionhostV1alpha1Client) Users(namespace string) UserInterface {
	return newUsers(c, namespace)
}

func (c *BastionhostV1alpha1Client) UserAttachments(namespace string) UserAttachmentInterface {
	return newUserAttachments(c, namespace)
}

func (c *BastionhostV1alpha1Client) UserGroups(namespace string) UserGroupInterface {
	return newUserGroups(c, namespace)
}

// NewForConfig creates a new BastionhostV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*BastionhostV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &BastionhostV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new BastionhostV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *BastionhostV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new BastionhostV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *BastionhostV1alpha1Client {
	return &BastionhostV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *BastionhostV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
