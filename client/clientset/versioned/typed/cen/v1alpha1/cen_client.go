/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/cen/v1alpha1"
	"kubeform.dev/provider-alicloud-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type CenV1alpha1Interface interface {
	RESTClient() rest.Interface
	BandwidthLimitsGetter
	BandwidthPackagesGetter
	BandwidthPackageAttachmentsGetter
	FlowlogsGetter
	InstancesGetter
	InstanceAttachmentsGetter
	InstanceGrantsGetter
	PrivateZonesGetter
	RouteEntriesGetter
	RouteMapsGetter
	RouteServicesGetter
	TransitRoutersGetter
	TransitRouterPeerAttachmentsGetter
	TransitRouterRouteEntriesGetter
	TransitRouterRouteTablesGetter
	TransitRouterRouteTableAssociationsGetter
	TransitRouterRouteTablePropagationsGetter
	TransitRouterVbrAttachmentsGetter
	TransitRouterVpcAttachmentsGetter
	VbrHealthChecksGetter
}

// CenV1alpha1Client is used to interact with features provided by the cen.alicloud.kubeform.com group.
type CenV1alpha1Client struct {
	restClient rest.Interface
}

func (c *CenV1alpha1Client) BandwidthLimits(namespace string) BandwidthLimitInterface {
	return newBandwidthLimits(c, namespace)
}

func (c *CenV1alpha1Client) BandwidthPackages(namespace string) BandwidthPackageInterface {
	return newBandwidthPackages(c, namespace)
}

func (c *CenV1alpha1Client) BandwidthPackageAttachments(namespace string) BandwidthPackageAttachmentInterface {
	return newBandwidthPackageAttachments(c, namespace)
}

func (c *CenV1alpha1Client) Flowlogs(namespace string) FlowlogInterface {
	return newFlowlogs(c, namespace)
}

func (c *CenV1alpha1Client) Instances(namespace string) InstanceInterface {
	return newInstances(c, namespace)
}

func (c *CenV1alpha1Client) InstanceAttachments(namespace string) InstanceAttachmentInterface {
	return newInstanceAttachments(c, namespace)
}

func (c *CenV1alpha1Client) InstanceGrants(namespace string) InstanceGrantInterface {
	return newInstanceGrants(c, namespace)
}

func (c *CenV1alpha1Client) PrivateZones(namespace string) PrivateZoneInterface {
	return newPrivateZones(c, namespace)
}

func (c *CenV1alpha1Client) RouteEntries(namespace string) RouteEntryInterface {
	return newRouteEntries(c, namespace)
}

func (c *CenV1alpha1Client) RouteMaps(namespace string) RouteMapInterface {
	return newRouteMaps(c, namespace)
}

func (c *CenV1alpha1Client) RouteServices(namespace string) RouteServiceInterface {
	return newRouteServices(c, namespace)
}

func (c *CenV1alpha1Client) TransitRouters(namespace string) TransitRouterInterface {
	return newTransitRouters(c, namespace)
}

func (c *CenV1alpha1Client) TransitRouterPeerAttachments(namespace string) TransitRouterPeerAttachmentInterface {
	return newTransitRouterPeerAttachments(c, namespace)
}

func (c *CenV1alpha1Client) TransitRouterRouteEntries(namespace string) TransitRouterRouteEntryInterface {
	return newTransitRouterRouteEntries(c, namespace)
}

func (c *CenV1alpha1Client) TransitRouterRouteTables(namespace string) TransitRouterRouteTableInterface {
	return newTransitRouterRouteTables(c, namespace)
}

func (c *CenV1alpha1Client) TransitRouterRouteTableAssociations(namespace string) TransitRouterRouteTableAssociationInterface {
	return newTransitRouterRouteTableAssociations(c, namespace)
}

func (c *CenV1alpha1Client) TransitRouterRouteTablePropagations(namespace string) TransitRouterRouteTablePropagationInterface {
	return newTransitRouterRouteTablePropagations(c, namespace)
}

func (c *CenV1alpha1Client) TransitRouterVbrAttachments(namespace string) TransitRouterVbrAttachmentInterface {
	return newTransitRouterVbrAttachments(c, namespace)
}

func (c *CenV1alpha1Client) TransitRouterVpcAttachments(namespace string) TransitRouterVpcAttachmentInterface {
	return newTransitRouterVpcAttachments(c, namespace)
}

func (c *CenV1alpha1Client) VbrHealthChecks(namespace string) VbrHealthCheckInterface {
	return newVbrHealthChecks(c, namespace)
}

// NewForConfig creates a new CenV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*CenV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &CenV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new CenV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *CenV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new CenV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *CenV1alpha1Client {
	return &CenV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *CenV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
