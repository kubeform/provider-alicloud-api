/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-alicloud-api/apis/vpc/v1alpha1"
	"kubeform.dev/provider-alicloud-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type VpcV1alpha1Interface interface {
	RESTClient() rest.Interface
	BgpGroupsGetter
	BgpNetworksGetter
	BgpPeersGetter
	DhcpOptionsSetsGetter
	DhcpOptionsSetAttachmentsGetter
	FlowLogsGetter
	Ipv6EgressRulesGetter
	Ipv6GatewaysGetter
	Ipv6InternetBandwidthsGetter
	NatIPsGetter
	NatIPCIDRsGetter
	TrafficMirrorFiltersGetter
	TrafficMirrorFilterEgressRulesGetter
	TrafficMirrorFilterIngressRulesGetter
	TrafficMirrorSessionsGetter
	VbrHasGetter
	VpcsGetter
}

// VpcV1alpha1Client is used to interact with features provided by the vpc.alicloud.kubeform.com group.
type VpcV1alpha1Client struct {
	restClient rest.Interface
}

func (c *VpcV1alpha1Client) BgpGroups(namespace string) BgpGroupInterface {
	return newBgpGroups(c, namespace)
}

func (c *VpcV1alpha1Client) BgpNetworks(namespace string) BgpNetworkInterface {
	return newBgpNetworks(c, namespace)
}

func (c *VpcV1alpha1Client) BgpPeers(namespace string) BgpPeerInterface {
	return newBgpPeers(c, namespace)
}

func (c *VpcV1alpha1Client) DhcpOptionsSets(namespace string) DhcpOptionsSetInterface {
	return newDhcpOptionsSets(c, namespace)
}

func (c *VpcV1alpha1Client) DhcpOptionsSetAttachments(namespace string) DhcpOptionsSetAttachmentInterface {
	return newDhcpOptionsSetAttachments(c, namespace)
}

func (c *VpcV1alpha1Client) FlowLogs(namespace string) FlowLogInterface {
	return newFlowLogs(c, namespace)
}

func (c *VpcV1alpha1Client) Ipv6EgressRules(namespace string) Ipv6EgressRuleInterface {
	return newIpv6EgressRules(c, namespace)
}

func (c *VpcV1alpha1Client) Ipv6Gateways(namespace string) Ipv6GatewayInterface {
	return newIpv6Gateways(c, namespace)
}

func (c *VpcV1alpha1Client) Ipv6InternetBandwidths(namespace string) Ipv6InternetBandwidthInterface {
	return newIpv6InternetBandwidths(c, namespace)
}

func (c *VpcV1alpha1Client) NatIPs(namespace string) NatIPInterface {
	return newNatIPs(c, namespace)
}

func (c *VpcV1alpha1Client) NatIPCIDRs(namespace string) NatIPCIDRInterface {
	return newNatIPCIDRs(c, namespace)
}

func (c *VpcV1alpha1Client) TrafficMirrorFilters(namespace string) TrafficMirrorFilterInterface {
	return newTrafficMirrorFilters(c, namespace)
}

func (c *VpcV1alpha1Client) TrafficMirrorFilterEgressRules(namespace string) TrafficMirrorFilterEgressRuleInterface {
	return newTrafficMirrorFilterEgressRules(c, namespace)
}

func (c *VpcV1alpha1Client) TrafficMirrorFilterIngressRules(namespace string) TrafficMirrorFilterIngressRuleInterface {
	return newTrafficMirrorFilterIngressRules(c, namespace)
}

func (c *VpcV1alpha1Client) TrafficMirrorSessions(namespace string) TrafficMirrorSessionInterface {
	return newTrafficMirrorSessions(c, namespace)
}

func (c *VpcV1alpha1Client) VbrHas(namespace string) VbrHaInterface {
	return newVbrHas(c, namespace)
}

func (c *VpcV1alpha1Client) Vpcs(namespace string) VpcInterface {
	return newVpcs(c, namespace)
}

// NewForConfig creates a new VpcV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*VpcV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &VpcV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new VpcV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *VpcV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new VpcV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *VpcV1alpha1Client {
	return &VpcV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *VpcV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
