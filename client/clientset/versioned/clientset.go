/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	actiontrailv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/actiontrail/v1alpha1"
	adbv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/adb/v1alpha1"
	alidnsv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/alidns/v1alpha1"
	alikafkav1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/alikafka/v1alpha1"
	amqpv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/amqp/v1alpha1"
	apigatewayv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/apigateway/v1alpha1"
	autov1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/auto/v1alpha1"
	brainv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/brain/v1alpha1"
	casv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/cas/v1alpha1"
	cassandrav1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/cassandra/v1alpha1"
	cdnv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/cdn/v1alpha1"
	cenv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/cen/v1alpha1"
	cloudv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/cloud/v1alpha1"
	cmsv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/cms/v1alpha1"
	commonv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/common/v1alpha1"
	configv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/config/v1alpha1"
	containerv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/container/v1alpha1"
	copyv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/copy/v1alpha1"
	crv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/cr/v1alpha1"
	csv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/cs/v1alpha1"
	datahubv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/datahub/v1alpha1"
	dbv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/db/v1alpha1"
	dcdnv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/dcdn/v1alpha1"
	ddosbgpv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/ddosbgp/v1alpha1"
	ddoscoov1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/ddoscoo/v1alpha1"
	directv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/direct/v1alpha1"
	diskv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/disk/v1alpha1"
	dmsv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/dms/v1alpha1"
	dnsv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/dns/v1alpha1"
	drdsv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/drds/v1alpha1"
	eciv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/eci/v1alpha1"
	ecsv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/ecs/v1alpha1"
	edasv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/edas/v1alpha1"
	eipv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/eip/v1alpha1"
	eipanycastv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/eipanycast/v1alpha1"
	elasticsearchv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/elasticsearch/v1alpha1"
	emrv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/emr/v1alpha1"
	essv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/ess/v1alpha1"
	eventv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/event/v1alpha1"
	fcv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/fc/v1alpha1"
	fnfv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/fnf/v1alpha1"
	forwardv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/forward/v1alpha1"
	gav1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/ga/v1alpha1"
	gpdbv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/gpdb/v1alpha1"
	havipv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/havip/v1alpha1"
	hbasev1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/hbase/v1alpha1"
	imagev1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/image/v1alpha1"
	instancev1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/instance/v1alpha1"
	keyv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/key/v1alpha1"
	kmsv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/kms/v1alpha1"
	kvstorev1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/kvstore/v1alpha1"
	launchv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/launch/v1alpha1"
	logv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/log/v1alpha1"
	logtailv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/logtail/v1alpha1"
	marketv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/market/v1alpha1"
	maxcomputev1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/maxcompute/v1alpha1"
	mnsv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/mns/v1alpha1"
	mongodbv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/mongodb/v1alpha1"
	msev1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/mse/v1alpha1"
	nasv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/nas/v1alpha1"
	natv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/nat/v1alpha1"
	networkv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/network/v1alpha1"
	onsv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/ons/v1alpha1"
	oosv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/oos/v1alpha1"
	ossv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/oss/v1alpha1"
	otsv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/ots/v1alpha1"
	polardbv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/polardb/v1alpha1"
	privatelinkv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/privatelink/v1alpha1"
	pvtzv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/pvtz/v1alpha1"
	quotasv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/quotas/v1alpha1"
	ramv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/ram/v1alpha1"
	rdsv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/rds/v1alpha1"
	reservedv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/reserved/v1alpha1"
	resourcev1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/resource/v1alpha1"
	rosv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/ros/v1alpha1"
	routev1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/route/v1alpha1"
	routerv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/router/v1alpha1"
	sagv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/sag/v1alpha1"
	securityv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/security/v1alpha1"
	slbv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/slb/v1alpha1"
	snapshotv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/snapshot/v1alpha1"
	snatv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/snat/v1alpha1"
	sslv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/ssl/v1alpha1"
	subnetv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/subnet/v1alpha1"
	tsdbv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/tsdb/v1alpha1"
	vpcv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/vpc/v1alpha1"
	vpnv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/vpn/v1alpha1"
	vswitchv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/vswitch/v1alpha1"
	wafv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/waf/v1alpha1"
	yundunv1alpha1 "kubeform.dev/provider-alicloud-api/client/clientset/versioned/typed/yundun/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	ActiontrailV1alpha1() actiontrailv1alpha1.ActiontrailV1alpha1Interface
	AdbV1alpha1() adbv1alpha1.AdbV1alpha1Interface
	AlidnsV1alpha1() alidnsv1alpha1.AlidnsV1alpha1Interface
	AlikafkaV1alpha1() alikafkav1alpha1.AlikafkaV1alpha1Interface
	AmqpV1alpha1() amqpv1alpha1.AmqpV1alpha1Interface
	ApigatewayV1alpha1() apigatewayv1alpha1.ApigatewayV1alpha1Interface
	AutoV1alpha1() autov1alpha1.AutoV1alpha1Interface
	BrainV1alpha1() brainv1alpha1.BrainV1alpha1Interface
	CasV1alpha1() casv1alpha1.CasV1alpha1Interface
	CassandraV1alpha1() cassandrav1alpha1.CassandraV1alpha1Interface
	CdnV1alpha1() cdnv1alpha1.CdnV1alpha1Interface
	CenV1alpha1() cenv1alpha1.CenV1alpha1Interface
	CloudV1alpha1() cloudv1alpha1.CloudV1alpha1Interface
	CmsV1alpha1() cmsv1alpha1.CmsV1alpha1Interface
	CommonV1alpha1() commonv1alpha1.CommonV1alpha1Interface
	ConfigV1alpha1() configv1alpha1.ConfigV1alpha1Interface
	ContainerV1alpha1() containerv1alpha1.ContainerV1alpha1Interface
	CopyV1alpha1() copyv1alpha1.CopyV1alpha1Interface
	CrV1alpha1() crv1alpha1.CrV1alpha1Interface
	CsV1alpha1() csv1alpha1.CsV1alpha1Interface
	DatahubV1alpha1() datahubv1alpha1.DatahubV1alpha1Interface
	DbV1alpha1() dbv1alpha1.DbV1alpha1Interface
	DcdnV1alpha1() dcdnv1alpha1.DcdnV1alpha1Interface
	DdosbgpV1alpha1() ddosbgpv1alpha1.DdosbgpV1alpha1Interface
	DdoscooV1alpha1() ddoscoov1alpha1.DdoscooV1alpha1Interface
	DirectV1alpha1() directv1alpha1.DirectV1alpha1Interface
	DiskV1alpha1() diskv1alpha1.DiskV1alpha1Interface
	DmsV1alpha1() dmsv1alpha1.DmsV1alpha1Interface
	DnsV1alpha1() dnsv1alpha1.DnsV1alpha1Interface
	DrdsV1alpha1() drdsv1alpha1.DrdsV1alpha1Interface
	EciV1alpha1() eciv1alpha1.EciV1alpha1Interface
	EcsV1alpha1() ecsv1alpha1.EcsV1alpha1Interface
	EdasV1alpha1() edasv1alpha1.EdasV1alpha1Interface
	EipV1alpha1() eipv1alpha1.EipV1alpha1Interface
	EipanycastV1alpha1() eipanycastv1alpha1.EipanycastV1alpha1Interface
	ElasticsearchV1alpha1() elasticsearchv1alpha1.ElasticsearchV1alpha1Interface
	EmrV1alpha1() emrv1alpha1.EmrV1alpha1Interface
	EssV1alpha1() essv1alpha1.EssV1alpha1Interface
	EventV1alpha1() eventv1alpha1.EventV1alpha1Interface
	FcV1alpha1() fcv1alpha1.FcV1alpha1Interface
	FnfV1alpha1() fnfv1alpha1.FnfV1alpha1Interface
	ForwardV1alpha1() forwardv1alpha1.ForwardV1alpha1Interface
	GaV1alpha1() gav1alpha1.GaV1alpha1Interface
	GpdbV1alpha1() gpdbv1alpha1.GpdbV1alpha1Interface
	HavipV1alpha1() havipv1alpha1.HavipV1alpha1Interface
	HbaseV1alpha1() hbasev1alpha1.HbaseV1alpha1Interface
	ImageV1alpha1() imagev1alpha1.ImageV1alpha1Interface
	InstanceV1alpha1() instancev1alpha1.InstanceV1alpha1Interface
	KeyV1alpha1() keyv1alpha1.KeyV1alpha1Interface
	KmsV1alpha1() kmsv1alpha1.KmsV1alpha1Interface
	KvstoreV1alpha1() kvstorev1alpha1.KvstoreV1alpha1Interface
	LaunchV1alpha1() launchv1alpha1.LaunchV1alpha1Interface
	LogV1alpha1() logv1alpha1.LogV1alpha1Interface
	LogtailV1alpha1() logtailv1alpha1.LogtailV1alpha1Interface
	MarketV1alpha1() marketv1alpha1.MarketV1alpha1Interface
	MaxcomputeV1alpha1() maxcomputev1alpha1.MaxcomputeV1alpha1Interface
	MnsV1alpha1() mnsv1alpha1.MnsV1alpha1Interface
	MongodbV1alpha1() mongodbv1alpha1.MongodbV1alpha1Interface
	MseV1alpha1() msev1alpha1.MseV1alpha1Interface
	NasV1alpha1() nasv1alpha1.NasV1alpha1Interface
	NatV1alpha1() natv1alpha1.NatV1alpha1Interface
	NetworkV1alpha1() networkv1alpha1.NetworkV1alpha1Interface
	OnsV1alpha1() onsv1alpha1.OnsV1alpha1Interface
	OosV1alpha1() oosv1alpha1.OosV1alpha1Interface
	OssV1alpha1() ossv1alpha1.OssV1alpha1Interface
	OtsV1alpha1() otsv1alpha1.OtsV1alpha1Interface
	PolardbV1alpha1() polardbv1alpha1.PolardbV1alpha1Interface
	PrivatelinkV1alpha1() privatelinkv1alpha1.PrivatelinkV1alpha1Interface
	PvtzV1alpha1() pvtzv1alpha1.PvtzV1alpha1Interface
	QuotasV1alpha1() quotasv1alpha1.QuotasV1alpha1Interface
	RamV1alpha1() ramv1alpha1.RamV1alpha1Interface
	RdsV1alpha1() rdsv1alpha1.RdsV1alpha1Interface
	ReservedV1alpha1() reservedv1alpha1.ReservedV1alpha1Interface
	ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface
	RosV1alpha1() rosv1alpha1.RosV1alpha1Interface
	RouteV1alpha1() routev1alpha1.RouteV1alpha1Interface
	RouterV1alpha1() routerv1alpha1.RouterV1alpha1Interface
	SagV1alpha1() sagv1alpha1.SagV1alpha1Interface
	SecurityV1alpha1() securityv1alpha1.SecurityV1alpha1Interface
	SlbV1alpha1() slbv1alpha1.SlbV1alpha1Interface
	SnapshotV1alpha1() snapshotv1alpha1.SnapshotV1alpha1Interface
	SnatV1alpha1() snatv1alpha1.SnatV1alpha1Interface
	SslV1alpha1() sslv1alpha1.SslV1alpha1Interface
	SubnetV1alpha1() subnetv1alpha1.SubnetV1alpha1Interface
	TsdbV1alpha1() tsdbv1alpha1.TsdbV1alpha1Interface
	VpcV1alpha1() vpcv1alpha1.VpcV1alpha1Interface
	VpnV1alpha1() vpnv1alpha1.VpnV1alpha1Interface
	VswitchV1alpha1() vswitchv1alpha1.VswitchV1alpha1Interface
	WafV1alpha1() wafv1alpha1.WafV1alpha1Interface
	YundunV1alpha1() yundunv1alpha1.YundunV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	actiontrailV1alpha1   *actiontrailv1alpha1.ActiontrailV1alpha1Client
	adbV1alpha1           *adbv1alpha1.AdbV1alpha1Client
	alidnsV1alpha1        *alidnsv1alpha1.AlidnsV1alpha1Client
	alikafkaV1alpha1      *alikafkav1alpha1.AlikafkaV1alpha1Client
	amqpV1alpha1          *amqpv1alpha1.AmqpV1alpha1Client
	apigatewayV1alpha1    *apigatewayv1alpha1.ApigatewayV1alpha1Client
	autoV1alpha1          *autov1alpha1.AutoV1alpha1Client
	brainV1alpha1         *brainv1alpha1.BrainV1alpha1Client
	casV1alpha1           *casv1alpha1.CasV1alpha1Client
	cassandraV1alpha1     *cassandrav1alpha1.CassandraV1alpha1Client
	cdnV1alpha1           *cdnv1alpha1.CdnV1alpha1Client
	cenV1alpha1           *cenv1alpha1.CenV1alpha1Client
	cloudV1alpha1         *cloudv1alpha1.CloudV1alpha1Client
	cmsV1alpha1           *cmsv1alpha1.CmsV1alpha1Client
	commonV1alpha1        *commonv1alpha1.CommonV1alpha1Client
	configV1alpha1        *configv1alpha1.ConfigV1alpha1Client
	containerV1alpha1     *containerv1alpha1.ContainerV1alpha1Client
	copyV1alpha1          *copyv1alpha1.CopyV1alpha1Client
	crV1alpha1            *crv1alpha1.CrV1alpha1Client
	csV1alpha1            *csv1alpha1.CsV1alpha1Client
	datahubV1alpha1       *datahubv1alpha1.DatahubV1alpha1Client
	dbV1alpha1            *dbv1alpha1.DbV1alpha1Client
	dcdnV1alpha1          *dcdnv1alpha1.DcdnV1alpha1Client
	ddosbgpV1alpha1       *ddosbgpv1alpha1.DdosbgpV1alpha1Client
	ddoscooV1alpha1       *ddoscoov1alpha1.DdoscooV1alpha1Client
	directV1alpha1        *directv1alpha1.DirectV1alpha1Client
	diskV1alpha1          *diskv1alpha1.DiskV1alpha1Client
	dmsV1alpha1           *dmsv1alpha1.DmsV1alpha1Client
	dnsV1alpha1           *dnsv1alpha1.DnsV1alpha1Client
	drdsV1alpha1          *drdsv1alpha1.DrdsV1alpha1Client
	eciV1alpha1           *eciv1alpha1.EciV1alpha1Client
	ecsV1alpha1           *ecsv1alpha1.EcsV1alpha1Client
	edasV1alpha1          *edasv1alpha1.EdasV1alpha1Client
	eipV1alpha1           *eipv1alpha1.EipV1alpha1Client
	eipanycastV1alpha1    *eipanycastv1alpha1.EipanycastV1alpha1Client
	elasticsearchV1alpha1 *elasticsearchv1alpha1.ElasticsearchV1alpha1Client
	emrV1alpha1           *emrv1alpha1.EmrV1alpha1Client
	essV1alpha1           *essv1alpha1.EssV1alpha1Client
	eventV1alpha1         *eventv1alpha1.EventV1alpha1Client
	fcV1alpha1            *fcv1alpha1.FcV1alpha1Client
	fnfV1alpha1           *fnfv1alpha1.FnfV1alpha1Client
	forwardV1alpha1       *forwardv1alpha1.ForwardV1alpha1Client
	gaV1alpha1            *gav1alpha1.GaV1alpha1Client
	gpdbV1alpha1          *gpdbv1alpha1.GpdbV1alpha1Client
	havipV1alpha1         *havipv1alpha1.HavipV1alpha1Client
	hbaseV1alpha1         *hbasev1alpha1.HbaseV1alpha1Client
	imageV1alpha1         *imagev1alpha1.ImageV1alpha1Client
	instanceV1alpha1      *instancev1alpha1.InstanceV1alpha1Client
	keyV1alpha1           *keyv1alpha1.KeyV1alpha1Client
	kmsV1alpha1           *kmsv1alpha1.KmsV1alpha1Client
	kvstoreV1alpha1       *kvstorev1alpha1.KvstoreV1alpha1Client
	launchV1alpha1        *launchv1alpha1.LaunchV1alpha1Client
	logV1alpha1           *logv1alpha1.LogV1alpha1Client
	logtailV1alpha1       *logtailv1alpha1.LogtailV1alpha1Client
	marketV1alpha1        *marketv1alpha1.MarketV1alpha1Client
	maxcomputeV1alpha1    *maxcomputev1alpha1.MaxcomputeV1alpha1Client
	mnsV1alpha1           *mnsv1alpha1.MnsV1alpha1Client
	mongodbV1alpha1       *mongodbv1alpha1.MongodbV1alpha1Client
	mseV1alpha1           *msev1alpha1.MseV1alpha1Client
	nasV1alpha1           *nasv1alpha1.NasV1alpha1Client
	natV1alpha1           *natv1alpha1.NatV1alpha1Client
	networkV1alpha1       *networkv1alpha1.NetworkV1alpha1Client
	onsV1alpha1           *onsv1alpha1.OnsV1alpha1Client
	oosV1alpha1           *oosv1alpha1.OosV1alpha1Client
	ossV1alpha1           *ossv1alpha1.OssV1alpha1Client
	otsV1alpha1           *otsv1alpha1.OtsV1alpha1Client
	polardbV1alpha1       *polardbv1alpha1.PolardbV1alpha1Client
	privatelinkV1alpha1   *privatelinkv1alpha1.PrivatelinkV1alpha1Client
	pvtzV1alpha1          *pvtzv1alpha1.PvtzV1alpha1Client
	quotasV1alpha1        *quotasv1alpha1.QuotasV1alpha1Client
	ramV1alpha1           *ramv1alpha1.RamV1alpha1Client
	rdsV1alpha1           *rdsv1alpha1.RdsV1alpha1Client
	reservedV1alpha1      *reservedv1alpha1.ReservedV1alpha1Client
	resourceV1alpha1      *resourcev1alpha1.ResourceV1alpha1Client
	rosV1alpha1           *rosv1alpha1.RosV1alpha1Client
	routeV1alpha1         *routev1alpha1.RouteV1alpha1Client
	routerV1alpha1        *routerv1alpha1.RouterV1alpha1Client
	sagV1alpha1           *sagv1alpha1.SagV1alpha1Client
	securityV1alpha1      *securityv1alpha1.SecurityV1alpha1Client
	slbV1alpha1           *slbv1alpha1.SlbV1alpha1Client
	snapshotV1alpha1      *snapshotv1alpha1.SnapshotV1alpha1Client
	snatV1alpha1          *snatv1alpha1.SnatV1alpha1Client
	sslV1alpha1           *sslv1alpha1.SslV1alpha1Client
	subnetV1alpha1        *subnetv1alpha1.SubnetV1alpha1Client
	tsdbV1alpha1          *tsdbv1alpha1.TsdbV1alpha1Client
	vpcV1alpha1           *vpcv1alpha1.VpcV1alpha1Client
	vpnV1alpha1           *vpnv1alpha1.VpnV1alpha1Client
	vswitchV1alpha1       *vswitchv1alpha1.VswitchV1alpha1Client
	wafV1alpha1           *wafv1alpha1.WafV1alpha1Client
	yundunV1alpha1        *yundunv1alpha1.YundunV1alpha1Client
}

// ActiontrailV1alpha1 retrieves the ActiontrailV1alpha1Client
func (c *Clientset) ActiontrailV1alpha1() actiontrailv1alpha1.ActiontrailV1alpha1Interface {
	return c.actiontrailV1alpha1
}

// AdbV1alpha1 retrieves the AdbV1alpha1Client
func (c *Clientset) AdbV1alpha1() adbv1alpha1.AdbV1alpha1Interface {
	return c.adbV1alpha1
}

// AlidnsV1alpha1 retrieves the AlidnsV1alpha1Client
func (c *Clientset) AlidnsV1alpha1() alidnsv1alpha1.AlidnsV1alpha1Interface {
	return c.alidnsV1alpha1
}

// AlikafkaV1alpha1 retrieves the AlikafkaV1alpha1Client
func (c *Clientset) AlikafkaV1alpha1() alikafkav1alpha1.AlikafkaV1alpha1Interface {
	return c.alikafkaV1alpha1
}

// AmqpV1alpha1 retrieves the AmqpV1alpha1Client
func (c *Clientset) AmqpV1alpha1() amqpv1alpha1.AmqpV1alpha1Interface {
	return c.amqpV1alpha1
}

// ApigatewayV1alpha1 retrieves the ApigatewayV1alpha1Client
func (c *Clientset) ApigatewayV1alpha1() apigatewayv1alpha1.ApigatewayV1alpha1Interface {
	return c.apigatewayV1alpha1
}

// AutoV1alpha1 retrieves the AutoV1alpha1Client
func (c *Clientset) AutoV1alpha1() autov1alpha1.AutoV1alpha1Interface {
	return c.autoV1alpha1
}

// BrainV1alpha1 retrieves the BrainV1alpha1Client
func (c *Clientset) BrainV1alpha1() brainv1alpha1.BrainV1alpha1Interface {
	return c.brainV1alpha1
}

// CasV1alpha1 retrieves the CasV1alpha1Client
func (c *Clientset) CasV1alpha1() casv1alpha1.CasV1alpha1Interface {
	return c.casV1alpha1
}

// CassandraV1alpha1 retrieves the CassandraV1alpha1Client
func (c *Clientset) CassandraV1alpha1() cassandrav1alpha1.CassandraV1alpha1Interface {
	return c.cassandraV1alpha1
}

// CdnV1alpha1 retrieves the CdnV1alpha1Client
func (c *Clientset) CdnV1alpha1() cdnv1alpha1.CdnV1alpha1Interface {
	return c.cdnV1alpha1
}

// CenV1alpha1 retrieves the CenV1alpha1Client
func (c *Clientset) CenV1alpha1() cenv1alpha1.CenV1alpha1Interface {
	return c.cenV1alpha1
}

// CloudV1alpha1 retrieves the CloudV1alpha1Client
func (c *Clientset) CloudV1alpha1() cloudv1alpha1.CloudV1alpha1Interface {
	return c.cloudV1alpha1
}

// CmsV1alpha1 retrieves the CmsV1alpha1Client
func (c *Clientset) CmsV1alpha1() cmsv1alpha1.CmsV1alpha1Interface {
	return c.cmsV1alpha1
}

// CommonV1alpha1 retrieves the CommonV1alpha1Client
func (c *Clientset) CommonV1alpha1() commonv1alpha1.CommonV1alpha1Interface {
	return c.commonV1alpha1
}

// ConfigV1alpha1 retrieves the ConfigV1alpha1Client
func (c *Clientset) ConfigV1alpha1() configv1alpha1.ConfigV1alpha1Interface {
	return c.configV1alpha1
}

// ContainerV1alpha1 retrieves the ContainerV1alpha1Client
func (c *Clientset) ContainerV1alpha1() containerv1alpha1.ContainerV1alpha1Interface {
	return c.containerV1alpha1
}

// CopyV1alpha1 retrieves the CopyV1alpha1Client
func (c *Clientset) CopyV1alpha1() copyv1alpha1.CopyV1alpha1Interface {
	return c.copyV1alpha1
}

// CrV1alpha1 retrieves the CrV1alpha1Client
func (c *Clientset) CrV1alpha1() crv1alpha1.CrV1alpha1Interface {
	return c.crV1alpha1
}

// CsV1alpha1 retrieves the CsV1alpha1Client
func (c *Clientset) CsV1alpha1() csv1alpha1.CsV1alpha1Interface {
	return c.csV1alpha1
}

// DatahubV1alpha1 retrieves the DatahubV1alpha1Client
func (c *Clientset) DatahubV1alpha1() datahubv1alpha1.DatahubV1alpha1Interface {
	return c.datahubV1alpha1
}

// DbV1alpha1 retrieves the DbV1alpha1Client
func (c *Clientset) DbV1alpha1() dbv1alpha1.DbV1alpha1Interface {
	return c.dbV1alpha1
}

// DcdnV1alpha1 retrieves the DcdnV1alpha1Client
func (c *Clientset) DcdnV1alpha1() dcdnv1alpha1.DcdnV1alpha1Interface {
	return c.dcdnV1alpha1
}

// DdosbgpV1alpha1 retrieves the DdosbgpV1alpha1Client
func (c *Clientset) DdosbgpV1alpha1() ddosbgpv1alpha1.DdosbgpV1alpha1Interface {
	return c.ddosbgpV1alpha1
}

// DdoscooV1alpha1 retrieves the DdoscooV1alpha1Client
func (c *Clientset) DdoscooV1alpha1() ddoscoov1alpha1.DdoscooV1alpha1Interface {
	return c.ddoscooV1alpha1
}

// DirectV1alpha1 retrieves the DirectV1alpha1Client
func (c *Clientset) DirectV1alpha1() directv1alpha1.DirectV1alpha1Interface {
	return c.directV1alpha1
}

// DiskV1alpha1 retrieves the DiskV1alpha1Client
func (c *Clientset) DiskV1alpha1() diskv1alpha1.DiskV1alpha1Interface {
	return c.diskV1alpha1
}

// DmsV1alpha1 retrieves the DmsV1alpha1Client
func (c *Clientset) DmsV1alpha1() dmsv1alpha1.DmsV1alpha1Interface {
	return c.dmsV1alpha1
}

// DnsV1alpha1 retrieves the DnsV1alpha1Client
func (c *Clientset) DnsV1alpha1() dnsv1alpha1.DnsV1alpha1Interface {
	return c.dnsV1alpha1
}

// DrdsV1alpha1 retrieves the DrdsV1alpha1Client
func (c *Clientset) DrdsV1alpha1() drdsv1alpha1.DrdsV1alpha1Interface {
	return c.drdsV1alpha1
}

// EciV1alpha1 retrieves the EciV1alpha1Client
func (c *Clientset) EciV1alpha1() eciv1alpha1.EciV1alpha1Interface {
	return c.eciV1alpha1
}

// EcsV1alpha1 retrieves the EcsV1alpha1Client
func (c *Clientset) EcsV1alpha1() ecsv1alpha1.EcsV1alpha1Interface {
	return c.ecsV1alpha1
}

// EdasV1alpha1 retrieves the EdasV1alpha1Client
func (c *Clientset) EdasV1alpha1() edasv1alpha1.EdasV1alpha1Interface {
	return c.edasV1alpha1
}

// EipV1alpha1 retrieves the EipV1alpha1Client
func (c *Clientset) EipV1alpha1() eipv1alpha1.EipV1alpha1Interface {
	return c.eipV1alpha1
}

// EipanycastV1alpha1 retrieves the EipanycastV1alpha1Client
func (c *Clientset) EipanycastV1alpha1() eipanycastv1alpha1.EipanycastV1alpha1Interface {
	return c.eipanycastV1alpha1
}

// ElasticsearchV1alpha1 retrieves the ElasticsearchV1alpha1Client
func (c *Clientset) ElasticsearchV1alpha1() elasticsearchv1alpha1.ElasticsearchV1alpha1Interface {
	return c.elasticsearchV1alpha1
}

// EmrV1alpha1 retrieves the EmrV1alpha1Client
func (c *Clientset) EmrV1alpha1() emrv1alpha1.EmrV1alpha1Interface {
	return c.emrV1alpha1
}

// EssV1alpha1 retrieves the EssV1alpha1Client
func (c *Clientset) EssV1alpha1() essv1alpha1.EssV1alpha1Interface {
	return c.essV1alpha1
}

// EventV1alpha1 retrieves the EventV1alpha1Client
func (c *Clientset) EventV1alpha1() eventv1alpha1.EventV1alpha1Interface {
	return c.eventV1alpha1
}

// FcV1alpha1 retrieves the FcV1alpha1Client
func (c *Clientset) FcV1alpha1() fcv1alpha1.FcV1alpha1Interface {
	return c.fcV1alpha1
}

// FnfV1alpha1 retrieves the FnfV1alpha1Client
func (c *Clientset) FnfV1alpha1() fnfv1alpha1.FnfV1alpha1Interface {
	return c.fnfV1alpha1
}

// ForwardV1alpha1 retrieves the ForwardV1alpha1Client
func (c *Clientset) ForwardV1alpha1() forwardv1alpha1.ForwardV1alpha1Interface {
	return c.forwardV1alpha1
}

// GaV1alpha1 retrieves the GaV1alpha1Client
func (c *Clientset) GaV1alpha1() gav1alpha1.GaV1alpha1Interface {
	return c.gaV1alpha1
}

// GpdbV1alpha1 retrieves the GpdbV1alpha1Client
func (c *Clientset) GpdbV1alpha1() gpdbv1alpha1.GpdbV1alpha1Interface {
	return c.gpdbV1alpha1
}

// HavipV1alpha1 retrieves the HavipV1alpha1Client
func (c *Clientset) HavipV1alpha1() havipv1alpha1.HavipV1alpha1Interface {
	return c.havipV1alpha1
}

// HbaseV1alpha1 retrieves the HbaseV1alpha1Client
func (c *Clientset) HbaseV1alpha1() hbasev1alpha1.HbaseV1alpha1Interface {
	return c.hbaseV1alpha1
}

// ImageV1alpha1 retrieves the ImageV1alpha1Client
func (c *Clientset) ImageV1alpha1() imagev1alpha1.ImageV1alpha1Interface {
	return c.imageV1alpha1
}

// InstanceV1alpha1 retrieves the InstanceV1alpha1Client
func (c *Clientset) InstanceV1alpha1() instancev1alpha1.InstanceV1alpha1Interface {
	return c.instanceV1alpha1
}

// KeyV1alpha1 retrieves the KeyV1alpha1Client
func (c *Clientset) KeyV1alpha1() keyv1alpha1.KeyV1alpha1Interface {
	return c.keyV1alpha1
}

// KmsV1alpha1 retrieves the KmsV1alpha1Client
func (c *Clientset) KmsV1alpha1() kmsv1alpha1.KmsV1alpha1Interface {
	return c.kmsV1alpha1
}

// KvstoreV1alpha1 retrieves the KvstoreV1alpha1Client
func (c *Clientset) KvstoreV1alpha1() kvstorev1alpha1.KvstoreV1alpha1Interface {
	return c.kvstoreV1alpha1
}

// LaunchV1alpha1 retrieves the LaunchV1alpha1Client
func (c *Clientset) LaunchV1alpha1() launchv1alpha1.LaunchV1alpha1Interface {
	return c.launchV1alpha1
}

// LogV1alpha1 retrieves the LogV1alpha1Client
func (c *Clientset) LogV1alpha1() logv1alpha1.LogV1alpha1Interface {
	return c.logV1alpha1
}

// LogtailV1alpha1 retrieves the LogtailV1alpha1Client
func (c *Clientset) LogtailV1alpha1() logtailv1alpha1.LogtailV1alpha1Interface {
	return c.logtailV1alpha1
}

// MarketV1alpha1 retrieves the MarketV1alpha1Client
func (c *Clientset) MarketV1alpha1() marketv1alpha1.MarketV1alpha1Interface {
	return c.marketV1alpha1
}

// MaxcomputeV1alpha1 retrieves the MaxcomputeV1alpha1Client
func (c *Clientset) MaxcomputeV1alpha1() maxcomputev1alpha1.MaxcomputeV1alpha1Interface {
	return c.maxcomputeV1alpha1
}

// MnsV1alpha1 retrieves the MnsV1alpha1Client
func (c *Clientset) MnsV1alpha1() mnsv1alpha1.MnsV1alpha1Interface {
	return c.mnsV1alpha1
}

// MongodbV1alpha1 retrieves the MongodbV1alpha1Client
func (c *Clientset) MongodbV1alpha1() mongodbv1alpha1.MongodbV1alpha1Interface {
	return c.mongodbV1alpha1
}

// MseV1alpha1 retrieves the MseV1alpha1Client
func (c *Clientset) MseV1alpha1() msev1alpha1.MseV1alpha1Interface {
	return c.mseV1alpha1
}

// NasV1alpha1 retrieves the NasV1alpha1Client
func (c *Clientset) NasV1alpha1() nasv1alpha1.NasV1alpha1Interface {
	return c.nasV1alpha1
}

// NatV1alpha1 retrieves the NatV1alpha1Client
func (c *Clientset) NatV1alpha1() natv1alpha1.NatV1alpha1Interface {
	return c.natV1alpha1
}

// NetworkV1alpha1 retrieves the NetworkV1alpha1Client
func (c *Clientset) NetworkV1alpha1() networkv1alpha1.NetworkV1alpha1Interface {
	return c.networkV1alpha1
}

// OnsV1alpha1 retrieves the OnsV1alpha1Client
func (c *Clientset) OnsV1alpha1() onsv1alpha1.OnsV1alpha1Interface {
	return c.onsV1alpha1
}

// OosV1alpha1 retrieves the OosV1alpha1Client
func (c *Clientset) OosV1alpha1() oosv1alpha1.OosV1alpha1Interface {
	return c.oosV1alpha1
}

// OssV1alpha1 retrieves the OssV1alpha1Client
func (c *Clientset) OssV1alpha1() ossv1alpha1.OssV1alpha1Interface {
	return c.ossV1alpha1
}

// OtsV1alpha1 retrieves the OtsV1alpha1Client
func (c *Clientset) OtsV1alpha1() otsv1alpha1.OtsV1alpha1Interface {
	return c.otsV1alpha1
}

// PolardbV1alpha1 retrieves the PolardbV1alpha1Client
func (c *Clientset) PolardbV1alpha1() polardbv1alpha1.PolardbV1alpha1Interface {
	return c.polardbV1alpha1
}

// PrivatelinkV1alpha1 retrieves the PrivatelinkV1alpha1Client
func (c *Clientset) PrivatelinkV1alpha1() privatelinkv1alpha1.PrivatelinkV1alpha1Interface {
	return c.privatelinkV1alpha1
}

// PvtzV1alpha1 retrieves the PvtzV1alpha1Client
func (c *Clientset) PvtzV1alpha1() pvtzv1alpha1.PvtzV1alpha1Interface {
	return c.pvtzV1alpha1
}

// QuotasV1alpha1 retrieves the QuotasV1alpha1Client
func (c *Clientset) QuotasV1alpha1() quotasv1alpha1.QuotasV1alpha1Interface {
	return c.quotasV1alpha1
}

// RamV1alpha1 retrieves the RamV1alpha1Client
func (c *Clientset) RamV1alpha1() ramv1alpha1.RamV1alpha1Interface {
	return c.ramV1alpha1
}

// RdsV1alpha1 retrieves the RdsV1alpha1Client
func (c *Clientset) RdsV1alpha1() rdsv1alpha1.RdsV1alpha1Interface {
	return c.rdsV1alpha1
}

// ReservedV1alpha1 retrieves the ReservedV1alpha1Client
func (c *Clientset) ReservedV1alpha1() reservedv1alpha1.ReservedV1alpha1Interface {
	return c.reservedV1alpha1
}

// ResourceV1alpha1 retrieves the ResourceV1alpha1Client
func (c *Clientset) ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface {
	return c.resourceV1alpha1
}

// RosV1alpha1 retrieves the RosV1alpha1Client
func (c *Clientset) RosV1alpha1() rosv1alpha1.RosV1alpha1Interface {
	return c.rosV1alpha1
}

// RouteV1alpha1 retrieves the RouteV1alpha1Client
func (c *Clientset) RouteV1alpha1() routev1alpha1.RouteV1alpha1Interface {
	return c.routeV1alpha1
}

// RouterV1alpha1 retrieves the RouterV1alpha1Client
func (c *Clientset) RouterV1alpha1() routerv1alpha1.RouterV1alpha1Interface {
	return c.routerV1alpha1
}

// SagV1alpha1 retrieves the SagV1alpha1Client
func (c *Clientset) SagV1alpha1() sagv1alpha1.SagV1alpha1Interface {
	return c.sagV1alpha1
}

// SecurityV1alpha1 retrieves the SecurityV1alpha1Client
func (c *Clientset) SecurityV1alpha1() securityv1alpha1.SecurityV1alpha1Interface {
	return c.securityV1alpha1
}

// SlbV1alpha1 retrieves the SlbV1alpha1Client
func (c *Clientset) SlbV1alpha1() slbv1alpha1.SlbV1alpha1Interface {
	return c.slbV1alpha1
}

// SnapshotV1alpha1 retrieves the SnapshotV1alpha1Client
func (c *Clientset) SnapshotV1alpha1() snapshotv1alpha1.SnapshotV1alpha1Interface {
	return c.snapshotV1alpha1
}

// SnatV1alpha1 retrieves the SnatV1alpha1Client
func (c *Clientset) SnatV1alpha1() snatv1alpha1.SnatV1alpha1Interface {
	return c.snatV1alpha1
}

// SslV1alpha1 retrieves the SslV1alpha1Client
func (c *Clientset) SslV1alpha1() sslv1alpha1.SslV1alpha1Interface {
	return c.sslV1alpha1
}

// SubnetV1alpha1 retrieves the SubnetV1alpha1Client
func (c *Clientset) SubnetV1alpha1() subnetv1alpha1.SubnetV1alpha1Interface {
	return c.subnetV1alpha1
}

// TsdbV1alpha1 retrieves the TsdbV1alpha1Client
func (c *Clientset) TsdbV1alpha1() tsdbv1alpha1.TsdbV1alpha1Interface {
	return c.tsdbV1alpha1
}

// VpcV1alpha1 retrieves the VpcV1alpha1Client
func (c *Clientset) VpcV1alpha1() vpcv1alpha1.VpcV1alpha1Interface {
	return c.vpcV1alpha1
}

// VpnV1alpha1 retrieves the VpnV1alpha1Client
func (c *Clientset) VpnV1alpha1() vpnv1alpha1.VpnV1alpha1Interface {
	return c.vpnV1alpha1
}

// VswitchV1alpha1 retrieves the VswitchV1alpha1Client
func (c *Clientset) VswitchV1alpha1() vswitchv1alpha1.VswitchV1alpha1Interface {
	return c.vswitchV1alpha1
}

// WafV1alpha1 retrieves the WafV1alpha1Client
func (c *Clientset) WafV1alpha1() wafv1alpha1.WafV1alpha1Interface {
	return c.wafV1alpha1
}

// YundunV1alpha1 retrieves the YundunV1alpha1Client
func (c *Clientset) YundunV1alpha1() yundunv1alpha1.YundunV1alpha1Interface {
	return c.yundunV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.actiontrailV1alpha1, err = actiontrailv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.adbV1alpha1, err = adbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.alidnsV1alpha1, err = alidnsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.alikafkaV1alpha1, err = alikafkav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.amqpV1alpha1, err = amqpv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.apigatewayV1alpha1, err = apigatewayv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.autoV1alpha1, err = autov1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.brainV1alpha1, err = brainv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.casV1alpha1, err = casv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cassandraV1alpha1, err = cassandrav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cdnV1alpha1, err = cdnv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cenV1alpha1, err = cenv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cloudV1alpha1, err = cloudv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cmsV1alpha1, err = cmsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.commonV1alpha1, err = commonv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.configV1alpha1, err = configv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.containerV1alpha1, err = containerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.copyV1alpha1, err = copyv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.crV1alpha1, err = crv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.csV1alpha1, err = csv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.datahubV1alpha1, err = datahubv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dbV1alpha1, err = dbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dcdnV1alpha1, err = dcdnv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ddosbgpV1alpha1, err = ddosbgpv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ddoscooV1alpha1, err = ddoscoov1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.directV1alpha1, err = directv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.diskV1alpha1, err = diskv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dmsV1alpha1, err = dmsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dnsV1alpha1, err = dnsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.drdsV1alpha1, err = drdsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eciV1alpha1, err = eciv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ecsV1alpha1, err = ecsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.edasV1alpha1, err = edasv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eipV1alpha1, err = eipv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eipanycastV1alpha1, err = eipanycastv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.elasticsearchV1alpha1, err = elasticsearchv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.emrV1alpha1, err = emrv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.essV1alpha1, err = essv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eventV1alpha1, err = eventv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.fcV1alpha1, err = fcv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.fnfV1alpha1, err = fnfv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.forwardV1alpha1, err = forwardv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.gaV1alpha1, err = gav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.gpdbV1alpha1, err = gpdbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.havipV1alpha1, err = havipv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.hbaseV1alpha1, err = hbasev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.imageV1alpha1, err = imagev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.instanceV1alpha1, err = instancev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.keyV1alpha1, err = keyv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.kmsV1alpha1, err = kmsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.kvstoreV1alpha1, err = kvstorev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.launchV1alpha1, err = launchv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.logV1alpha1, err = logv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.logtailV1alpha1, err = logtailv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.marketV1alpha1, err = marketv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.maxcomputeV1alpha1, err = maxcomputev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mnsV1alpha1, err = mnsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mongodbV1alpha1, err = mongodbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mseV1alpha1, err = msev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.nasV1alpha1, err = nasv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.natV1alpha1, err = natv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.networkV1alpha1, err = networkv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.onsV1alpha1, err = onsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.oosV1alpha1, err = oosv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ossV1alpha1, err = ossv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.otsV1alpha1, err = otsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.polardbV1alpha1, err = polardbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.privatelinkV1alpha1, err = privatelinkv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.pvtzV1alpha1, err = pvtzv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.quotasV1alpha1, err = quotasv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ramV1alpha1, err = ramv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.rdsV1alpha1, err = rdsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.reservedV1alpha1, err = reservedv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.resourceV1alpha1, err = resourcev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.rosV1alpha1, err = rosv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.routeV1alpha1, err = routev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.routerV1alpha1, err = routerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sagV1alpha1, err = sagv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.securityV1alpha1, err = securityv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.slbV1alpha1, err = slbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.snapshotV1alpha1, err = snapshotv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.snatV1alpha1, err = snatv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sslV1alpha1, err = sslv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.subnetV1alpha1, err = subnetv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.tsdbV1alpha1, err = tsdbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vpcV1alpha1, err = vpcv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vpnV1alpha1, err = vpnv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vswitchV1alpha1, err = vswitchv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.wafV1alpha1, err = wafv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.yundunV1alpha1, err = yundunv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.actiontrailV1alpha1 = actiontrailv1alpha1.NewForConfigOrDie(c)
	cs.adbV1alpha1 = adbv1alpha1.NewForConfigOrDie(c)
	cs.alidnsV1alpha1 = alidnsv1alpha1.NewForConfigOrDie(c)
	cs.alikafkaV1alpha1 = alikafkav1alpha1.NewForConfigOrDie(c)
	cs.amqpV1alpha1 = amqpv1alpha1.NewForConfigOrDie(c)
	cs.apigatewayV1alpha1 = apigatewayv1alpha1.NewForConfigOrDie(c)
	cs.autoV1alpha1 = autov1alpha1.NewForConfigOrDie(c)
	cs.brainV1alpha1 = brainv1alpha1.NewForConfigOrDie(c)
	cs.casV1alpha1 = casv1alpha1.NewForConfigOrDie(c)
	cs.cassandraV1alpha1 = cassandrav1alpha1.NewForConfigOrDie(c)
	cs.cdnV1alpha1 = cdnv1alpha1.NewForConfigOrDie(c)
	cs.cenV1alpha1 = cenv1alpha1.NewForConfigOrDie(c)
	cs.cloudV1alpha1 = cloudv1alpha1.NewForConfigOrDie(c)
	cs.cmsV1alpha1 = cmsv1alpha1.NewForConfigOrDie(c)
	cs.commonV1alpha1 = commonv1alpha1.NewForConfigOrDie(c)
	cs.configV1alpha1 = configv1alpha1.NewForConfigOrDie(c)
	cs.containerV1alpha1 = containerv1alpha1.NewForConfigOrDie(c)
	cs.copyV1alpha1 = copyv1alpha1.NewForConfigOrDie(c)
	cs.crV1alpha1 = crv1alpha1.NewForConfigOrDie(c)
	cs.csV1alpha1 = csv1alpha1.NewForConfigOrDie(c)
	cs.datahubV1alpha1 = datahubv1alpha1.NewForConfigOrDie(c)
	cs.dbV1alpha1 = dbv1alpha1.NewForConfigOrDie(c)
	cs.dcdnV1alpha1 = dcdnv1alpha1.NewForConfigOrDie(c)
	cs.ddosbgpV1alpha1 = ddosbgpv1alpha1.NewForConfigOrDie(c)
	cs.ddoscooV1alpha1 = ddoscoov1alpha1.NewForConfigOrDie(c)
	cs.directV1alpha1 = directv1alpha1.NewForConfigOrDie(c)
	cs.diskV1alpha1 = diskv1alpha1.NewForConfigOrDie(c)
	cs.dmsV1alpha1 = dmsv1alpha1.NewForConfigOrDie(c)
	cs.dnsV1alpha1 = dnsv1alpha1.NewForConfigOrDie(c)
	cs.drdsV1alpha1 = drdsv1alpha1.NewForConfigOrDie(c)
	cs.eciV1alpha1 = eciv1alpha1.NewForConfigOrDie(c)
	cs.ecsV1alpha1 = ecsv1alpha1.NewForConfigOrDie(c)
	cs.edasV1alpha1 = edasv1alpha1.NewForConfigOrDie(c)
	cs.eipV1alpha1 = eipv1alpha1.NewForConfigOrDie(c)
	cs.eipanycastV1alpha1 = eipanycastv1alpha1.NewForConfigOrDie(c)
	cs.elasticsearchV1alpha1 = elasticsearchv1alpha1.NewForConfigOrDie(c)
	cs.emrV1alpha1 = emrv1alpha1.NewForConfigOrDie(c)
	cs.essV1alpha1 = essv1alpha1.NewForConfigOrDie(c)
	cs.eventV1alpha1 = eventv1alpha1.NewForConfigOrDie(c)
	cs.fcV1alpha1 = fcv1alpha1.NewForConfigOrDie(c)
	cs.fnfV1alpha1 = fnfv1alpha1.NewForConfigOrDie(c)
	cs.forwardV1alpha1 = forwardv1alpha1.NewForConfigOrDie(c)
	cs.gaV1alpha1 = gav1alpha1.NewForConfigOrDie(c)
	cs.gpdbV1alpha1 = gpdbv1alpha1.NewForConfigOrDie(c)
	cs.havipV1alpha1 = havipv1alpha1.NewForConfigOrDie(c)
	cs.hbaseV1alpha1 = hbasev1alpha1.NewForConfigOrDie(c)
	cs.imageV1alpha1 = imagev1alpha1.NewForConfigOrDie(c)
	cs.instanceV1alpha1 = instancev1alpha1.NewForConfigOrDie(c)
	cs.keyV1alpha1 = keyv1alpha1.NewForConfigOrDie(c)
	cs.kmsV1alpha1 = kmsv1alpha1.NewForConfigOrDie(c)
	cs.kvstoreV1alpha1 = kvstorev1alpha1.NewForConfigOrDie(c)
	cs.launchV1alpha1 = launchv1alpha1.NewForConfigOrDie(c)
	cs.logV1alpha1 = logv1alpha1.NewForConfigOrDie(c)
	cs.logtailV1alpha1 = logtailv1alpha1.NewForConfigOrDie(c)
	cs.marketV1alpha1 = marketv1alpha1.NewForConfigOrDie(c)
	cs.maxcomputeV1alpha1 = maxcomputev1alpha1.NewForConfigOrDie(c)
	cs.mnsV1alpha1 = mnsv1alpha1.NewForConfigOrDie(c)
	cs.mongodbV1alpha1 = mongodbv1alpha1.NewForConfigOrDie(c)
	cs.mseV1alpha1 = msev1alpha1.NewForConfigOrDie(c)
	cs.nasV1alpha1 = nasv1alpha1.NewForConfigOrDie(c)
	cs.natV1alpha1 = natv1alpha1.NewForConfigOrDie(c)
	cs.networkV1alpha1 = networkv1alpha1.NewForConfigOrDie(c)
	cs.onsV1alpha1 = onsv1alpha1.NewForConfigOrDie(c)
	cs.oosV1alpha1 = oosv1alpha1.NewForConfigOrDie(c)
	cs.ossV1alpha1 = ossv1alpha1.NewForConfigOrDie(c)
	cs.otsV1alpha1 = otsv1alpha1.NewForConfigOrDie(c)
	cs.polardbV1alpha1 = polardbv1alpha1.NewForConfigOrDie(c)
	cs.privatelinkV1alpha1 = privatelinkv1alpha1.NewForConfigOrDie(c)
	cs.pvtzV1alpha1 = pvtzv1alpha1.NewForConfigOrDie(c)
	cs.quotasV1alpha1 = quotasv1alpha1.NewForConfigOrDie(c)
	cs.ramV1alpha1 = ramv1alpha1.NewForConfigOrDie(c)
	cs.rdsV1alpha1 = rdsv1alpha1.NewForConfigOrDie(c)
	cs.reservedV1alpha1 = reservedv1alpha1.NewForConfigOrDie(c)
	cs.resourceV1alpha1 = resourcev1alpha1.NewForConfigOrDie(c)
	cs.rosV1alpha1 = rosv1alpha1.NewForConfigOrDie(c)
	cs.routeV1alpha1 = routev1alpha1.NewForConfigOrDie(c)
	cs.routerV1alpha1 = routerv1alpha1.NewForConfigOrDie(c)
	cs.sagV1alpha1 = sagv1alpha1.NewForConfigOrDie(c)
	cs.securityV1alpha1 = securityv1alpha1.NewForConfigOrDie(c)
	cs.slbV1alpha1 = slbv1alpha1.NewForConfigOrDie(c)
	cs.snapshotV1alpha1 = snapshotv1alpha1.NewForConfigOrDie(c)
	cs.snatV1alpha1 = snatv1alpha1.NewForConfigOrDie(c)
	cs.sslV1alpha1 = sslv1alpha1.NewForConfigOrDie(c)
	cs.subnetV1alpha1 = subnetv1alpha1.NewForConfigOrDie(c)
	cs.tsdbV1alpha1 = tsdbv1alpha1.NewForConfigOrDie(c)
	cs.vpcV1alpha1 = vpcv1alpha1.NewForConfigOrDie(c)
	cs.vpnV1alpha1 = vpnv1alpha1.NewForConfigOrDie(c)
	cs.vswitchV1alpha1 = vswitchv1alpha1.NewForConfigOrDie(c)
	cs.wafV1alpha1 = wafv1alpha1.NewForConfigOrDie(c)
	cs.yundunV1alpha1 = yundunv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.actiontrailV1alpha1 = actiontrailv1alpha1.New(c)
	cs.adbV1alpha1 = adbv1alpha1.New(c)
	cs.alidnsV1alpha1 = alidnsv1alpha1.New(c)
	cs.alikafkaV1alpha1 = alikafkav1alpha1.New(c)
	cs.amqpV1alpha1 = amqpv1alpha1.New(c)
	cs.apigatewayV1alpha1 = apigatewayv1alpha1.New(c)
	cs.autoV1alpha1 = autov1alpha1.New(c)
	cs.brainV1alpha1 = brainv1alpha1.New(c)
	cs.casV1alpha1 = casv1alpha1.New(c)
	cs.cassandraV1alpha1 = cassandrav1alpha1.New(c)
	cs.cdnV1alpha1 = cdnv1alpha1.New(c)
	cs.cenV1alpha1 = cenv1alpha1.New(c)
	cs.cloudV1alpha1 = cloudv1alpha1.New(c)
	cs.cmsV1alpha1 = cmsv1alpha1.New(c)
	cs.commonV1alpha1 = commonv1alpha1.New(c)
	cs.configV1alpha1 = configv1alpha1.New(c)
	cs.containerV1alpha1 = containerv1alpha1.New(c)
	cs.copyV1alpha1 = copyv1alpha1.New(c)
	cs.crV1alpha1 = crv1alpha1.New(c)
	cs.csV1alpha1 = csv1alpha1.New(c)
	cs.datahubV1alpha1 = datahubv1alpha1.New(c)
	cs.dbV1alpha1 = dbv1alpha1.New(c)
	cs.dcdnV1alpha1 = dcdnv1alpha1.New(c)
	cs.ddosbgpV1alpha1 = ddosbgpv1alpha1.New(c)
	cs.ddoscooV1alpha1 = ddoscoov1alpha1.New(c)
	cs.directV1alpha1 = directv1alpha1.New(c)
	cs.diskV1alpha1 = diskv1alpha1.New(c)
	cs.dmsV1alpha1 = dmsv1alpha1.New(c)
	cs.dnsV1alpha1 = dnsv1alpha1.New(c)
	cs.drdsV1alpha1 = drdsv1alpha1.New(c)
	cs.eciV1alpha1 = eciv1alpha1.New(c)
	cs.ecsV1alpha1 = ecsv1alpha1.New(c)
	cs.edasV1alpha1 = edasv1alpha1.New(c)
	cs.eipV1alpha1 = eipv1alpha1.New(c)
	cs.eipanycastV1alpha1 = eipanycastv1alpha1.New(c)
	cs.elasticsearchV1alpha1 = elasticsearchv1alpha1.New(c)
	cs.emrV1alpha1 = emrv1alpha1.New(c)
	cs.essV1alpha1 = essv1alpha1.New(c)
	cs.eventV1alpha1 = eventv1alpha1.New(c)
	cs.fcV1alpha1 = fcv1alpha1.New(c)
	cs.fnfV1alpha1 = fnfv1alpha1.New(c)
	cs.forwardV1alpha1 = forwardv1alpha1.New(c)
	cs.gaV1alpha1 = gav1alpha1.New(c)
	cs.gpdbV1alpha1 = gpdbv1alpha1.New(c)
	cs.havipV1alpha1 = havipv1alpha1.New(c)
	cs.hbaseV1alpha1 = hbasev1alpha1.New(c)
	cs.imageV1alpha1 = imagev1alpha1.New(c)
	cs.instanceV1alpha1 = instancev1alpha1.New(c)
	cs.keyV1alpha1 = keyv1alpha1.New(c)
	cs.kmsV1alpha1 = kmsv1alpha1.New(c)
	cs.kvstoreV1alpha1 = kvstorev1alpha1.New(c)
	cs.launchV1alpha1 = launchv1alpha1.New(c)
	cs.logV1alpha1 = logv1alpha1.New(c)
	cs.logtailV1alpha1 = logtailv1alpha1.New(c)
	cs.marketV1alpha1 = marketv1alpha1.New(c)
	cs.maxcomputeV1alpha1 = maxcomputev1alpha1.New(c)
	cs.mnsV1alpha1 = mnsv1alpha1.New(c)
	cs.mongodbV1alpha1 = mongodbv1alpha1.New(c)
	cs.mseV1alpha1 = msev1alpha1.New(c)
	cs.nasV1alpha1 = nasv1alpha1.New(c)
	cs.natV1alpha1 = natv1alpha1.New(c)
	cs.networkV1alpha1 = networkv1alpha1.New(c)
	cs.onsV1alpha1 = onsv1alpha1.New(c)
	cs.oosV1alpha1 = oosv1alpha1.New(c)
	cs.ossV1alpha1 = ossv1alpha1.New(c)
	cs.otsV1alpha1 = otsv1alpha1.New(c)
	cs.polardbV1alpha1 = polardbv1alpha1.New(c)
	cs.privatelinkV1alpha1 = privatelinkv1alpha1.New(c)
	cs.pvtzV1alpha1 = pvtzv1alpha1.New(c)
	cs.quotasV1alpha1 = quotasv1alpha1.New(c)
	cs.ramV1alpha1 = ramv1alpha1.New(c)
	cs.rdsV1alpha1 = rdsv1alpha1.New(c)
	cs.reservedV1alpha1 = reservedv1alpha1.New(c)
	cs.resourceV1alpha1 = resourcev1alpha1.New(c)
	cs.rosV1alpha1 = rosv1alpha1.New(c)
	cs.routeV1alpha1 = routev1alpha1.New(c)
	cs.routerV1alpha1 = routerv1alpha1.New(c)
	cs.sagV1alpha1 = sagv1alpha1.New(c)
	cs.securityV1alpha1 = securityv1alpha1.New(c)
	cs.slbV1alpha1 = slbv1alpha1.New(c)
	cs.snapshotV1alpha1 = snapshotv1alpha1.New(c)
	cs.snatV1alpha1 = snatv1alpha1.New(c)
	cs.sslV1alpha1 = sslv1alpha1.New(c)
	cs.subnetV1alpha1 = subnetv1alpha1.New(c)
	cs.tsdbV1alpha1 = tsdbv1alpha1.New(c)
	cs.vpcV1alpha1 = vpcv1alpha1.New(c)
	cs.vpnV1alpha1 = vpnv1alpha1.New(c)
	cs.vswitchV1alpha1 = vswitchv1alpha1.New(c)
	cs.wafV1alpha1 = wafv1alpha1.New(c)
	cs.yundunV1alpha1 = yundunv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
