/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecFcServiceConfig{}).Type1()):      GatewayAPISpecFcServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecHttpServiceConfig{}).Type1()):    GatewayAPISpecHttpServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecHttpVpcServiceConfig{}).Type1()): GatewayAPISpecHttpVpcServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecMockServiceConfig{}).Type1()):    GatewayAPISpecMockServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecRequestConfig{}).Type1()):        GatewayAPISpecRequestConfigCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecFcServiceConfig{}).Type1()):      GatewayAPISpecFcServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecHttpServiceConfig{}).Type1()):    GatewayAPISpecHttpServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecHttpVpcServiceConfig{}).Type1()): GatewayAPISpecHttpVpcServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecMockServiceConfig{}).Type1()):    GatewayAPISpecMockServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecRequestConfig{}).Type1()):        GatewayAPISpecRequestConfigCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type GatewayAPISpecFcServiceConfigCodec struct {
}

func (GatewayAPISpecFcServiceConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GatewayAPISpecFcServiceConfig)(ptr) == nil
}

func (GatewayAPISpecFcServiceConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GatewayAPISpecFcServiceConfig)(ptr)
	var objs []GatewayAPISpecFcServiceConfig
	if obj != nil {
		objs = []GatewayAPISpecFcServiceConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecFcServiceConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GatewayAPISpecFcServiceConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GatewayAPISpecFcServiceConfig)(ptr) = GatewayAPISpecFcServiceConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GatewayAPISpecFcServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecFcServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GatewayAPISpecFcServiceConfig)(ptr) = objs[0]
			} else {
				*(*GatewayAPISpecFcServiceConfig)(ptr) = GatewayAPISpecFcServiceConfig{}
			}
		} else {
			*(*GatewayAPISpecFcServiceConfig)(ptr) = GatewayAPISpecFcServiceConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GatewayAPISpecFcServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecFcServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GatewayAPISpecFcServiceConfig)(ptr) = obj
		} else {
			*(*GatewayAPISpecFcServiceConfig)(ptr) = GatewayAPISpecFcServiceConfig{}
		}
	default:
		iter.ReportError("decode GatewayAPISpecFcServiceConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GatewayAPISpecHttpServiceConfigCodec struct {
}

func (GatewayAPISpecHttpServiceConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GatewayAPISpecHttpServiceConfig)(ptr) == nil
}

func (GatewayAPISpecHttpServiceConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GatewayAPISpecHttpServiceConfig)(ptr)
	var objs []GatewayAPISpecHttpServiceConfig
	if obj != nil {
		objs = []GatewayAPISpecHttpServiceConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecHttpServiceConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GatewayAPISpecHttpServiceConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GatewayAPISpecHttpServiceConfig)(ptr) = GatewayAPISpecHttpServiceConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GatewayAPISpecHttpServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecHttpServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GatewayAPISpecHttpServiceConfig)(ptr) = objs[0]
			} else {
				*(*GatewayAPISpecHttpServiceConfig)(ptr) = GatewayAPISpecHttpServiceConfig{}
			}
		} else {
			*(*GatewayAPISpecHttpServiceConfig)(ptr) = GatewayAPISpecHttpServiceConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GatewayAPISpecHttpServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecHttpServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GatewayAPISpecHttpServiceConfig)(ptr) = obj
		} else {
			*(*GatewayAPISpecHttpServiceConfig)(ptr) = GatewayAPISpecHttpServiceConfig{}
		}
	default:
		iter.ReportError("decode GatewayAPISpecHttpServiceConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GatewayAPISpecHttpVpcServiceConfigCodec struct {
}

func (GatewayAPISpecHttpVpcServiceConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GatewayAPISpecHttpVpcServiceConfig)(ptr) == nil
}

func (GatewayAPISpecHttpVpcServiceConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GatewayAPISpecHttpVpcServiceConfig)(ptr)
	var objs []GatewayAPISpecHttpVpcServiceConfig
	if obj != nil {
		objs = []GatewayAPISpecHttpVpcServiceConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecHttpVpcServiceConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GatewayAPISpecHttpVpcServiceConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GatewayAPISpecHttpVpcServiceConfig)(ptr) = GatewayAPISpecHttpVpcServiceConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GatewayAPISpecHttpVpcServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecHttpVpcServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GatewayAPISpecHttpVpcServiceConfig)(ptr) = objs[0]
			} else {
				*(*GatewayAPISpecHttpVpcServiceConfig)(ptr) = GatewayAPISpecHttpVpcServiceConfig{}
			}
		} else {
			*(*GatewayAPISpecHttpVpcServiceConfig)(ptr) = GatewayAPISpecHttpVpcServiceConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GatewayAPISpecHttpVpcServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecHttpVpcServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GatewayAPISpecHttpVpcServiceConfig)(ptr) = obj
		} else {
			*(*GatewayAPISpecHttpVpcServiceConfig)(ptr) = GatewayAPISpecHttpVpcServiceConfig{}
		}
	default:
		iter.ReportError("decode GatewayAPISpecHttpVpcServiceConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GatewayAPISpecMockServiceConfigCodec struct {
}

func (GatewayAPISpecMockServiceConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GatewayAPISpecMockServiceConfig)(ptr) == nil
}

func (GatewayAPISpecMockServiceConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GatewayAPISpecMockServiceConfig)(ptr)
	var objs []GatewayAPISpecMockServiceConfig
	if obj != nil {
		objs = []GatewayAPISpecMockServiceConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecMockServiceConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GatewayAPISpecMockServiceConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GatewayAPISpecMockServiceConfig)(ptr) = GatewayAPISpecMockServiceConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GatewayAPISpecMockServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecMockServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GatewayAPISpecMockServiceConfig)(ptr) = objs[0]
			} else {
				*(*GatewayAPISpecMockServiceConfig)(ptr) = GatewayAPISpecMockServiceConfig{}
			}
		} else {
			*(*GatewayAPISpecMockServiceConfig)(ptr) = GatewayAPISpecMockServiceConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GatewayAPISpecMockServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecMockServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GatewayAPISpecMockServiceConfig)(ptr) = obj
		} else {
			*(*GatewayAPISpecMockServiceConfig)(ptr) = GatewayAPISpecMockServiceConfig{}
		}
	default:
		iter.ReportError("decode GatewayAPISpecMockServiceConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GatewayAPISpecRequestConfigCodec struct {
}

func (GatewayAPISpecRequestConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GatewayAPISpecRequestConfig)(ptr) == nil
}

func (GatewayAPISpecRequestConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GatewayAPISpecRequestConfig)(ptr)
	var objs []GatewayAPISpecRequestConfig
	if obj != nil {
		objs = []GatewayAPISpecRequestConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecRequestConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GatewayAPISpecRequestConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GatewayAPISpecRequestConfig)(ptr) = GatewayAPISpecRequestConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GatewayAPISpecRequestConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecRequestConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GatewayAPISpecRequestConfig)(ptr) = objs[0]
			} else {
				*(*GatewayAPISpecRequestConfig)(ptr) = GatewayAPISpecRequestConfig{}
			}
		} else {
			*(*GatewayAPISpecRequestConfig)(ptr) = GatewayAPISpecRequestConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GatewayAPISpecRequestConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GatewayAPISpecRequestConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GatewayAPISpecRequestConfig)(ptr) = obj
		} else {
			*(*GatewayAPISpecRequestConfig)(ptr) = GatewayAPISpecRequestConfig{}
		}
	default:
		iter.ReportError("decode GatewayAPISpecRequestConfig", "unexpected JSON type")
	}
}
